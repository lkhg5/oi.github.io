{
  "data": {
    "lesson": {
      "id": 899915,
      "key": "694232a0-41f1-411f-ba55-02ba223feeae",
      "title": "Spring Boot - continued",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Spring boot exception, web socket, and package.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/694232a0-41f1-411f-ba55-02ba223feeae/899915/1564507258799/Spring+Boot+-+continued+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/694232a0-41f1-411f-ba55-02ba223feeae/899915/1564507252998/Spring+Boot+-+continued+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 899912,
          "key": "833127de-e7f5-48cb-bf66-bfafb393fa2a",
          "title": "Spring Boot Exception Handling",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "833127de-e7f5-48cb-bf66-bfafb393fa2a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899916,
              "key": "e6f479ca-fa49-4fed-aaa0-ba5afd5e6912",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Spring Boot Exception Handling",
              "instructor_notes": ""
            },
            {
              "id": 900583,
              "key": "edf76786-7846-422a-b6a7-ec61bde30009",
              "title": "035ND C01 L04 A01 SPRINGBOOT EXCEPTION",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hAYKm2LlqIU",
                "china_cdn_id": "hAYKm2LlqIU.mp4"
              }
            },
            {
              "id": 900586,
              "key": "c4243e3f-f187-4f99-9b1c-458644c4040b",
              "title": "035ND C01 L04 A02 EXCEPTION HANDLING",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oAcGe3jHbN8",
                "china_cdn_id": "oAcGe3jHbN8.mp4"
              }
            },
            {
              "id": 899917,
              "key": "09ccd109-d118-4ff4-9909-d14642add78a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are five ways we can use to handle Spring Boot exceptions rather than showing default error pages like 404 or 500 which don't give much detail about the exception. The ways are listed below:\n\n- Creating a custom error page\n\n- Using @ExceptionHandler\n\n- Using @ControllerAdvice + @ExceptionHandler\n\n- Configuring SimpleMappingExceptionResolver class\n\n- Using Custom HandlerExceptionResolver class.\n\nLet’s learn these one by one in the coming lessons. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 955487,
          "key": "1f0f293d-186a-43df-ac24-343edd2030a3",
          "title": "Spring Boot Exception - Custom Error Page",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f0f293d-186a-43df-ac24-343edd2030a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 955488,
              "key": "ca1cc89c-5696-45bf-ae97-69fb212f719e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating a Custom Error Page\n",
              "instructor_notes": ""
            },
            {
              "id": 955489,
              "key": "b77dc62b-37b0-45ed-93f7-2e91d8a08ceb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Follow the instructions below to learn and implement a custom error handling page: \n\n1. Create a new project and name it spring-boot-exception with Spring Web, Thymeleaf and Spring Boot DevTool as dependencies.\n2. Download, unzip, and import the project as always.\n3. Create a controller directory under your application directory (package) and create a UserController class inside it. Your code should look like the one below: \n\n```\n@Controller\npublic class UserController {\n\n   @RequestMapping(\"/add\")\n   public String add() {\n       int num = 10 / 0;\n       return \"add\";\n   }\n}\n```\n4. Create an empty add.html inside resources/templates directory.\n\n5. Run the application and go to http://localhost:8080/add\n6. If everything is setup correctly, you should see something like the below in the browser:\n\n```\nThere was an unexpected error (type=Internal Server Error, status=500).\n/ by zero\njava.lang.ArithmeticException: / by zero\n```\n\nThe page you are looking at is the Spring Boot default error handling page, but what if we want to show our own custom page? To do that, we can add an error.html page in resources/template folder\n\n7. Create an error.html page under resources/template folder. It will be something like the below:\n \n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Custom Error Page</title>\n</head>\n<body>\n   <h3>Error Page</h3>\n</body>\n</html>\n```\n\n8. Because we are using DevTool already, once you add the error page, you can just refresh localhost:8080/add, and you should see the error.html page you just created, not the default Spring boot error page. \n\nCreating a custom error page is easy, but for most of the users, it’s not ideal because they want to see different error handling pages for different errors. We'll see how to do that when we explain the other ways of exception handling. ",
              "instructor_notes": ""
            },
            {
              "id": 955490,
              "key": "46cad13f-68a1-4ca2-8368-c7eecdde2b94",
              "title": "035ND C01 L04 A03 SPRINGBOOT EXAMPLE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5KveNO5V9f0",
                "china_cdn_id": "5KveNO5V9f0.mp4"
              }
            }
          ]
        },
        {
          "id": 955491,
          "key": "767821a0-a8d0-4b82-b0ac-03337de1e286",
          "title": "Spring Boot Exception - Exception Handlers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "767821a0-a8d0-4b82-b0ac-03337de1e286",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 955496,
              "key": "b2300779-3a67-441e-bbbb-9d53c2ff682e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Exception Handlers",
              "instructor_notes": ""
            },
            {
              "id": 955492,
              "key": "3fe4d372-8146-4904-9481-7e023afc6dd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Example - Part 1\n\nTo understand how this works, let’s reuse the project we have created, modify it, and understand how @exceptionhandler will handle exceptions. Follow the below instructions: \n\n1. Add the below new method to the controller class: \n```\n@ExceptionHandler(value={java.lang.ArithmeticException.class})\npublic ModelAndView handlerArithmeticException(Exception e) {\n   ModelAndView modelAndView = new ModelAndView();\n   modelAndView.addObject(\"exception\", e.toString());\n   modelAndView.setViewName(\"mathError\");\n   return modelAndView;\n}\n```\n\n2. Rename error.html to error.bak.html\n\n3. Add a new html file under template folder and name it \"mathError.html\". Your code should look like the one below:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Title</title>\n</head>\n<body>\nThis contains math exceptions\n</body>\n</html>\n```\n\n4. Go to http://localhost:8080/add and observe how mathError.html page will be rendered on the browser. \n\nLet's explain what happened in the example above. We defined the method ```handlerArithmeticException``` in the controller class to be called once an ArithmeticException occurs. How does that work? When we go to http://localhost:8080/add, an arithmetic exception will be thrown because this line: ```int num = 10 / 0``` tries to perform a division over 0, which is something invalid in mathematics. To allow ```handlerArithmeticException```  method to be triggered automatically when any ArithmeticException occurs, we added this annotation above it: ```@ExceptionHandler(value={java.lang.ArithmeticException.class})```. This annotation means that this method will work as an exception handler which will be called once the exception type specified between the parenthesis occurs (which is ArithmeticException in this case). The method returns ``ModelAndView``` object. ```ModelAndView``` can hold both objects and views, using ModelAndView as a return value allows any method in a controller class to return both a model and a value packed in the same object (packed in an ModelAndView object). \n\nLet's explain the code in the method's body. First, we defined ModelAndView object. Then, we filled that ModelAndView object with another object which is a string that represents the error message, \"exception\" is the name associated with the object we added to ```modelAndView```, and e.toString() returns the string that represents the error. Then, we added the view to our ModelAndView object which is the name of the html page we want to see when this method gets triggered. We did that using ```modelAndView.setViewName(\"mathError\")```. In this case, \"mathError.html\" will be displayed. Finally, we returned the ModelAndView object which contains the error and the view that should be displayed.  \n\nFor the html part, we just defined the html page that we want to display when an ArithmeticException occurs which is \"mathError.html\". We just added some simple text to it, but of course when you develop any website you can customize that page as you want, you can add more text, add images, and more. \n\nAs you may have noticed, for each exception we define two things: 1. The handler method that will handle it, 2. The view (the html page) that will be displayed when the error occurs. You'll need to do this for each Exception you want to handle. \n\nOf course, a single exception handler method can handle multiple exceptions if you want, you just need to list those exceptions between the curly braces. For example, in the annotation you can write: ```@ExceptionHandler({NullPointerException.class, ArithmeticException.class})```, this means that the handler method under this annotation will be triggered when any NullPointerException or ArithmeticException occurs. This can let you write less amounts of code if multiple errors can be handled by the same handler method and can have the same html page displayed when they occur. \n",
              "instructor_notes": ""
            },
            {
              "id": 955494,
              "key": "4e240a1f-1e30-4524-b433-64e9cc2d9d63",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example - Part 2",
              "instructor_notes": ""
            },
            {
              "id": 955493,
              "key": "217db3f7-0422-48d3-b584-2a2b393aa660",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This time we are going to handle a different exception, which is NullPointerException. \n\n1. Update the controller and add the below two methods:\n```\n@RequestMapping(\"/update\")\npublic String update() {\n   String name = null;\n   name = name.toLowerCase(); // this line will cause NullPointerException because it calls a method on a null object\n   return \"update\";\n}\n```\n```\n@ExceptionHandler(value={java.lang.NullPointerException.class})\npublic ModelAndView handlerNullPointerException(Exception e) {\n   ModelAndView modelAndView = new ModelAndView();\n   modelAndView.addObject(\"exception\", e.toString());\n   modelAndView.setViewName(\"nullPointerError\");\n   return modelAndView;\n}\n```\n\n2. Add a new html page named \"nullPointerError.html\" under templates directory. Your code should look like the one below:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Title</title>\n</head>\n<body>\nThis contains null pointer exceptions.\n</body>\n</html>\n```\n3. Go to http://localhost:8080/update and observe how nullPointerError.html page will be rendered on the browser. The NullPointerException will occur when we go to http://localhost:8080/update because in update method (which will be called when we visit the link above) we try to call ```toLowerCase``` method on a null object. ",
              "instructor_notes": ""
            },
            {
              "id": 955495,
              "key": "32d6a0e3-29a2-4795-b5f5-0d26b39d7f65",
              "title": "035ND C01 L04 A04 EXCEPTION HANDLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cDRG6cgsgXY",
                "china_cdn_id": "cDRG6cgsgXY.mp4"
              }
            }
          ]
        },
        {
          "id": 906588,
          "key": "dc7ba43c-cea2-47e8-9e5a-10e80ff71d59",
          "title": "Spring Boot Exception- @ControllerAdvise + @ExceptionHandler",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc7ba43c-cea2-47e8-9e5a-10e80ff71d59",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906589,
              "key": "4fd757cd-b18f-4188-86f3-24478b0ba23d",
              "title": "035ND C01 L04 A05 @CONTROLLERADVICE + @EXCEPTIONHANDLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sAQ_YCrCUlk",
                "china_cdn_id": "sAQ_YCrCUlk.mp4"
              }
            },
            {
              "id": 906591,
              "key": "58d7ea25-2db3-4be1-b956-5dea616d259d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example Instructions",
              "instructor_notes": ""
            },
            {
              "id": 906590,
              "key": "0a882674-aa63-41a0-bb45-03792c6747cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n1. Add a new controller class named RoleController under the controller directory. Your code should look like the one below: \n```\n@Controller\npublic class RoleController {\n   @RequestMapping(\"/roleadd\")\n   public String add() {\n       int num = 10 / 0;\n       return \"add\";\n   }\n}\n```\n\n2. Create an exceptions folder (under your application package) and create a GolbalExceptionHandler Java class inside it. Your code should look like the one below: \n```\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n   @ExceptionHandler(value={java.lang.ArithmeticException.class})\n   public ModelAndView handlerArithmeticException(Exception e) {\n       ModelAndView modelAndView = new ModelAndView();\n       modelAndView.addObject(\"exception\", e.toString());\n       modelAndView.setViewName(\"mathError\");\n       return modelAndView;\n   }\n\n   @ExceptionHandler(value={java.lang.NullPointerException.class})\n   public ModelAndView handlerNullPointerException(Exception e) {\n       ModelAndView modelAndView = new ModelAndView();\n       modelAndView.addObject(\"exception\", e.toString());\n       modelAndView.setViewName(\"nullPointerError\");\n       return modelAndView;\n   }\n}\n```\nThe ```@ControllerAdvice``` annotation used above means that the handler methods inside the class can handle exceptions across the entire application, and not only those resulting from a specific controller. \n\n\n3. Comment out the two exception handler methods in UserController class so you can see how the global exception handlers will work to handle exceptions in different controllers. \n\n\n4. Go to http://localhost:8080/add, http://localhost:8080/update, and http://localhost:8080/roleadd to see how the exceptions will be handled properly by the global handlers we defined. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906592,
          "key": "4cc7c511-68e2-4e05-a0ef-e7924c1e74e0",
          "title": "Spring Boot Exception - SimpleMappingExceptionResolver",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4cc7c511-68e2-4e05-a0ef-e7924c1e74e0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906593,
              "key": "ac3ba9ba-fb97-4fa9-b154-b384ba2720e5",
              "title": "035ND C01 L04 A06 SIMPLE MAPPING RESOLVER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UghPypy54vA",
                "china_cdn_id": "UghPypy54vA.mp4"
              }
            },
            {
              "id": 906594,
              "key": "1eab15b9-1cb5-46f4-bbef-af3a6f2b90ef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Example Instructions",
              "instructor_notes": ""
            },
            {
              "id": 906595,
              "key": "a38bddf7-9800-418c-bfb0-67cef5af35c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. Let’s make our GloablExceptionHandler as bak first, so that we can keep our code. Rename ```GloablExceptionHandler.java``` to ```GlobalExceptionHandler.java.bak```. ```.bak``` extension means that the file is a backup file and that we can retrieve the content of that file. Therefore, it's a good practice to rename a file so it ends with .bak if you want to be able to retrieve its original content. \n\n2. Create a class under exceptions directory and name it \"MySimpleMappingExceptionResolver\". Your code should look like the one below: \n```\n@Configuration\npublic class MySimpleMappingExceptionResolver {\n   @Bean\n   public SimpleMappingExceptionResolver getSimpleMappingExceptionResolver() {\n       SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();\n       Properties mapping = new Properties();\n       mapping.put(\"java.lang.ArithmeticException\", \"mathError\"); //key=exception full name. value, view name\n       mapping.put(\"java.lang.NullPointerException\", \"nullPointerError\");\n       resolver.setExceptionMappings(mapping);\n       return resolver;\n   }\n}\n```\n\n3. If you refresh the browser page, you can see error is handled.\n\nIn the code above, we defined an error handling method that returns SimpleMappingExceptionResolver object. We used SimpleMappingExceptionResolver to map different exceptions to different views. In order for SimpleMappingExceptionResolver to do that, it needs to take an argument of Properties type that defines the mapping between the exceptions and the views. Properties is simply a subclass of HashTable and it allows us to associate values of type String with keys (which are also strings). We put our mappings into the Properties object, where we map each exception to the name of the view that should be displayed when it occurs. For example, if an ArithmeticException will occur, mathError.html will be viewed. Eventually, we passed the Properties object to the SimpleMappingExceptionResolver object and we returned the resolver object. ",
              "instructor_notes": ""
            },
            {
              "id": 906596,
              "key": "b380cf45-0d53-45a0-af1a-978380c97f0f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Demo",
              "instructor_notes": ""
            },
            {
              "id": 906597,
              "key": "480c7b10-88f7-491e-b011-205f24c23698",
              "title": "035ND C01 L04 A07 HANDLER EXCEPTION RESOLVER EXAMPLE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mFrBqrzNIVk",
                "china_cdn_id": "mFrBqrzNIVk.mp4"
              }
            },
            {
              "id": 906598,
              "key": "f1dbc9b1-5e19-4eac-ab5a-6c77cfe91337",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n1. Let’s rename MySimpleMappingExceptionResolver.java to MySimpleMappingExceptionResolver.java.bak\n\n2. Create MyHandlerExceptionResolver class under exceptions directory. Your code should look like the one below: \n\n```\npublic class MyHandlerExceptionResolver implements HandlerExceptionResolver{\n   @Override\n   public ModelAndView resolveException(HttpServletRequest httpServletRequest,\n                                        HttpServletResponse httpServletResponse, @Nullable Object o, Exception e) {\n       ModelAndView mv = new ModelAndView();\n       if (e instanceof ArithmeticException) {\n           mv.setViewName(\"mathError\");\n       }\n       if (e instanceof NullPointerException) {\n           mv.setViewName(\"nullPointerError\");\n       }\n       mv.addObject(\"exception\", e.toString());\n       return mv;\n   }\n}\n```\n3. If you refresh the browser page, you'll find that the exception is handled\n\nIn the code above, we created a class to handle exceptions. This class implements the interface ```HandlerExceptionResolver``` which allows us to handle exceptions. In order for the class to implement this interface, it needs to implement its method ```resolveException```.  In the code inside this method, we created a ModelAndView object. Then, we checked the exception type (note that the exception was received as an argument of ```resolveException``` method (its name is \"e\")) and we added the corresponding view to the ModelAndView object accordingly. Eventually, we return the ModelAndView object. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906599,
          "key": "8bd93353-cd6e-4485-ab90-318c4ac70301",
          "title": "Spring Boot Exception Handling - Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8bd93353-cd6e-4485-ab90-318c4ac70301",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906600,
              "key": "889b2682-d915-45d9-9ac1-8f70b3a3c78f",
              "title": "035ND C01 L04 A08 EXCEPTION SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8pmuu4IPGvk",
                "china_cdn_id": "8pmuu4IPGvk.mp4"
              }
            },
            {
              "id": 906601,
              "key": "567fba69-ddf0-4ae8-a63f-90f73ada204e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s recap these Spring Boot exception handling ways and how to implement them. \n\n1. Creating a custom error page -> create an error.html page, when errors happen, users will be redirected to this page\n\n2. Using @ExceptionHandler -> handle exceptions inside each controller by providing exception handler methods to handle different exceptions\n\n3. Using @ControllerAdvice + @ExceptionHandler -> create a separate class and write all exceptions handler methods that you want them to handle different exceptions across the entire application\n\n4. Configuring a SimpleMappingExceptionResolver class -> rather than adding one handler method per exception, create a key-value mapping that maps each exception to a view and let system look for the error\n\n5. Using a custom HandlerExceptionResolver class -> use reflection to find what type of exception it’s then add the proper view to a ModelAndView object\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 955478,
          "key": "5209a2b3-5ea4-4418-a6e8-72f11e81f73c",
          "title": "WebSocket and STOMP",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5209a2b3-5ea4-4418-a6e8-72f11e81f73c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 955479,
              "key": "aca7234d-35dd-44a7-93bf-48d67d08b2b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What is WebSocket?",
              "instructor_notes": ""
            },
            {
              "id": 955481,
              "key": "b45b9854-1116-46ac-92cb-712192e7d8f2",
              "title": "035ND C01 L04 A09 WEBSOCKET",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "__dADUO5jrY",
                "china_cdn_id": "__dADUO5jrY.mp4"
              }
            },
            {
              "id": 955480,
              "key": "be58b3da-27fb-42ee-ace2-4fbbff8ae87f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "WebSocket is a communication protocol that allows server and client to communicate with each other. When the WebSocket connection is established between a client and a server, they both can communicate with each other (the communication is bidirectional, so the client can send data to the server and vice versa) as long as the connection is opened. The connection will only end when either the server or the client ends it. This makes WebSocket more preferred than HTTP (which is also a communication protocol), because when using HTTP, the connection will be closed once the server responds to the client, and the connection can be opened again by a request from the client only after waiting for some time interval. If the client and the server want to exchange data frequently, using HTTP will cause latency because we'll need many connections as each connection will end once the server replies to the client request. In that case, using WebSocket protocol is more preferred. \n",
              "instructor_notes": ""
            },
            {
              "id": 955482,
              "key": "82ef6f23-2358-4f91-aab5-4b9344997ed6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket and STOMP",
              "instructor_notes": ""
            },
            {
              "id": 955483,
              "key": "9fa9cc91-9669-423d-b1e1-35cfb4945794",
              "title": "035ND C01 L04 A10 STOMP INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mHzKP8cklBw",
                "china_cdn_id": "mHzKP8cklBw.mp4"
              }
            },
            {
              "id": 955484,
              "key": "1db6db56-374d-416c-bd94-68f1a0fdc1f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Websocket is a low-level communication protocol, it only defines how bytes are transformed into a frame that contains a message (the message can be a binary or a text message). WebScoket protocol knows nothing about how to route a frame from the source to the destination, that's why a WebSocket message does not contain any instructions about the frame routing process. Therefore, we need an additional support to achieve two-way communication and route the frames properly, for that we can use STOPM, which is supported by Sprint Boot. STOMP is a simple text-based message protocol. With it, clients can send and receive messages to and from each other. ",
              "instructor_notes": ""
            },
            {
              "id": 955485,
              "key": "5fa5da8a-142e-4692-9dd6-623fa6b755cb",
              "title": "035ND C01 L04 A11 STOMP COMMANDS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "O55DixiEg_0",
                "china_cdn_id": "O55DixiEg_0.mp4"
              }
            },
            {
              "id": 955486,
              "key": "7851d98b-0e77-4c66-903b-d97498520ea2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A broker is a program that allows a sender and a receiver to communicate without worrying about having the same protocol, where it translates a message from the sender protocol to the receiver protocol and by that there is no need for the sender and the receiver to have the same protocol. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899914,
          "key": "d4aa3388-23a6-4564-b2fd-742285460516",
          "title": "WebSocket - Example Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4aa3388-23a6-4564-b2fd-742285460516",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899929,
              "key": "87848169-a639-478c-bb3d-57b055c458eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Example Project \n\nIn this lesson, we'll build an example project that implements WebSocket. Follow the instructions in each section to create the related project components",
              "instructor_notes": ""
            },
            {
              "id": 955244,
              "key": "36808899-ef94-4acb-bbcf-9d0a9efb16e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Project Setup\n\nTo create and setup your project, follow the instructions below: \n\n1. Go to https://start.spring.io/ and name the artifact \"spring-boot-websocket\" \n\n2. Add the following dependencies to your project: Spring Web, WebSocket, Thymeleaf, and Spring Boot DevTool\n\n3. Download the project, unzip it, and import it to IntelliJ\n",
              "instructor_notes": ""
            },
            {
              "id": 899930,
              "key": "6e17b2a8-0761-469e-b125-496f9acec211",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Model Implementation",
              "instructor_notes": ""
            },
            {
              "id": 900609,
              "key": "241a5bbf-ed06-47d7-9ae4-91458f7054d1",
              "title": "035ND C01 L04 A12 WEBSOCKET",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tNHP_Z4OOV4",
                "china_cdn_id": "tNHP_Z4OOV4.mp4"
              }
            },
            {
              "id": 900610,
              "key": "2989824e-b964-40cc-8f87-9676494953f9",
              "title": "035ND C01 L04 A13 WEBSOCKET MESSAGE DEMO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gAXppfO_ljs",
                "china_cdn_id": "gAXppfO_ljs.mp4"
              }
            },
            {
              "id": 955245,
              "key": "b9c8304f-4d75-411c-9b91-4725dce56edd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A message is the payload a client wants to send to a server. So, we need to represent it by a class at the server side, in this example, we defined a class to represent our message and we called it \"User\" which contains one attribute which is \"name\" and it represents the name of the sender. We also defined a message wrapper class to wrap our message with it (we called it \"UserResponse\" in this example), it contains one attribute which is \"content\". \n\nThe wrapper class is not a mandatory step when building WebSocket applications, in some cases it's enough to have a class that represents the payload only (in this example, we called it \"User\", of course when you build your application you can use different names). We only used the wrapper class because we needed the message in this example to say \"Hello *name*\", where \"name\" is coming from the User object. By that, we'll receive an object of User at the server side, then at the controller, we'll wrap it with a UserResponse object, where we assign the value of \"Hello *name*\" to the \"content\" attribute to build the full message text, this will allow the controller to use the UserResponse object when it wants to send the message to different end points instead of using the User object. Again, in this example we needed to use a wrapper class to wrap the User info with it and create our full message which says \"Hello *name*\". If you build an application that doesn't have such needs and it needs to send the received message as is, then you don't need to use a wrapper class. \n",
              "instructor_notes": ""
            },
            {
              "id": 899931,
              "key": "0f6579df-50f8-4a8b-9e2e-b56514917623",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Message Handling Controller Implementation",
              "instructor_notes": ""
            },
            {
              "id": 900604,
              "key": "c5d2d9b2-deb7-40b6-b2ef-0777810c4c75",
              "title": "035ND C01 L04 A14 WEBSOCKET CONTROLLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xxeMizdCgqE",
                "china_cdn_id": "xxeMizdCgqE.mp4"
              }
            },
            {
              "id": 900605,
              "key": "d91f876e-23bf-4ce1-bd6b-5acb6117c355",
              "title": "035ND C01 L04 A15 WEBSOCKET CONTROLLER DEMO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fG8Tpdj2gew",
                "china_cdn_id": "fG8Tpdj2gew.mp4"
              }
            },
            {
              "id": 955246,
              "key": "478d2b41-6c0c-44bd-acb7-687b47cb8e02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```@MessageMapping``` annotation is used to indicate that any client request URL that ends with \"/user\" should be handled by ```getUser``` method in the controller. \n\n```@SendTo``` annotation is used to define to which broker the return value of the method will be sent, in this case it'll be sent to the broker at the end point \"/topic/user\" which will broadcast it to all clients  that are subscribed to the end point \"topic/user\".",
              "instructor_notes": ""
            },
            {
              "id": 906314,
              "key": "1ac45800-ab9f-4481-9b1e-06f9a64cb620",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Configuration",
              "instructor_notes": ""
            },
            {
              "id": 955247,
              "key": "c49e6b96-14f2-4bef-b653-08c3ba3a4fe7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now we need to enable the WebSocket and STOMP messaging in Spring Boot. To do that, we need to create a configuration class. Follow the instructions below to create it: \n\n1. Create a \"config\" directory under your application directory\n2. Create a class and name it \"WebSocketConfig\" and make it implements ```WebSocketMessageBrokerConfigurer``` \n3. Add the annotations ```@EnableWebSocketMessageBroker``` and ```@Configuration``` to the class.\n4. Your code should look like the one below:  \n\n```\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry stompEndpointRegistry) {\n        stompEndpointRegistry.addEndpoint(\"/websocket-demo\").withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        registry.enableSimpleBroker(\"/topic\");\n        registry.setApplicationDestinationPrefixes(\"/app\");\n    }\n\n}\n```\n\nIn the code above ```@configuration``` annotation is used to indicate that this is a configuration class. ```@EnableWebSocketMessageBroker``` annotation enables handling messages through WebSocket combined with a message broker. In ```registerStompEndpoints``` method, we registered a WebSocket endpoint through which a client can communicate with our server. Using ```withSockJS``` means that if WebSocket is not supported by the client's browser, the browser will use SockJS which is a Javascript library for browsers that offers objects similar to WebSocket objects. \n\nIn ```configureMessageBroker``` method, we configured a message broker. The broker performs messages routing from one client to another. The first line in this method enables a message broker at the endpoint \"/topic\", i.e., any client message that has a destination URL that starts with (prefixed with) \"/topic\" should be routed to that broker at that endpoint. The second line, indicates that any client message that has a destination URL that starts with \"/app\" should be routed to a handler method in the controller class. In our example, you can see that in our controller class we have a handler method that has a message mapping value equal to \"/user\" where any client message that has a destination URL that ends with \"/user\" will be routed to it. So, for example, if a URL ends with \"/app/user\" it means two things, 1) since the destination starts with app, this message should be handled by some method in the controller class. 2) since the destination URL ends with \"/user\", it means ```getUser``` method in the controller class will handle it.  ",
              "instructor_notes": ""
            },
            {
              "id": 906311,
              "key": "f077c9a5-c41c-438c-b568-a8a02df33a5c",
              "title": "035ND C01 L04 A16 WEBSOCKET CONFIG",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "F-On61H0Irg",
                "china_cdn_id": "F-On61H0Irg.mp4"
              }
            },
            {
              "id": 906312,
              "key": "58fce638-ae0a-4e80-acc0-df27947cf0b6",
              "title": "035ND C01 L04 A17 WEBSOCKET CONFIG DEMO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "klKJkneUJn4",
                "china_cdn_id": "klKJkneUJn4.mp4"
              }
            },
            {
              "id": 955248,
              "key": "e0b06b71-c173-4c41-823b-1945d8af9c23",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## WebSocket - Scheduler Implementation",
              "instructor_notes": ""
            },
            {
              "id": 906313,
              "key": "b0f103dc-789b-4a74-9572-42884e4c0d90",
              "title": "035ND C01 L04 A18 WEBSOCKET SCHEDULER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "v-vxQiAmz0g",
                "china_cdn_id": "v-vxQiAmz0g.mp4"
              }
            },
            {
              "id": 955249,
              "key": "1a0deb1a-f504-44ed-a432-8b39e3d44af2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In ```sendAdhocMessage``` method, we use SimpleMessagingTemplate object to send a message to the destination \"/topic/user\", our message is \"Scheduler\" where we represent it using a UserResponse object. ",
              "instructor_notes": ""
            },
            {
              "id": 899933,
              "key": "7f52d107-99f9-48e5-989d-7424c5d66a96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# WebSocket - Creating View",
              "instructor_notes": ""
            },
            {
              "id": 900606,
              "key": "c65f9607-b180-4c60-a752-443a111556dd",
              "title": "035ND C01 L04 A19 WEBSOCKET VIEW",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7u9VPX6TDfQ",
                "china_cdn_id": "7u9VPX6TDfQ.mp4"
              }
            },
            {
              "id": 899934,
              "key": "58a87242-2ab9-49ac-9d2c-42737075c3e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To create the view of this example, you need the following: \n\n1. You need to create a simple UI with a message input, and a button. Users can enter a message and send it.\n\n2. You need to create two buttons to manage WebSocket connection. One is to connect, one is to disconnect.\n\n3. You need to add javascript to send messages and receive messages from the server-side. You basically need to import sockjs and stomp javascript libraries to communicate with the server using STOMP. There are few functions needed to be implemented.\n      - connect() -> to establish the connection to the endpoint. And making the stompClient subscribe to the prefix.\n      - disconnect() -> disconnect from endpoint\n      - sendMessage() -> send message with stompClient.send when clicked.\n",
              "instructor_notes": ""
            },
            {
              "id": 906309,
              "key": "906d7030-665d-4785-9311-ef576b9b3099",
              "title": "035ND C01 L04 A20 VIEW EXPLAIN",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "J7v34DJTfYE",
                "china_cdn_id": "J7v34DJTfYE.mp4"
              }
            },
            {
              "id": 906310,
              "key": "03770e9d-664d-489a-9202-3339ea65f54f",
              "title": "035ND C01 L04 A21 WEBSOCKET DEMO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "eC_s9jiGeZU",
                "china_cdn_id": "eC_s9jiGeZU.mp4"
              }
            },
            {
              "id": 899935,
              "key": "a3642bc4-90de-4f50-9b86-52e48fd10118",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# WebSocket - Summary",
              "instructor_notes": ""
            },
            {
              "id": 900607,
              "key": "d9499e17-0296-4327-950d-d1b4650c8ed1",
              "title": "035ND C01 L04 A22 WEBSOCKET IMPLEMENTATION SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LoJlpMwIAfo",
                "china_cdn_id": "LoJlpMwIAfo.mp4"
              }
            },
            {
              "id": 899936,
              "key": "8273c373-e20d-46d1-a32c-2dab27e6d2a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Some of you might find this implementation extremely difficulty and some of you may get stuck because you are not familiar with Javascript or did not get the whole idea of WebSocket. Don’t worry about it. Please feel free to checkout the complete solution and compare each class or file with the implementation step. \n\nLuckily, all WebSocket implementations look familiar, so once you figured out how to implement one application, you should have no problem implementing one yourself in future. \n\n**Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/demos/spring-boot-websocket**\n\n**Note: In the solution repository above, the message and message wrapper classes are named Message and Greeting, respectively, instead of User and UserResponse in the example we explained. The concept is the same, only the classes names are different.**",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899913,
          "key": "cb0efad3-74a4-46c8-b32c-f07096bc304f",
          "title": "Package Spring Boot Application",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb0efad3-74a4-46c8-b32c-f07096bc304f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 955253,
              "key": "4752b267-c2b7-4345-8840-9d2eef971cb8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Packaging and its types",
              "instructor_notes": ""
            },
            {
              "id": 900611,
              "key": "77dd0c7e-c619-4967-ac55-4458beaddea9",
              "title": "035ND C01 L04 A23 PACKAGE SPRINGBOOT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pZjQGAgKfdY",
                "china_cdn_id": "pZjQGAgKfdY.mp4"
              }
            },
            {
              "id": 906315,
              "key": "7dd8324c-047f-4d4b-a884-c8912a976ccc",
              "title": "035ND C01 L04 A24 WHY PACKAGE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "a2E7T5UEBVY",
                "china_cdn_id": "a2E7T5UEBVY.mp4"
              }
            },
            {
              "id": 900613,
              "key": "a9e0f108-5726-4553-b167-a10bb2a27c52",
              "title": "035ND C01 L04 A26 SPRINGBOOT PACKAGE TYPES",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6X-RQ8ryXoc",
                "china_cdn_id": "6X-RQ8ryXoc.mp4"
              }
            },
            {
              "id": 899939,
              "key": "8660911a-a77a-40c5-b2a4-a3dc4fc93dab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "By default, spring boot application will be packed into jar file. If want to pack as war file. You need to add the following attributes in pom.xml.\n\n```\n<packaging>war</packaging>\n<name>packing</name>\n```",
              "instructor_notes": ""
            },
            {
              "id": 899937,
              "key": "525a5a71-78ac-454f-9079-32fe9e3a6a31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# IntelliJ Maven Plugin",
              "instructor_notes": ""
            },
            {
              "id": 900612,
              "key": "0865a276-28cb-4110-aa67-e3bf985fe0f9",
              "title": "035ND C01 L04 A25 INTELLIJ MAVEN PLUGIN",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fd1XCpV9EoI",
                "china_cdn_id": "fd1XCpV9EoI.mp4"
              }
            },
            {
              "id": 955252,
              "key": "8221e6ee-0c2e-4604-bd82-e2879c37cc17",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We have installed Maven in a previous lesson. There are different Maven commands, for packaging we'll be using ```Clean``` and ```Package``` as you'll see in the coming videos. ",
              "instructor_notes": ""
            },
            {
              "id": 899940,
              "key": "dfa3d3a7-34fa-4711-8ee6-f13e92d0781b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Spring Boot Packing - Example",
              "instructor_notes": ""
            },
            {
              "id": 900614,
              "key": "6ec85b84-3e8e-4651-bb74-90cb7b82924d",
              "title": "035ND C01 L04 A27 SPRINGBOOT PACKAGING",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b2BXo3ueifs",
                "china_cdn_id": "b2BXo3ueifs.mp4"
              }
            },
            {
              "id": 899897,
              "key": "4e670bd3-641a-46bd-9c9a-8db84533e0df",
              "title": "Spring Boot packing Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e670bd3-641a-46bd-9c9a-8db84533e0df",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following is true about a SNAPSHOT build?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "SNAPSHOT is a special version that indicates a current development copy.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Unlike regular versions, Maven checks for a new SNAPSHOT version in a remote repository for every build.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "All of the above.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "None of the above.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899903,
              "key": "e62eedd0-6184-43e6-9727-2c3b0e6cf41f",
              "title": "Spring Boot maven package quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e62eedd0-6184-43e6-9727-2c3b0e6cf41f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following plugin runs the JUnit unit tests and creates test reports?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "surefile",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "jar",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "war",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "antrun",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899941,
              "key": "6c22b2a8-d141-4f24-a246-56fe3911ab77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Running an artifact",
              "instructor_notes": ""
            },
            {
              "id": 900615,
              "key": "3ed9016c-8460-48fd-8f4a-447cdd380645",
              "title": "035ND C01 L04 A28 RUN ARTIFACTS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kO3Ia8wkWJA",
                "china_cdn_id": "kO3Ia8wkWJA.mp4"
              }
            },
            {
              "id": 899894,
              "key": "cc957e19-34d7-4c99-b6b4-3120d43d21ef",
              "title": "Try packing yourself",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Please try to package the websocket application yourself, and see if you can run it.",
              "instructor_notes": ""
            },
            {
              "id": 899942,
              "key": "9e5a5fe9-791c-42f9-aa1a-a188fd01eda2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Running an artifact with flags",
              "instructor_notes": ""
            },
            {
              "id": 900616,
              "key": "34ea68d1-ad10-445d-b2e2-73e745025366",
              "title": "035ND C01 L04 A29 ARTIFACT WITH FLAGS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "omEH8O7nZtM",
                "china_cdn_id": "omEH8O7nZtM.mp4"
              }
            },
            {
              "id": 899908,
              "key": "eb3f0acd-1224-405a-976b-bf7d5d6618a9",
              "title": "Maven Command Quiz 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eb3f0acd-1224-405a-976b-bf7d5d6618a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following commands can be used to look at the default configuration of the super POM?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "mvn help:effective-pom",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "mvn help",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "mvn help:super-pom",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "None of the above.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899907,
              "key": "2b338b27-0c42-43b8-b8a6-7468f3782be2",
              "title": "Maven lifeCycle Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2b338b27-0c42-43b8-b8a6-7468f3782be2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following phase in maven life cycle processes the generated files from the test code file compilation?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "generate-test-sources",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "process-test-sources",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "process-test-classes",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "None of the above.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 906317,
              "key": "e558dc07-2a22-45c8-8e8d-64012716afbb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Summary",
              "instructor_notes": ""
            },
            {
              "id": 900617,
              "key": "78ff8246-36fc-4630-929d-4225c51cd49b",
              "title": "035ND C01 L04 A30 LESSON SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jRfMphSig8s",
                "china_cdn_id": "jRfMphSig8s.mp4"
              }
            }
          ]
        },
        {
          "id": 955250,
          "key": "d564ea4e-d103-452f-9a1e-40c61dc495d1",
          "title": "Course Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d564ea4e-d103-452f-9a1e-40c61dc495d1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 955251,
              "key": "00d1484a-d2de-4da2-a9fb-fe09433d9a46",
              "title": "035ND C01 L04 A31 COURSE SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ex-fQ2GxmSU",
                "china_cdn_id": "Ex-fQ2GxmSU.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}