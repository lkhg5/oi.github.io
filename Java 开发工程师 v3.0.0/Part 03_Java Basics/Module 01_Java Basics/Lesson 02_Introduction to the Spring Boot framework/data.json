{
  "data": {
    "lesson": {
      "id": 899268,
      "key": "d1dd44e3-831f-4a2a-a563-5542c82bc714",
      "title": "Introduction to the Spring Boot framework",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Introduction to the Spring Boot framework",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d1dd44e3-831f-4a2a-a563-5542c82bc714/899268/1581176885195/Introduction+to+the+Spring+Boot+framework+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d1dd44e3-831f-4a2a-a563-5542c82bc714/899268/1581176879540/Introduction+to+the+Spring+Boot+framework+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 899264,
          "key": "bdaa3a1c-18b9-4078-87b9-f25170ae4c6d",
          "title": "Intro to Microservice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bdaa3a1c-18b9-4078-87b9-f25170ae4c6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900519,
              "key": "91741554-1709-4606-abb5-ab2954554e4b",
              "title": "035ND C01 L02 A01 SPRINGBOOT FRAMEWORK",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5upExBYSUWw",
                "china_cdn_id": "5upExBYSUWw.mp4"
              }
            },
            {
              "id": 947825,
              "key": "bdf79d17-9da3-4384-978b-69d9523b7996",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As mentioned in the video, microservices represent a software development architecture which aims to break a system into small components, where each component is responsible for a certain part of that system. This makes the system easier to manage and it makes changing it much easier, i.e., we only need to change the related components instead of needing to make changes to different parts of the code. If Monolithic architecture is used instead, making changes will be hard because the entire system will be built as a single unit, which will require changing many parts of the code. That's why, it's better to use microservices architecture.  \n\nIf you want to read more about the difference between Microservices and Monolithic architectures, you can check this article: https://articles.microservices.com/monolithic-vs-microservices-architecture-5c4848858f59\n\n**Important:** We started by introducing microservices because Spring Boot is a framework that helps you implement microservices architecture easily. That's why, it's important to understand the concept of microservices before starting with Spring Boot. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899266,
          "key": "40e8aa0f-d149-4a41-95e8-25b78a777fa2",
          "title": "Microservice And MVC framework",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "40e8aa0f-d149-4a41-95e8-25b78a777fa2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899269,
              "key": "2c6cc353-ed0b-4daf-9234-39b2cc880761",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Microservice And MVC framework\n",
              "instructor_notes": ""
            },
            {
              "id": 900520,
              "key": "c1017574-cc9b-46a3-956e-9f80fb4a9caa",
              "title": "035ND C01 L02 A02.1 MVC FRAMEWORK INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qRWMn9lD2_4",
                "china_cdn_id": "qRWMn9lD2_4.mp4"
              }
            },
            {
              "id": 899220,
              "key": "037735ae-cf22-48e4-8d6a-dd9edf5bb461",
              "title": "Microservice Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To sum up, microservice is the most popular architectures in today’s world. And almost all major companies are replacing their Monolith architectures with microservice architectures. If you are interested to find out more about Microservice and its architecture, please visit the following links.\n\nhttps://microservices.io/\n\nhttps://opensource.com/resources/what-are-microservices",
              "instructor_notes": ""
            },
            {
              "id": 899270,
              "key": "7a03beae-2342-4654-b358-e15ad06ad533",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# MVC Framework",
              "instructor_notes": ""
            },
            {
              "id": 906402,
              "key": "34c9ecfb-86ec-4d7c-abec-7184c88808a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Before we jump into Spring Boot introduction, let’s talk about MVC framework. \n\nMVC stands for Model-View-Controller, which is an architectural pattern that separates an application into three main logical components: the model, the view and the controller. Each of these components are built to handle specific development aspects of an application. MVC is one of the most frequently used industry-standard web development frameworks to create scalable and extensible projects. In the next video, I am going to talk about each component separately.\n\n**Important:** We're discussing MVC because it's a design pattern that implements microservices architecture (there are other design patterns that implement microservices architecture, but we're discussing MVC here). So, when we talk about building a system that uses microservices architecture, we can use MVC framework as our design pattern.",
              "instructor_notes": ""
            },
            {
              "id": 899272,
              "key": "df4f3635-8150-4d60-ae9c-5b9df07434f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# MVC Components - Model",
              "instructor_notes": ""
            },
            {
              "id": 906401,
              "key": "212aeb5d-f825-49eb-90df-57e90b969394",
              "title": "035ND C01 L02.1 MVC FRAMEWORK - MODEL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2HTrTCKzRQQ",
                "china_cdn_id": "2HTrTCKzRQQ.mp4"
              }
            },
            {
              "id": 899236,
              "key": "576168f3-e79a-4044-bb81-60b0075eb831",
              "title": "MVC Components - Model Quiz",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "576168f3-e79a-4044-bb81-60b0075eb831",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "MVC",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "If we are building a course management system to allow teachers to register class, and allow students to sign-up for the class, take it and get the grade for the class they attend. Please take a few minutes to think about how many models we can create for this system."
              },
              "answer": {
                "text": "Thanks for your response. Designing the model is the very first step in MVC design. A good model design will simplify the rest of your works.\n\nThis is my answer:\n\nStudent, Class, Teacher, StudentClass, TeacherClass",
                "video": null
              }
            },
            {
              "id": 899273,
              "key": "9cc9153a-7984-43a5-9c75-52b7fd3747b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# MVC Model - The Controller ",
              "instructor_notes": ""
            },
            {
              "id": 899231,
              "key": "6ae82f7a-5343-4e30-bc4b-4d157995207c",
              "title": "035ND C01 L02 A02.2 MVC FRAMEWORK - CONTROLLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YPGpqd-sVd4",
                "china_cdn_id": "YPGpqd-sVd4.mp4"
              }
            },
            {
              "id": 899259,
              "key": "21a19a5f-ef5c-4c52-aa4b-db7259d7b591",
              "title": "MVC Model - The Controller Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "21a19a5f-ef5c-4c52-aa4b-db7259d7b591",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following is TRUE?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "The controller redirects incoming request to model.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "The controller executes an incoming request.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "The controller controls the data.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "The controller render html to view.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899271,
              "key": "61e84a69-27f9-4de3-8100-2930d97b0197",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# MVC Component - The View",
              "instructor_notes": ""
            },
            {
              "id": 899235,
              "key": "bcb251c6-fc64-4bb6-9b10-3a85e0117dab",
              "title": "035ND C01 L02 A02.3 MVC FRAMEWORK - VIEW",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ap-94SXjk3A",
                "china_cdn_id": "ap-94SXjk3A.mp4"
              }
            },
            {
              "id": 955661,
              "key": "31e21fb4-2293-4dbf-beed-eddfe9154e33",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## How MVC Components Work Together ",
              "instructor_notes": ""
            },
            {
              "id": 955662,
              "key": "95343dda-3181-4b06-bac5-22f7578dbe4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In MVC architecture, the tasks that a website performs like displaying web pages, fetching data from a database, responding to user actions, etc. are performed by three components (model, view, and controller) where each component is responsible for certain tasks. \n\nThe model is responsible for performing any logic related to accessing and manipulating data in the database. \n\nThe view is the html page that the user sees, and it also displays any related data on the server side to the user (for this we use template engines in Spring Boot, which you’ll learn later in this course).\n\nThe controller is what a user interacts with. For example, when the user submits some data through a form, clicks on a button, or visits a URL, an action will be triggered in the controller and the controller will do the necessary logic to respond to the user properly.\n\nThe three components communicate with each other to ensure that a website behaves properly. So, for example when a user clicks a button and an action (a method) gets triggered in the controller class, if the controller class needs any data from the database it’ll request it from the model class. The model class will fetch that data and return it to the controller, then the controller will store the related returned data as some attributes to be displayed on some html page (view), then it’ll communicate with that particular view in order to have it appear to the user on the browser. Finally, the view will appear to the user and it’ll show any data that was added as attributes by the controller class. The controller will contact the model class only if it needs some data, if it doesn’t, it’ll do the necessary logic and display the proper view. Below is a scenario that shows how an example online shopping website built with MVC will behave if a user clicks on a specific product to see its details.  \n\nSome developers build the flow across the three components in a way different from the one in the scenario below. For example, they allow the model to directly modify the view. This is because MVC is a design pattern, and developers have the flexibility to customize it as they want. In the below scenario, we provided the flow you can see because it provides a very good separation of tasks for the three components, where the resulting code will be cleaner and easier to understand.    ",
              "instructor_notes": ""
            },
            {
              "id": 955664,
              "key": "65ae5f5d-f2b7-4e60-9d44-631d7bd654d0",
              "title": "MVC Scenario 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HxiekDI6Vj4",
                "china_cdn_id": "HxiekDI6Vj4.mp4"
              }
            }
          ]
        },
        {
          "id": 899267,
          "key": "689af9f1-5c91-4d7e-ac76-8fc907eb377f",
          "title": "Spring Boot Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "689af9f1-5c91-4d7e-ac76-8fc907eb377f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899274,
              "key": "c701653b-da53-4156-9d0b-c618def692b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is Spring Boot",
              "instructor_notes": ""
            },
            {
              "id": 899238,
              "key": "02b17ecf-5705-4aa5-a094-8a656f8e49cd",
              "title": "What is Spring Boot Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this class we are going to learn about the Spring Boot framework.",
              "instructor_notes": ""
            },
            {
              "id": 900521,
              "key": "b92db1ad-905b-4dc3-aaf1-32ddddae34fe",
              "title": "035ND C01 L02 A03 SPRINGBOOT INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "diNVJ2OXock",
                "china_cdn_id": "diNVJ2OXock.mp4"
              }
            },
            {
              "id": 950542,
              "key": "f0243f63-e112-4682-856a-2d1776aa6c14",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One important difference between Spring and Spring Boot frameworks is that developing projects with Spring Boot is simpler since it provides you with features that allow you to write less code. For example, in many web applications, we need some dependencies to deal with different components like database, JSON, etc. In Spring Boot, you don't have to add such dependencies by yourself and take care of adding compatible versions of them (to avoid any conflict between their versions). Instead, you can use **Spring Boot Starters**. \n\nA starter is a set of dependencies that you can add to your Spring Boot application. By using starters, you don't need to write the dependencies names yourself. Instead, you just write the starter name that will add those dependencies and the starter will take care of the rest. For example, if you want to include JDBC (Java Database Connectivity) dependencies in your application, you just need to include the starter that adds them (its names is ```spring-boot-starter-jdbc```). So, in ```pom.xml``` file, under ```dependencies```, you'll add ```spring-boot-starter-jdbc``` which will take care of adding all JDBC dependencies to your application. ",
              "instructor_notes": ""
            },
            {
              "id": 899222,
              "key": "8ea48f99-a059-4d0f-bb91-4a2737f3594e",
              "title": "What is spring boot?",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ea48f99-a059-4d0f-bb91-4a2737f3594e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Frameworks",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Please enter any microservice frameworks you have heard before. Does not necessarily need to be java-based."
              },
              "answer": {
                "text": "Thanks for your response.\n\nThese are the ones I came up with:\n\nASP.NET MVC, Django, Ruby on Rails, Laravel, AngularJS ",
                "video": null
              }
            },
            {
              "id": 899219,
              "key": "cff86c3a-0c93-42e4-a4c5-5d63be8e4836",
              "title": "Spring Boot vs Spring Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cff86c3a-0c93-42e4-a4c5-5d63be8e4836",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which is a correct statement for Spring Framework?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Spring framework is light-weight solution.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Spring framework is heavy-weight solution.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899239,
              "key": "e3dcb277-c528-48ee-b0de-71c26e838f08",
              "title": "Spring boot vs spring Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nSo far, we have learned the differences between Spring MVC and Spring Boot. Both Spring and Spring Boot are java-based MVC frameworks, and both are popular MicroService choices. In the next video, I am going to show you how to setup the Spring Boot development environment. With it, you can find out what the spring boot structure is, and how individual components in Spring Boot work with other components.",
              "instructor_notes": ""
            },
            {
              "id": 899277,
              "key": "9e4ae710-5cd5-4048-a1da-8201c62c4209",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Maven is a package management tool. You can use Maven to install packages not in Java whereas IntelliJ plugins provide core functionality of JetBrain product.\n\nIf you are not familiar with Maven, please visit https://maven.apache.org/ for more Maven installation instructions and documents. If you are searching for a particular Maven package, please visit https://mvnrepository.com/.\n\nIf you are not familiar with IntelliJ plugin, please visit https://plugins.jetbrains.com/.\n\n1. Make sure you have Maven installed.\n\n2. Make sure you have installed Maven integration IntelliJ plugin.\n\n3. By default, we will use IntelliJ community version for this course. If you have the ultimate version, you can install Spring Boot plugin. But for this course, we will use https://start.spring.io/ to create our initial spring boot project.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 899278,
              "key": "66e8865f-5671-4bcc-91ab-2a9abb5e4ef7",
              "title": "Spring boot setup",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66e8865f-5671-4bcc-91ab-2a9abb5e4ef7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the setup."
              ],
              "positive_feedback": "Great!",
              "video_feedback": null,
              "description": "Follow the instructions above and make sure Spring boot is set up."
            },
            {
              "id": 906293,
              "key": "38918750-b726-418a-8e7e-7d375ff92385",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Create a spring boot app",
              "instructor_notes": ""
            },
            {
              "id": 950543,
              "key": "e2cc8394-5215-4944-9087-5f39b91a61dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To verify you have completed your environment setup. Let’s create a simple Spring Boot project.\n\n1. Go to **https://start.spring.io/** where you can see the spring Initializer page to create spring Boot application.\n2. The only thing you want to change in this form is the artifact name, you can call this “spring-boot-helloworld” in Artifact text field.\n3. Click Generate and you will get a zip file named **spring-boot-helloworld** downloaded to your computer.\n4. Unzip the zipped file anywhere on your computer. When you unzip it, a folder with the same name (**spring-boot-helloworld**) will be generated.   \n5. Open your IntelliJ IDE and select “Import Project” option in the welcome screen. If you don't see the welcome screen and you see the code of some project instead, you can go back to the welcome screen by clicking on \"File\" -> \"Close Project\". \n6. Change the folder path to your spring-boot-helloworld folder (the one you got after the unzipping process) , and click OK.\n7. Select “Import Project from external model”, and select Maven. If you don’t see Maven, make sure you install IntelliJ Maven plugin, link: https://www.jetbrains.com/help/idea/maven-support.html.\n8. Click next.\n9. Check “Import Maven projects automatically”. No other things need to be changed here. Click next.\n10. Nothing needs to be changed here. Click next.\n11. Make sure you select java 1.8. If JDK option does not show up, you want to click the + icon and find your JDK path. If all set, click Next.\n12. Nothing needs to be changed here. Click Finish.\n13. IDE will take a few seconds to load all Maven packages. After that, you will see the project structure.\n",
              "instructor_notes": ""
            },
            {
              "id": 899347,
              "key": "38506d78-85cb-4f5f-a8be-18978fb9a066",
              "title": "Spring boot setup",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "38506d78-85cb-4f5f-a8be-18978fb9a066",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the spring boot setup"
              ],
              "positive_feedback": "Great, now you have setup your spring boot hello world  application.",
              "video_feedback": null,
              "description": "Check if you completed the spring boot setup"
            },
            {
              "id": 906400,
              "key": "6ba98545-02a5-4f52-8e2e-be0efe6a8fbb",
              "title": "035ND C01 L02 A3.2 CREATE SPRINGBOOT APP",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "64UBmLalP6E",
                "china_cdn_id": "64UBmLalP6E.mp4"
              }
            },
            {
              "id": 899348,
              "key": "cc4f9f23-c89d-4b29-be9d-8cc8cd3dbdc7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Spring Boot Project Structure",
              "instructor_notes": ""
            },
            {
              "id": 900568,
              "key": "65c20d94-7fd3-4df7-8418-7f79d1db4fdb",
              "title": "035ND C01 L02 A04 SPRINGBOOT PROJECT STRUCTURE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MPEsX8PZHOc",
                "china_cdn_id": "MPEsX8PZHOc.mp4"
              }
            },
            {
              "id": 899349,
              "key": "97947b86-910e-4195-a5af-8331db114daf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s take a look at the project you just created, and get familiar with what each file contains. The entry point for a Spring boot application is a class file named xApplication, where x is the artifact name you provide when you initialize the project. In this example, that file name will be: ```SpringBootHelloworldApplication```, as you can see, the artifact name \"spring-boot-helloworld\" was used in the file name, but instead of using dashes, the name was generated in a camelCase format. \n\nOpen that file and take a look at the code, you'll notice that there is an annotation named ```@SpringBootApplication``` above the class name. First of all, an annotation in Spring Boot is written in Java above a component name (a class or a method) to configure it to do a specific role in a Spring Boot project and to manage dependencies between different components in a Spring Boot application. Keep this definition in mind, and as you see different code examples, it'll become more clear. \n\n```@SpringBootApplication``` annotation is used to mark the class as a class that declares one or more bean methods and starts component scanning and auto-configuration. \n\nWhen we add the ```@SpringBootApplication``` annotation, it automatically adds all of the following:\n\n- ```@Configuration```: A class annotated with this annotation is a class that contains at least one method that returns a bean. A bean is an object in your Spring Boot project that Sprint Boot manages during runtime. \n\n- ```@EnableAutoConfiguration```: Allows Spring Boot to auto-configure a project based on the dependencies in the classpath, and based on other various factors like beans and property settings. In Spring MVC, you need to add ```@EnableWebMvc```, but in Spring Boot it gets added automatically when Spring Boot sees spring-webmvc in the classpath. Adding that annotation (Spring Boot will addd it automatically as we mentioned) indicates that the application is a web application and triggers some key actions like creating and configuring a ```DispatcherServlet```. ```DispatcherServlet``` works as a front controller for Spring Boot applications. It's inherited from ```javax.servlet.http.HttpServlet```, and configured in the ```web.xml```. Spring Boot web application uses it to handle requests sent to the server.\n\n- ```@ComponentScan```: Allows Spring to find controller classes by searching for components, configurations, and services in the ```com.example.springboothelloworld``` package.\n\nIn the ```main()``` method, Spring Boot uses the method ```SpringApplication.run()``` to launch the application. Notice how all the code and configuration of this project is done in Java, this is the case when using Spring Boot, where you can write everything in Java and you don't need to deal with other languages to make certain configurations. \n\nYou can notice a file under resources folder called application.properties, which is a file used to change the application environment. We will talk about that in later videos. You can also use the command line or YAML to change the properties configuration to run the application.\n\nIf you open the pom file, you will see two dependencies have already been added. We will use lots of this file later. Luckily, with IntelliJ, when we add a dependency in our java class, it will automatically be added in this file.",
              "instructor_notes": ""
            },
            {
              "id": 899232,
              "key": "4e260289-1489-42f9-b60d-f1363b434d69",
              "title": "Spring Boot project structure Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e260289-1489-42f9-b60d-f1363b434d69",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following options can we use to control the spring boot application we created?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "application.properties",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Pass parameters with command line.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "YAML",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "All of above",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 906540,
              "key": "eae5f1ec-b9c9-493b-a913-dcf369485723",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 900570,
              "key": "7724a719-55a6-4f09-b784-b4e0e1ebab1b",
              "title": "035ND C01 L02 A05 SPRINGBOOT SUMMARY V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sJZXpDG_Hqw",
                "china_cdn_id": "sJZXpDG_Hqw.mp4"
              }
            }
          ]
        },
        {
          "id": 899265,
          "key": "11600ff7-138f-4ca9-b396-5f824d5e52e8",
          "title": "Spring Boot MVC Development Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "11600ff7-138f-4ca9-b396-5f824d5e52e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906292,
              "key": "b9521760-f897-416d-bc4c-36aa8dab691f",
              "title": "035ND C01 L02 A06 SPRINGBOOT DEVELOPMENT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Grnjq19EcvU",
                "china_cdn_id": "Grnjq19EcvU.mp4"
              }
            },
            {
              "id": 900564,
              "key": "6431fdd8-5328-4c3c-ba0d-b0477691ec97",
              "title": "035ND C01 L02 A07 CREATE CONTROLLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bj7CCah2eqY",
                "china_cdn_id": "bj7CCah2eqY.mp4"
              }
            },
            {
              "id": 899353,
              "key": "9b71b45e-1b06-45dc-aed3-22d2cbc1d53f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you don’t know what JSON is, please take a look at here: https://www.w3schools.com/whatis/whatis_json.asp\n",
              "instructor_notes": ""
            },
            {
              "id": 906541,
              "key": "06d4a992-4ebd-4104-a897-c1ac587a986d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Instructions",
              "instructor_notes": ""
            },
            {
              "id": 951350,
              "key": "4c2b7369-096b-4f91-ae42-1d6b4d432cb0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. Create a package under ```com.example.springboothelloworld``` and name it \"controller\", you can do that by right-clicking the ```com.example.springboothelloworld``` package then selecting New -> Package. \n2. Create a Java class under the controller package and name it \"HelloController\", you can do that by right-clicking the ```controller``` package then selecting New -> Java Class. \n3. Make the content of HelloController class like the code below: \n```\n@Controller\npublic class HelloController {\n   private Map<String, Object> result = new HashMap<>();\n\n   @RequestMapping(\"/hello\")\n   @ResponseBody\n   public Map<String, Object> hello() {\n       result.put(\"name\", \"Stephen\");\n       result.put(\"city\", \"San Jose\");\n       return result;\n   }\n}\n```\n\n4. If you see any red bulb, click on it and select import class, that will solve the import problem. Notice that IntelliJ will automatically add the dependency to your pom.xml file. For this example, the spring-boot-web will be added to your dependency list as below:\n```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\nIf for any reason your compiler states that ```@RequestMapping``` and ```@ResponseBody``` annotations are not resolved and if you check ```pom.xml``` and you don't find the dependencies above, then you need to add the dependencies by yourself. Copy the dependencies above and add them anywhere inside ```dependencies``` tag in ```pom.xml```. Then, go back to the code, click on each annotation, then press alt and Enter keys together (option and Enter on Mac) and select import class. \n\n6. Now you can run the command below in your IntelliJ terminal:\n```\nmvn spring-boot:run \n```\nOnce you see something like “Completed initialization in xxx ms”. Open a browser, and go to\nhttp://localhost:8080/hello, you should see something like: \n{\"city\":\"San Jose\",\"name\":\"Stephen\"}",
              "instructor_notes": ""
            },
            {
              "id": 900565,
              "key": "c417ca22-df26-4693-bac3-08774c39b868",
              "title": "035ND C01 L02 A08 CREATE SIMPLE SPRINGBOOT CONTROLLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Wb_UAvy3NYQ",
                "china_cdn_id": "Wb_UAvy3NYQ.mp4"
              }
            },
            {
              "id": 899354,
              "key": "eea5c2a8-e26d-4c33-9f97-bf0136d93fb6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using RestController",
              "instructor_notes": ""
            },
            {
              "id": 900563,
              "key": "a81b0f75-147b-428e-805c-c422064d4d59",
              "title": "035ND C01 L02 A09 REST CONTROLLER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8nvncBhj9xI",
                "china_cdn_id": "8nvncBhj9xI.mp4"
              }
            },
            {
              "id": 899355,
              "key": "0016bf69-0ccf-4b07-87f1-b4c2312dc64a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "@RestController is a specialized version of controller, which automatically uses both @Controller and @ResponseBody. In this example, we are going to use it to update our existing Controller class we created previously. \n\nSteps:\n\n1. Replace the @Controller with @RestController.\n\n2. Remove @ResponseBody annotation.\n\nIf you have auto imports, the imports will be changed when you change the annotation.\n\n**You can take a look at the solved version of this entire example here**: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/demos/spring-boot-hello-world\n",
              "instructor_notes": ""
            },
            {
              "id": 899245,
              "key": "19d8dfac-3567-40ad-a0cd-a45d03603403",
              "title": "Spring Boot RestController Quiz",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "19d8dfac-3567-40ad-a0cd-a45d03603403",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "HTTP Request methods",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Since we are dealing with a web application, name any common http request methods you know or you have heard of. Separated by comma."
              },
              "answer": {
                "text": "Thanks for your response.\rThis is mine: PUT, GET, POST, DELETE, PATCH",
                "video": null
              }
            },
            {
              "id": 951450,
              "key": "1874647c-7ce8-40f4-abde-5d2b20ed4792",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We have created a simple Spring Boot application with a controller. In the next few videos, we are going to dig a little deeper and we are going to use Servlet, Filter and Listener class. All these classes are used by java backend server to receive requests, manipulate them and respond with responses.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 951420,
          "key": "88ff432d-35d2-474f-9511-aaad3509f9ee",
          "title": "Using Servlet",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "88ff432d-35d2-474f-9511-aaad3509f9ee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 951421,
              "key": "33061014-7677-456e-a087-c634dee473b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Hello Servlet\n\nServlet is a technology/API/class that is used to handle requests in web applications and it resides on server side. Spring Boot uses Servlet to receive requests from client side. \n\nThere are two ways in Spring Boot to use Servlet Api:\n\n1. Use @ServletComponentScan annotation.\n1. Use @Bean annotation.\n",
              "instructor_notes": ""
            },
            {
              "id": 951422,
              "key": "3fe5c8ad-534e-4df4-97f7-c7a59eebdb2a",
              "title": "035ND C01 L02 A10 HELLO SERVLET",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hUgS4sTepmk",
                "china_cdn_id": "hUgS4sTepmk.mp4"
              }
            },
            {
              "id": 951423,
              "key": "ad27791e-9147-45b6-85bc-3615a6fb6444",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hello Servlet Example Prep\n\n\n\n1. Create a package under ```com.example.springboothelloworld``` and name it \"servlet\". \n\n2. Create a \"HelloServlet\" Java class under servlet package.\n\n3. Add java code to the class. Your class should like the below code:\n\n```\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(name=\"helloServlet\", urlPatterns =\"/helloServlet\")\npublic class HelloServlet extends HttpServlet{\n   @Override\n   protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n       System.out.println(\"Running Hello Servlet doGet method\");\n   }\n}\n```\n\n4. Add @ServletComponentScan annotation under @SpringBootApplication in your ```SpringBootHelloworldApplication``` Java class. Again, please make sure to use red bulb for missing imports.\n\n5. Stop (Control + C (Command+C on Mac)) and run the command below to start the application:\n```\nmvn spring-boot:run\n```\nWhen the application is ready, start a web browser and goto http://localhost:8080/helloServlet. You should see “Running Hello Servlet doGet method” printed in your console.\n",
              "instructor_notes": ""
            },
            {
              "id": 951424,
              "key": "ced706c4-0ed8-4182-b215-0a564e52e653",
              "title": "035ND C01 L02 A11 HELLO SERVLET EXAMPLE V2 (Post Launch) 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Qyp77hbTYbc",
                "china_cdn_id": "Qyp77hbTYbc.mp4"
              }
            },
            {
              "id": 951425,
              "key": "242cc6dd-0bbf-4e16-bd56-5e4ded14d766",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you want to know more about ServletComponentScan, please take a look at its API document: \nhttps://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/servlet/ServletComponentScan.html.\n",
              "instructor_notes": ""
            },
            {
              "id": 951426,
              "key": "f0c3f448-5914-46b0-a5be-80479204ca7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Filter\n\nFilter is a component that is used to preprocessing and postprocessing requests. It can be used to validate, encrypt/decrypt, and log requests. For instance, it can filter out a request if it contains some invalid content, or ignore requests that do not contain required request parameters.\n\nLet’s create a Filter under servlet by following the steps below: \n\n1. Create a ```HelloFilter``` class under servlet package\n2. Add the code below to the class:\n```\n@WebFilter(filterName=\"helloFilter\", urlPatterns=\"/helloServlet\")\npublic class HelloFilter implements Filter {\n\n   @Override\n   public void doFilter(ServletRequest servletRequest,\n                        ServletResponse servletResponse, FilterChain filterChain)\n           throws IOException, ServletException {\n       System.out.println(\"Executing doFilter method\");\n       filterChain.doFilter(servletRequest, servletResponse);\n       System.out.println(\"Done executing doFilter method\");\n   }\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 951427,
              "key": "0e9e26ba-59f5-402f-8d7f-58e1923f4a49",
              "title": "035ND C01 L02 A12 HELLO FILTER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "o5PZqD-7bOI",
                "china_cdn_id": "o5PZqD-7bOI.mp4"
              }
            },
            {
              "id": 951428,
              "key": "81ec614d-7c6a-4bcd-9c1b-781473b39023",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Listener for Servlet - Instructions",
              "instructor_notes": ""
            },
            {
              "id": 951429,
              "key": "c488c91f-f0ad-4b41-b990-f688691d854f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous videos, we have learned how to create Servlet and Filter. In this video, we are going to learn what Listener is and how to implement a simple Listener in Spring Boot.\n\nLet’s create a Listener for Servlet\n1. Create a HelloListener class that implements ServletContextListener.\n2. Copy the code below to your class:\n\n```\nimport javax.servlet.ServletContextEvent;\nimport javax.servlet.ServletContextListener;\nimport javax.servlet.annotation.WebListener;\n\n@WebListener\npublic class HelloListener implements ServletContextListener {\n\n   @Override\n   public void contextDestroyed(ServletContextEvent servletContextEvent) {\n       System.out.println(\"Servlet Context Destroyed\");\n   }\n\n   @Override\n   public void contextInitialized(ServletContextEvent servletContextEvent) {\n       System.out.println(\"Servlet Context Initialized\");\n   }\n}\n```\n\n3. Make sure to import necessary imports.\n",
              "instructor_notes": ""
            },
            {
              "id": 951430,
              "key": "e50b6a86-8629-437a-9d12-240ac26f20f5",
              "title": "035ND C01 L02 A13 HELLO LISTENER",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6B7w5kFLevg",
                "china_cdn_id": "6B7w5kFLevg.mp4"
              }
            }
          ]
        },
        {
          "id": 951431,
          "key": "573f8228-7d7b-4ef4-abdb-09d1bc9fe7a3",
          "title": "Servlet with Bean",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "573f8228-7d7b-4ef4-abdb-09d1bc9fe7a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 951432,
              "key": "4cd755a1-c5b9-48dc-8072-4a32a052e9b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Servlet with Bean",
              "instructor_notes": ""
            },
            {
              "id": 951433,
              "key": "10972418-708f-42ee-a2d1-9103ee48cc78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s create servlet with bean. Bean is a very important concept in Spring. A bean is an object in your Spring Boot project that Sprint Boot manages during runtime. Usually, any class that handles your application logic is a bean. More specifically, a bean is managed by IoC (Inversion of Control) container in a Spring Boot project. IoC is responsible for creating the beans in a project, managing any dependencies between them (by using dependency injection), managing their lifecycles, and configuring them. \n\nIf you want to keep your existing code for future reference, you can stash your existing code, or copy it to another place. Switch to using bean is minimal here.\n\nTo use beans follow the below steps: \n1. Remove @ServletComponentScan annotation in ```SpringBootHelloworldApplication``` class.\n2. Add the following methods to the application class (```SpringBootHelloworldApplication```):\n\n```\n/// Register Servlet.\n@Bean\npublic ServletRegistrationBean getServletRegistrationBean() {\n  ServletRegistrationBean servletBean = new ServletRegistrationBean(new HelloServlet());\n  servletBean.addUrlMappings(\"/helloServlet\");\n  return servletBean;\n}\n\n/// Register Filter.\n@Bean\npublic FilterRegistrationBean getFilterRegistrationBean() {\n  FilterRegistrationBean filterBean = new FilterRegistrationBean(new HelloFilter());\n  // Add filter path\n  filterBean.addUrlPatterns(\"/helloServlet\");\n  return filterBean;\n}\n\n@Bean\npublic ServletListenerRegistrationBean<HelloListener> getServletListenerRegistrationBean() {\n  ServletListenerRegistrationBean listenerBean =\n        new ServletListenerRegistrationBean(new HelloListener());\n  return listenerBean;\n}\n``` \n\n3. Make sure your imports are like the ones below: \n\n```\nimport com.example.helloworld.servlet.HelloFilter;\nimport com.example.helloworld.servlet.HelloListener;\nimport com.example.helloworld.servlet.HelloServlet;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\n```\n\n4. Now you can run the application. \n",
              "instructor_notes": ""
            },
            {
              "id": 951434,
              "key": "020a479f-0d0e-4f57-93b3-4d19040d4519",
              "title": "035ND C01 L02 A14 HELLO BEAN",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D_XGjM2FL4I",
                "china_cdn_id": "D_XGjM2FL4I.mp4"
              }
            },
            {
              "id": 951451,
              "key": "592c8bae-b62c-4833-abc0-2c5fb1d22fec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quizzes about Servlet",
              "instructor_notes": ""
            },
            {
              "id": 951435,
              "key": "6b8b9ba0-8165-4463-9e99-0400082fcb79",
              "title": "Question 1 of 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6b8b9ba0-8165-4463-9e99-0400082fcb79",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If a web application has Servlet, Listener and Filter classes. Which of them will be instantiated first by the server?\n",
                "answers": [
                  {
                    "id": "a1570713469555",
                    "text": "Servlet",
                    "is_correct": false
                  },
                  {
                    "id": "a1570713477043",
                    "text": "Filter",
                    "is_correct": false
                  },
                  {
                    "id": "a1570713479990",
                    "text": "Listener",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 951436,
              "key": "61f4ed5c-eda2-494d-bd89-e90176a705ca",
              "title": "Question 2 of 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "61f4ed5c-eda2-494d-bd89-e90176a705ca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which object is used by the filters to get the next component invoked?",
                "answers": [
                  {
                    "id": "a1570713620483",
                    "text": "RequesstDispatcher",
                    "is_correct": false
                  },
                  {
                    "id": "a1570713681408",
                    "text": "ServletContext",
                    "is_correct": false
                  },
                  {
                    "id": "a1570713687550",
                    "text": "FilterChain",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 951437,
              "key": "8ea8ad7c-f83c-4b02-9828-dce6f24b69f9",
              "title": "Question 3 of 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8ea8ad7c-f83c-4b02-9828-dce6f24b69f9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following objects cannot be used by the listeners and servlets of an application for sharing information between them?\n",
                "answers": [
                  {
                    "id": "a1570714218282",
                    "text": "ServletRequest",
                    "is_correct": true
                  },
                  {
                    "id": "a1570714233189",
                    "text": "HttpSession",
                    "is_correct": false
                  },
                  {
                    "id": "a1570714268453",
                    "text": "ServletContext",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 951438,
          "key": "85dc85e5-1eab-4cb5-bd4f-b48053162095",
          "title": "Using Static Resources",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "85dc85e5-1eab-4cb5-bd4f-b48053162095",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 951439,
              "key": "ae9f8474-2dcf-4ac5-a3bc-3b98bc50f480",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using Static resources\n\nYou may have noticed if you start your application and go to localhost:8080 directly, you will get an ugly error message. Let’s fix that by understanding how the static resource works in Spring Boot. To do that, follow the instructions below: \n\n1. Create an image folder under ```static ``` folder, you can do that by right-clicking on ```static``` folder, then selecting New -> Directory (you can call the folder \"image\"). \n2. Copy any image you have on your computer to the image folder, I am using a book logo, you can use any image you want. Note: if you don't see the ```static``` directory under ```resources``` directory, right-click on ```static``` folder, then select New -> Directory and name that directory \"static\".\n3. Create an html page with the following content :\n```\nHello World\n<img src=\"images/book.jpg\" alt=\"Book\" />\n```\nNotice how the value of ```src``` should be the folder name (images in this case), followed by a slash that's followed by the name of the image you placed under that folder. \n\n4. Run the application and go to localhost:8080. \n\nThe video below explains the instructions above. ",
              "instructor_notes": ""
            },
            {
              "id": 951440,
              "key": "4a7f2a75-6908-433b-a212-67d25711369b",
              "title": "035ND C01 L02 A15 STATIC RESOURCES",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Aeplyf1AmIA",
                "china_cdn_id": "Aeplyf1AmIA.mp4"
              }
            }
          ]
        },
        {
          "id": 951441,
          "key": "464c1845-2247-424c-b6a2-883f3ab03372",
          "title": "File Upload Application",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "464c1845-2247-424c-b6a2-883f3ab03372",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 951442,
              "key": "f3c3fe0c-eb70-4e3d-b3cb-5aaaf44f8135",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Spring Boot Application for File Upload - Instructions\n\nIn this example, we are going to create a Spring Boot application for file upload. You can use the file upload application to upload your local file to your server (in this example, your local as well). Follow the below steps to create the application: \n\n1. Go to https://start.spring.io/ and enter artifact as spring-boot-file-upload.\n2. Search for “Web” in dependency search and select \"Spring Web\" (this will add ```spring-boot-starter-web``` dependency to your pom.xml file).\n3. Download the project then unzip it. After that, import it as your IntelliJ maven project.\n\n### Create a View\n\n1. Create an index.html file under src/main/resources/static. Add a form with an input and a submit button as in the code below. If you are not familiar with html, don’t worry about it right now. You can take a look at how it works here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file. \n```\n<h3>File Upload</h3>\n<form action=\"uploadFile\" method=\"post\" enctype=\"multipart/form-data\">\n   Select file: <input type=\"file\" name=\"attach\"/><br />\n   <input type=\"submit\" value=\"Upload\">\n</form>\n```\n\n### Create a Controller\n1. Create a controller directory under your package (which is ```com.example.springbootfileupload``` in this case) and create an UploadController Java class inside it.\n2. Write the below code inside ```UploadController```: \n```\nMap<String, Object> result = new HashMap<>();\n/// Receive message\n@RequestMapping(\"/uploadFile\")\npublic Map<String, Object> upload(@RequestParam(\"attach\")MultipartFile file) throws IOException {\n   // File info\n   System.out.println(\"File name = \"  + file.getOriginalFilename());\n   System.out.println(\"File type = \" + file.getContentType());\n\n   // Save to disk\n   // file path example 1) Windows c:/, 3) Mac ~/Documents/\n   String filePath = \"~/Documents/\";\n   file.transferTo(new File(filePath + file.getOriginalFilename()));\n   result.put(\"Success\", true);\n   return result;\n}\n```\nNotice how both the ```action``` value of the form in the html file and the value of @RequestMapping annotation should be the same (in this case, it's \"uploadFile\"). \n\n3. Run the application.\n",
              "instructor_notes": ""
            },
            {
              "id": 951443,
              "key": "8924a5dd-f7b2-40a9-b7d9-d0e9bb549d79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Spring Boot File Upload\n\nIn case you have issues with uploading big files. You can update the application.properties with the following statement:\n```\nspring.http.multipart.maxFileSize=XXXMB\n```\nIn case you want to try multiple files, you can update the configuration to:\n```\nspring.http.multipart.maxRequestSize=XXXMB\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 951444,
              "key": "88fb1bfd-44ce-4cfc-ae5a-b192a2b9f454",
              "title": "035ND C01 L02 A16 SPRINGBOOT FILE UPLOAD",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tG9H4pHlY90",
                "china_cdn_id": "tG9H4pHlY90.mp4"
              }
            }
          ]
        },
        {
          "id": 951445,
          "key": "5c616ca5-cc7f-4eed-b8d7-2dfe8099e74c",
          "title": "Lesson Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5c616ca5-cc7f-4eed-b8d7-2dfe8099e74c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 951446,
              "key": "6195b003-beae-4f80-bc18-f7ae56edc2e5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 951447,
              "key": "bf519ca7-f157-487b-9eb7-8bd13cd5a325",
              "title": "035ND C01 L02 A18 LESSON RECAP",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rLQEvPm7NQY",
                "china_cdn_id": "rLQEvPm7NQY.mp4"
              }
            },
            {
              "id": 951448,
              "key": "5be51c83-d191-409d-adbc-14f64af9a865",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "How do you like Spring Boot so far? Let’s talk about some advanced Spring Boot components in our next lesson. See you around!\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}