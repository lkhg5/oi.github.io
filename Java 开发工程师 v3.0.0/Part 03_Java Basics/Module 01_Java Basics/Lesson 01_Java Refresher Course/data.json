{
  "data": {
    "lesson": {
      "id": 899181,
      "key": "ea5694ba-99a5-450a-850d-ac0ce5b9a2c8",
      "title": "Java Refresher Course",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Let’s get up to speed with Java",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/ea5694ba-99a5-450a-850d-ac0ce5b9a2c8/899181/1581176758972/Java+Refresher+Course+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/ea5694ba-99a5-450a-850d-ac0ce5b9a2c8/899181/1581176751427/Java+Refresher+Course+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 906410,
          "key": "ba149205-9148-430a-bb9c-0ea57d4a3b90",
          "title": "Java Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba149205-9148-430a-bb9c-0ea57d4a3b90",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906411,
              "key": "0bd4aa45-eddd-4d99-a716-53fc76090c79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you are already familiar with Java you can use this lesson as a refresher course. You will find useful quizzes and exercises to refresh some of the basic concepts and get you up to speed.\n\nOn the other hand, if you don't feel too confident about Java, we suggest to take a look at the lessons in the Extra-Curriculum section - **intro to Java Programing**, where we cover the basic Java programming topics.\n\nHave fun!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906480,
          "key": "32edc106-f1dc-4f67-9c37-31acd2f12b46",
          "title": "Java Basic APIs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "32edc106-f1dc-4f67-9c37-31acd2f12b46",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906482,
              "key": "e2772e3b-df55-466e-83a9-16d9f746b8fd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Welcome!",
              "instructor_notes": ""
            },
            {
              "id": 906483,
              "key": "2109828f-5ecc-49f9-846b-3e22a300e626",
              "title": "035ND C01 L01 A00 COURSE INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IVOZ_SYVnp4",
                "china_cdn_id": "IVOZ_SYVnp4.mp4"
              }
            },
            {
              "id": 906485,
              "key": "07d9e44e-88a9-42b5-b90f-966d71f2cefd",
              "title": "035ND C01 L01 A00 LESSON INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AmfSMqwot6A",
                "china_cdn_id": "AmfSMqwot6A.mp4"
              }
            }
          ]
        },
        {
          "id": 899176,
          "key": "e1c05b8e-e17e-4a2b-addd-b490f2b502b8",
          "title": "An Overview of Some Basic Java APIs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e1c05b8e-e17e-4a2b-addd-b490f2b502b8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906319,
              "key": "b7b74aca-6006-4721-ba6d-2e5264617f37",
              "title": "035ND C01 L01 A01 MATH, DATE, STRING",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "imFeLfQ9Bh4",
                "china_cdn_id": "imFeLfQ9Bh4.mp4"
              }
            },
            {
              "id": 955665,
              "key": "12aed8e1-fdf6-4e65-8600-02485f25dcf7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "API stands for Application Programming Interface. An API is a set of public classes and methods that programs can use and call, this defines how programs can communicate with other programs through those public classes and methods. \n\nIn Java for example, the API is all the packages, classes, and methods that you can call and benefit from their functionalities without worrying about their internal implementation. For example, the Math class is a part of that API, it's a public class that contains public methods that you can simply call and benefit from without knowing how they work internally. For example, you can call ```Math.sqrt (4)```, this means that you're calling the public method ```sqrt``` in the Math class.``` sqrt``` method calculates the square root of the number it receives as an argument and returns the result, here the number is 4, so it'll return 2.  Did you need to worry about the internal implementation of sqrt? No. You benefited from it by calling it and it did the rest. So, an API is the set of all packages, classes, and methods that you can use and call without worrying about their implementations. This idea is the same in other programming languages as well. \n\nA class on the other hand, contains methods and variables that represent a real world entity, like a student, a car, etc. If for example we have 10 students that we want to represent, then we'll create 10 objects of Student class. A Student object is an encapsulation of all the methods and variables that represent that particular student. For example, if the class has variables to represent the name and the age of a student along with methods to set and get the name and the age, then an object that represents a student whose name is John and age is 26 will have its name and age variables values as \"John\" and 26, respectively, and its set and get methods will edit and return those two variables. A class can be a part of an API or it can be self-contained (doesn't belong to an API). ",
              "instructor_notes": ""
            },
            {
              "id": 899183,
              "key": "4b96b5c2-3c5c-4646-b410-c01a16293237",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### You can read more about the APIs mentioned in the video by checking their documentation as listed below:\n\nMath: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html\n\nDate: https://docs.oracle.com/javase/8/docs/api/java/util/Date.html\n\nString: https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\n\nCharacter: https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html\n\n\nLet's talk a bit more about Math class. Math class helps users perform different mathematical operations. It can also be used in data analysis, big data, machine learning, and AI. Here is a code example in which we use Math class to help us calculate the standard deviation (SD) of a set of numbers: \n\n   ```java\n public static double calculateSD(double numArray[])\n    {\n        double sum = 0.0, standardDeviation = 0.0;\n        int length = numArray.length;\n        for(double num : numArray) {\n            sum += num;\n        }\n        double mean = sum/length;\n        for(double num: numArray) {\n            standardDeviation += Math.pow(num - mean, 2);\n        }\n        return Math.sqrt(standardDeviation/length);\n    }```\n",
              "instructor_notes": ""
            },
            {
              "id": 899185,
              "key": "509fa499-b951-4f81-b254-ef3197be0629",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Here some quizzes to get us up to speed!",
              "instructor_notes": ""
            },
            {
              "id": 899113,
              "key": "24ad88a7-c6d4-407b-9a3d-941cdd8e5f86",
              "title": "Math, Date, String, Character Quiz 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "24ad88a7-c6d4-407b-9a3d-941cdd8e5f86",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following Java statement will produce 8.0?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Math.ceil(8.2)",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Math.floor(7.2)",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Math.round(8.01)",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Math.abs(-8.0)",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 899112,
              "key": "8245f758-4cd8-4236-aafe-3dd9f95b49f5",
              "title": "Math, Date, String, Character Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8245f758-4cd8-4236-aafe-3dd9f95b49f5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Given a > b, b > c, which statement will return the a?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Math.max(c, Math.abs(Math.min(-a, -b)))",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Math.min(c, Math.abs(Math.max(a, b)))",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899130,
              "key": "a05b11f9-aab1-46c4-b61b-7707c332fc31",
              "title": "Math, Date, String, Character Quiz 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a05b11f9-aab1-46c4-b61b-7707c332fc31",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Convert 1561554154352 to UTC time you would get what date and time?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Wed Jun 26 2019 13:02:34",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Wed Jun 26 2019 09:02:34",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 957558,
              "key": "268c12b3-db5a-4642-9da9-20ecc89aa52d",
              "title": "String in Java is a?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "268c12b3-db5a-4642-9da9-20ecc89aa52d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "String in Java is a?",
                "answers": [
                  {
                    "id": "a1574096992233",
                    "text": "class",
                    "is_correct": true
                  },
                  {
                    "id": "a1574097015016",
                    "text": "variable",
                    "is_correct": false
                  },
                  {
                    "id": "a1574097018230",
                    "text": "character array",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 908073,
              "key": "f275872e-9fa9-4b5e-b752-a9bbd4bac787",
              "title": "Math, Date, String, Character Quiz5",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f275872e-9fa9-4b5e-b752-a9bbd4bac787",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which statement below will NOT produce a char ‘a’ ?",
                "answers": [
                  {
                    "id": "a1565209010332",
                    "text": "'A' + 32",
                    "is_correct": false
                  },
                  {
                    "id": "a1565209056015",
                    "text": "'z' - 25",
                    "is_correct": false
                  },
                  {
                    "id": "a1565209056728",
                    "text": "Character.toString(‘a’)",
                    "is_correct": true
                  },
                  {
                    "id": "a1565209057874",
                    "text": "Character.toLowerCase(‘A’)",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 906488,
          "key": "1a5ef75e-218b-4f99-a549-71e9e47023e5",
          "title": "Java Basic APIs - StringBuilder, StringBuffer, Regex",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a5ef75e-218b-4f99-a549-71e9e47023e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906489,
              "key": "bcdd349f-84d0-4043-9bb0-58308a23ec10",
              "title": "035ND C01 L01 A02 STRINGBUILDER, STRING, REGEX",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ogLjqwe3WWk",
                "china_cdn_id": "ogLjqwe3WWk.mp4"
              }
            },
            {
              "id": 906491,
              "key": "86354d8b-4699-4077-ac30-1ae653f61ac5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### A Summary about String, StringBuilder, and StringBuffer\n\nString is immutable, while StringBuilder and StringBuffer are mutable. As you may know, when we create an object, a space in the computer's memory (RAM) gets allocated to store that object. In the case of using a mutable object, if we want to make any changes on it, we can do that without the need of allocating a new space in the memory to store the object after changing it. \n\nHowever, in the case of using an immutable object, whenever we make any change on it, a new space in the memory will be allocated to store the new object. That's why, if you expect an object to change its value frequently, it's better to use mutable object data types instead of immutable ones. The code below gives examples of using String and StringBuilder and it illustrates how StringBuilder is mutable while String is not. \n\n```java\n//The below code causes allocating a new space to store the object after changing its value to \"William B.\"\nString name = \"William\"; \nname = \"William B.\"; \n\t\t\n//The below code allocates a space to store the object, then the object gets stored in the same space after its value changes to \"William B.\"\nStringBuilder nameStringBuilder = new StringBuilder (); \nnameStringBuilder.append (\"William\"); \nnameStringBuilder.append (\" B.\"); \n```\n\nAn important difference between StringBuilder and StringBuffer is that each method of StringBuffer is synchronized (it can't be accessed by multiple threads at once, but can only be accessed by one thread at a time) which makes StringBuffer thread safe*. However, StringBuilder is not thread safe, which means that multiple threads can access any of its methods at the same time. This makes StringBuilder faster than StringBuffer. \n\n*Thread safe means that if a resource (a variable, a method, etc.) is to be required by multiple threads, it'll be guaranteed that nothing unwanted will happen such as getting different values of that resource by different threads. \n\n### Helpful Resources:\n\n\nStringBuilder: https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html\n\nStringBuffer: https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html\n\nRegex: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\n\n### Let's Take Some Quizzes!",
              "instructor_notes": ""
            },
            {
              "id": 906496,
              "key": "4479df25-f234-4051-8da6-7de37d66c605",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4479df25-f234-4051-8da6-7de37d66c605",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "```\nStringBuilder sb = new StringBuilder(\"Good Morning\");\nsb.insert(1, \"Friend \");\nSystem.out.println(sb.toString()); \n```\nWhat is the console output?\n",
                "answers": [
                  {
                    "id": "a1564419509690",
                    "text": "Good Morning",
                    "is_correct": false
                  },
                  {
                    "id": "a1564419533597",
                    "text": "Friend Good Morning",
                    "is_correct": false
                  },
                  {
                    "id": "a1564419542475",
                    "text": "Some other output",
                    "is_correct": true
                  },
                  {
                    "id": "a1564419551965",
                    "text": "Compilation Error or Runtime Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 906497,
              "key": "86b06fa7-3985-491c-9244-bb4aabb55a24",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "86b06fa7-3985-491c-9244-bb4aabb55a24",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the following Regex expression trying to validate?\n\n```\n^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$\n```",
                "answers": [
                  {
                    "id": "a1564419661398",
                    "text": "A person's name",
                    "is_correct": false
                  },
                  {
                    "id": "a1564419672035",
                    "text": "A random list of characters",
                    "is_correct": false
                  },
                  {
                    "id": "a1564419674199",
                    "text": "An email address",
                    "is_correct": true
                  },
                  {
                    "id": "a1564419675160",
                    "text": "A list of numbers",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 906498,
              "key": "edccf129-cc00-4b44-b273-1474b27f96f9",
              "title": "StringBuilder, StringBuffer, Regex Coding exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "edccf129-cc00-4b44-b273-1474b27f96f9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the task"
              ],
              "positive_feedback": "Great job!\nSolution for your reference: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/blob/master/exercises/vowel-only/src/VowelOnly.java",
              "video_feedback": null,
              "description": "Write a method with a random string input which returns a String containing only vowels. Please use StringBuilder in your solution.\n\n**Example:**\nInput: “Hello World!” -> output: “eoo”\n\nInput: “Udacity Course” -> output: “Uaioue”\n\n**Your method signature should be:**\n```java\npublic static String vowelOnly(String input) {\n\n}\n```"
            },
            {
              "id": 906499,
              "key": "9728c325-d360-46c1-9947-4ddddda325ef",
              "title": "035ND C01 L01 A03 CODING EXERCISES SOLUTION",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "p8KQDmEElTk",
                "china_cdn_id": "p8KQDmEElTk.mp4"
              }
            }
          ]
        },
        {
          "id": 906500,
          "key": "dd504807-9557-4e7d-9d0f-9dc0b058b24b",
          "title": "Java Basic APIs - Binary Search, Recursion, Big-O Notation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd504807-9557-4e7d-9d0f-9dc0b058b24b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906511,
              "key": "cc1fe07e-5b3e-4957-a1e9-b28153e3f20e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Binary Search",
              "instructor_notes": ""
            },
            {
              "id": 906501,
              "key": "49cb5ec1-61d5-4b8e-b565-2490c9509a89",
              "title": "035ND C01 L01 A04 BINARY SEARCH",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "uLZK2ArqIsc",
                "china_cdn_id": "uLZK2ArqIsc.mp4"
              }
            },
            {
              "id": 931247,
              "key": "b8b19caf-e02b-4093-929b-6239a4887303",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is how you can compute the worst-case time complexity (big O) of binary search algorithm. \n\nIn the first iteration, accessing the middle element takes n/2 times, where n is the size of the array. Checking whether the middle element is greater or less than the element to find takes constant time, which can be expressed as 1, because that comparison doesn’t require any iterations. Instead, it’s a simple process that’s done in one step. \n\nSo, the time required for the first iteration is: \n\n```T(1) = n/2 + 1 ```\n\nConstant times are not important when calculating worst-case time complexity (only multiples of n are), so we can simply remove the constant time we expressed as 1 in the equation above (this applies to any other worst-case time complexity calculation even if you have more than one constant. You can drop them all). \n\nSo, the first iteration takes: \n\n```T(1) = n/2```\n\nThe second iteration is exactly the same as the first one, except that it’ll iterate through half *of the half* of the array which is n/4. So we can write the time complexity of the second iteration as: \n\n```T(2) = n/4 which is equivalent to T(2) = n/2^2```\n\nAccordingly, the time complexity of the third iteration is: \n\n```T (3) = n/2^3```\n\nYou can notice that the power of n in the equations above is the same as the number of iterations. If we express the iteration as K, then we can write: \n\n```T(K) = n/2^K```\n\nWe know that T(K) will be equal to 1 at the last iteration. So, we can write: \n\n```n/2^K = 1```\n\nWe need to express time complexity with respect to n only. Multiplying both sides of the equation by 2^K leads to: \n\n```2^K = n```\n\nApplying log2 on both sides: \n\n```K = log2(n) (where K is the number of iterations needed as mentioned before)```\n\nSo, the worst-case time complexity is ```log2(n)```\n\nYou can use the same strategy to find the worst-case time complexity for any other algorithm.\n",
              "instructor_notes": ""
            },
            {
              "id": 906502,
              "key": "9f42270d-35af-4e72-87f1-c2b030b54177",
              "title": "Binary Search Coding Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9f42270d-35af-4e72-87f1-c2b030b54177",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Great! Check my solution here: Github: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises/binary-search-target-search/src/BinarySearchDemo.java",
              "video_feedback": null,
              "description": "Please complete the coding questions using binary search.\n\nSearch for the target in a sorted array, and return the index. If the target is not in this array, return -1.\n\n**Example 1:**\n\nInputs: arr = [1, 5, 7, 8, 9, 11, 18, 19, 20, 25], target = 11\n\nOutput: 5.\n\n**Example 2:**\n\nInputs: arr = [1, 2, 3, 4, 5], target = 10 \n\nOutput: -1\n\n**Your method signature should be:**\n```\npublic static int findTarget(int[] arr, int target) {\n\n}\n```"
            },
            {
              "id": 906503,
              "key": "6ba710d5-c1e2-475c-a8a5-582b9fc18055",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Recursion\n",
              "instructor_notes": ""
            },
            {
              "id": 906504,
              "key": "ffb5aad3-53a9-4759-aeb2-b2d288ee800f",
              "title": "035ND C01 L01 A05 RECURSION",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VsJik0xa1cw",
                "china_cdn_id": "VsJik0xa1cw.mp4"
              }
            },
            {
              "id": 906505,
              "key": "a99736e9-a7e0-4dc5-844e-1f58ff7ded71",
              "title": "Recursion Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a99736e9-a7e0-4dc5-844e-1f58ff7ded71",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises/permutation/src/PermutationDemo.java",
              "video_feedback": null,
              "description": "Write all permutations of a given array.  (Permutations gives all possible variations in which a set or number of things can be ordered or arranged).\n\nGiven an array with unique integers, print all permutations.\n\n**Example 1:**\n\nInput: [1, 2] \n\nPrinted Output: 12, 21\n\n**Example 2:**\n\nInput: [1, 2, 3]\n\nPrinted Output: 123, 132, 213, 231, 312, 321\n\n**Your method signature should be:**\n\n*Note: in this strategy, `int index` is keeping track of which character in the new permutation the code is altering. There are other strategies that use different method parameters.*\n```java\npublic static void printPermutn(int[] arr, int index) {\n\n}\n```"
            },
            {
              "id": 906506,
              "key": "268e1c50-6ac9-4cdb-ac77-1dd23060560d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Big-O Notation",
              "instructor_notes": ""
            },
            {
              "id": 906507,
              "key": "71a9cccb-e41a-4b1b-a08c-11a31132ecd4",
              "title": "035ND C01 L01 A06 BIG O NOTATION",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kIrl3Ontm54",
                "china_cdn_id": "kIrl3Ontm54.mp4"
              }
            },
            {
              "id": 906508,
              "key": "b502d340-6a1f-478e-aa14-b80894504a5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Check the following link for a quick summary of the time complexity:\n\n[https://tinyurl.com/y5y2vrh6](https://tinyurl.com/y5y2vrh6)",
              "instructor_notes": ""
            },
            {
              "id": 906509,
              "key": "8055a486-62ed-482a-b1ac-211f15c1f8ed",
              "title": "Big-O Notation Quiz1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8055a486-62ed-482a-b1ac-211f15c1f8ed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the time complexity for searching for a target in an unsorted 2D m * n matrix?",
                "answers": [
                  {
                    "id": "a1564420267318",
                    "text": "O(m * n)",
                    "is_correct": true
                  },
                  {
                    "id": "a1564420291357",
                    "text": "O(m + n)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 906510,
              "key": "06111ba4-8ec2-4f4a-94a8-92caa5a88bd3",
              "title": "Big-O Notation Quiz2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "06111ba4-8ec2-4f4a-94a8-92caa5a88bd3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the time complexity of the following function fun()?\n\n```\nint fun(int n) \n{     \n    for (int i = 1; i <= n; i++) \n    { \n        for (int j = 1; j < n; j += i) \n        { \n            // Some O(1) task \n        } \n    }     \n} \n```\n",
                "answers": [
                  {
                    "id": "a1564420326133",
                    "text": "O(nlog(n))",
                    "is_correct": true
                  },
                  {
                    "id": "a1564420376867",
                    "text": "O(n^2)",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 906513,
          "key": "0536cb47-7c24-4734-b345-89f886e24eb3",
          "title": "Collections",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0536cb47-7c24-4734-b345-89f886e24eb3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906514,
              "key": "5379ecff-07b1-4074-a5eb-6864dd45d32c",
              "title": "035ND C01 L01 A07 COLLECTIONS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CSRW_EX61uE",
                "china_cdn_id": "CSRW_EX61uE.mp4"
              }
            },
            {
              "id": 931248,
              "key": "b97767a6-c0ba-4541-9ddd-0bcf6fc1c47f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you have an ArrayList ```numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}```, the last index of this ArrayList is 9 (because in java indices start from 0 not from 1). If you do ```numbers.get (10)```, you will get java.lang.ArrayIndexOutOfBoundsException error because you are searching for an index that is outside the bounds of the array. Below is a simple code example: \n\n```java\n    public static void main(String[] args) {\n        List<Integer> numbers =  new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));\n        System.out.println(numbers.get(10)); // This line will cause the exception to happen\n    }\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899177,
          "key": "3a017f2e-e5d4-453a-8394-29d45ab3153b",
          "title": "Collections - List",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a017f2e-e5d4-453a-8394-29d45ab3153b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906323,
              "key": "da32b3e6-1d30-4d0a-a81f-e426391c7db0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## List",
              "instructor_notes": ""
            },
            {
              "id": 906322,
              "key": "57725f40-52ef-4c17-aeec-320293b1c6fd",
              "title": "035ND C01 L01 A08 LIST",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Z_i3-sMRLKU",
                "china_cdn_id": "Z_i3-sMRLKU.mp4"
              }
            },
            {
              "id": 899193,
              "key": "688aabcb-66b1-4532-8dd9-2e577cb40935",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " One problem with array is, once the size is defined, you will have to stick with the size. If you have an integer array like\n\n```\nA[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9} \n```\n\nAnd the statement below will result in a run-time exception.\n\n```\nA[10] = 10;\n```\n\nTherefore, in this case, you need your array to have a flexible size like a List. In Java, a List is an interface, and ArrayLists and LinkedLists are two common implementations for List. \n\n### Difference between ArrayLists and LinkedLists\n\nArrayList is based on a data structure called dynamic array (aka growable or resizable array). Dynamic arrays overcome the problem of having a fixed size that needs to be known and defined at the allocation time, because they can have variable size which allows addition and deletion of elements even after the array is declared. \n\nPlease note that dynamic arrays use fixed size arrays. Constructing a dynamic array can be done by allocating a space in the memory for a fixed size array, which has a size larger than the initial number of elements that need to go into the dynamic array. When more elements need to be added, they can go into the extra available spaces that were previously allocated. However, if some new elements need to be added and no additional spaces are available, a new larger array will be allocated (with a size larger than the one currently required), all elements will be copied to the new array, then the new elements can be added, which is an expensive process in terms of performance. \n\nOn the other hand, LinkedList is based on a data structure called doubly linked list (DLL), which is a list where each node has two pointers, one points to the previous node, and the other points to the next one. The first element in the list is called the head and its previous pointer points to Null, while the last element is called the tail and its next pointer points to Null. \n\nThe table below lists data manipulation examples and illustrates when you should use LinkedList or ArrayList based on their performance:\n",
              "instructor_notes": ""
            },
            {
              "id": 931254,
              "key": "e08b1f93-0df1-4620-9483-74d32b2e0ce5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d7d510b_linkedlist-vs-arraylist/linkedlist-vs-arraylist.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e08b1f93-0df1-4620-9483-74d32b2e0ce5",
              "caption": "",
              "alt": "",
              "width": 700,
              "height": 800,
              "instructor_notes": null
            },
            {
              "id": 931255,
              "key": "f0c64e25-d623-425c-a4d1-21d1e4d305d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "So, if the case you need to implement requires manipulating elements (like insertion and deletion) more frequently, LinkedList is better, but if it requires retrieving elements more frequently, ArrayList is better. \n\nPlease take a look at their APIs, and see if you can solve the quizzes and coding problems on your own.\n\n### Helpful Resources: \n\nArrayList: https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\n\nLinkedList: https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html\n",
              "instructor_notes": ""
            },
            {
              "id": 908193,
              "key": "80b64ba1-d0a0-4513-86fd-cef1a8774d6d",
              "title": "List Quiz 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "80b64ba1-d0a0-4513-86fd-cef1a8774d6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "```\nArrayList<String> list = new ArrayList<String>() ;\nlist.add( \"Andy\" );\nlist.add( \"Bart\" );\nlist.add( \"Carl\" );\nlist.add( \"Doug\" );\nlist.add( \"Elmo\" );\n```\n\nWhich of the following will change the list so that it looks like:\n\n- Andy\n- Bart\n- Carl\n- Doug\n- Oscar\n- Elmo\n",
                "answers": [
                  {
                    "id": "a1565283500822",
                    "text": "list.add( 3, \"Oscar\" )",
                    "is_correct": false
                  },
                  {
                    "id": "a1565283552912",
                    "text": "list.add( 4, \"Oscar\" )",
                    "is_correct": true
                  },
                  {
                    "id": "a1565283553663",
                    "text": "list.set( 3, \"Oscar\" ) ",
                    "is_correct": false
                  },
                  {
                    "id": "a1565283554371",
                    "text": "list.set( 4, \"Oscar\" )",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 908252,
              "key": "80a49c69-c71d-4f1b-b407-9047088ae147",
              "title": "List Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "80a49c69-c71d-4f1b-b407-9047088ae147",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does the poll method do to a LinkedList?",
                "answers": [
                  {
                    "id": "a1565294511608",
                    "text": "Return the first element.",
                    "is_correct": false
                  },
                  {
                    "id": "a1565294540900",
                    "text": "Return and removes the first element.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 899194,
              "key": "c046bb01-e9ef-44c8-a925-38cfa2979d99",
              "title": "List Coding Question",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c046bb01-e9ef-44c8-a925-38cfa2979d99",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises/list/src/ListDemo.java",
              "video_feedback": null,
              "description": "Please complete the coding exercise for List.\n\nGiven a list of strings, all starting with a lowercase letter, please group them based on their first character. If their first character is an 'a', group them in list 0. If their first character is a ‘b’, group them in list 1. For any other starting characters, group them in list 2.\n\n**Example1:** \n\nInput: {“bcd”, “abc”, “cde”}\n\nOutput: [{“abc”}, {“bcd”}, {“cde”}]\n\n**Example2:** \n\nInput: {“abc”, “bcd”, “bbb”, “ace”, “snb”, “aaaa”, “bbbbb”, “eeee”} \n\nOutput: [{“abc”, “ace”, “aaaa”}, {“bcd”, “bbb”, “bbbb”}, {“snb”, “eeee”}]\n\n**Your method signature should be:**\n```java\npublic static List<String>[] groupString(List<String> input) {\n\n}\n```"
            }
          ]
        },
        {
          "id": 906515,
          "key": "10d944d5-c44b-4e00-a8bf-153beac1c5c1",
          "title": "Collections - Stack and Queue",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "10d944d5-c44b-4e00-a8bf-153beac1c5c1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906516,
              "key": "d24022c3-f2ea-487b-a3f8-864abfcd0e79",
              "title": "035ND C01 L01 A09 QUEUE AND STACK",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "N37V31tViXE",
                "china_cdn_id": "N37V31tViXE.mp4"
              }
            },
            {
              "id": 906517,
              "key": "87f07da2-9ab9-4dc6-af3e-fe55d8e70a06",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here we are going to introduce two interesting data structures, **stack** and **queue**. \n\n**Stack** follows last-in-first-out (LIFO) principle. That’s when you add an element, you add that to the top, when you remove an element, you also remove it from the top. This is similar to the two methods that we just learned from LinkedList, offerFirst, and removeFirst, which are equivalent to Stack’s push and pop. \n\nOn the other hand, **Queue** follows first-in-first-out (FIFO) principle. An excellent example of a queue is a line of customers waiting to buy ice cream. The first customer will get the ice cream first, and when they get the ice cream, they will leave the queue. This is similar to the two methods we learned from LinkedList, offerLast, and removeFirst, which are equivalent to Queue’s enqueue, and dequeue.\n\n### Resources:\n\nQueue: https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\n\nStack: https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html\n\n**The below animations show how insertion and deletion take place in Queue and Stack.** \n",
              "instructor_notes": ""
            },
            {
              "id": 931256,
              "key": "3241a31c-b420-4198-aca6-487639f2fe5f",
              "title": "Queue vs Stack Insertion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U1CcpB6mU0k",
                "china_cdn_id": "U1CcpB6mU0k.mp4"
              }
            },
            {
              "id": 931257,
              "key": "592c565f-1cce-4a35-b3ea-3b061705daca",
              "title": "Queue vs Stack Deletion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DwVfx8xuqgI",
                "china_cdn_id": "DwVfx8xuqgI.mp4"
              }
            },
            {
              "id": 906518,
              "key": "6ab87cae-e56a-4590-b35a-d71daffaede9",
              "title": "Stack and Queue",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6ab87cae-e56a-4590-b35a-d71daffaede9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which collection follows FIFO principle",
                "answers": [
                  {
                    "id": "a1564422176319",
                    "text": "Stack",
                    "is_correct": false
                  },
                  {
                    "id": "a1564422194569",
                    "text": "Queue",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 906519,
              "key": "874b02f7-2a78-44f0-86e9-3288abd426ff",
              "title": "Queue and Stack Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "874b02f7-2a78-44f0-86e9-3288abd426ff",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Great job! Please check the explained solution below. Also, the solution code is available here: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises/calculator/src/Calculator.java",
              "video_feedback": null,
              "description": "Complete the calculator coding question.\n\nGiven a string that represents a mathematical expression, implement a calculator to evaluate the expression represented by the string. The expression string contains only non-negative integers, and the operators +, -, and *.\n\nExample1: input: “1+2”, output:3\n\nExample2: input: “1+2*5”, output:11\n\nThe method to evaluate the expression can look like the one below: \n```\npublic static int calculate(String s) {\n}\n```"
            },
            {
              "id": 947805,
              "key": "2d5fd473-da41-480a-ab86-14dc58dd1804",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution",
              "instructor_notes": ""
            },
            {
              "id": 906520,
              "key": "d245dae8-3cdc-403d-bc40-8040484f2ff9",
              "title": "035ND C01 L01 A10 QUEUE AND STACK WALKTHROUGH",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xSbFqX1QIX4",
                "china_cdn_id": "xSbFqX1QIX4.mp4"
              }
            },
            {
              "id": 947804,
              "key": "64f89dfc-9f68-4514-8e82-e620d7af7cbb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Below is the solution code with comments that explain how the code works:\n\n``` java\nimport java.util.Stack;\n\npublic class Calculator {\n\n    public static int calculate(String s) {\n        int len;\n        // Check if the string is null or empty (length = 0). If the condition is met, return 0 as there is nothing to calculate\n        if (s == null || (len = s.length()) == 0) {\n            return 0;\n        }\n        // Initiate a Stack for storing the numbers represented by the string\n        Stack<Integer> stack = new Stack<>();\n        // Declare a variable \"num\" to store each number that exists in the string expression (each number can have one digit (eg, 5) or more (eg, 25))\n        int num = 0;\n        // Declare a variable \"sign\" to store the operator, since this calculator works on positive integers only, the initial value of the sign can be set to \"+\"\n        char sign = '+';\n        // Iterate through the string to check each character and take the proper action based on whether it's a number or an operator\n        for (int i = 0; i < len; i++) {\n            if (Character.isDigit(s.charAt(i))) {\n            /* If the current character is a digit, we have two possible cases. It's either that this digit is followed by a sign, which means we have a single digit number (eg, 5), \n            or the digit is followed by another digit, meaning that we have a number that consists of more than one digit (eg, 25). To take the second case in consideration, \n            we simply multiply the previous digit (which will be stored in the variable num) with 10, add the current digit to it, then we store the resulting number in the variable num. \n            This will also work properly if we have the first case, where num will be 0 and multiplying 0 by 10 will yield 0, which means we'll just be storing the current single digit number in num variable. */\n                num = num * 10 + s.charAt(i) - '0';\n            }\n            // If the current character is an operator ( +, -, or *) or if it's the last character, we check the sign and do the necessary Stack operation accordingly\n            if (!Character.isDigit(s.charAt(i)) || i == len - 1) {\n                // If the sign represents subtraction, this means we need to push the number (which was calculated in the previous iteration) with a negative value\n                if (sign == '-') {\n                    stack.push(-num);\n                }\n                // If the sign represents summation, this means we need to push the number (which was calculated in the previous iteration) as is (because it's already positive)\n                // The first push operation will happen through the if statement below, because we set our initial sign value to be \"+\"\n                if (sign == '+') {\n                    stack.push(num);\n                }\n                 /* If the sign represents multiplication, this means we need to pop the topmost number in the stack, multiply it by the current number (which was calculated in the previous iteration), \n                 then push the result to the stack */\n                if (sign == '*') {\n                    stack.push(stack.pop() * num);\n                }\n                // Since we pushed the proper number to the stack, it's time to store the value of the current operator (+, -, or *) so we can take the proper action in the next iterations\n                sign = s.charAt(i);\n               // Since we already pushed num to the stack, we need to reset it so we can do the next calculations correctly\n                num = 0;\n            }\n        }\n        // Declare a variable ans to store the answer\n        int ans = 0;\n        // Sum up all the numbers in the stack to get the result\n        for (int i : stack) {\n            ans += i;\n        }\n        //Return the result\n        return ans;\n    }\n} ```\n\nHere is an example that you can use to trace the code and understand it more: \n\nSuppose we have the expression: \"3-2\", the following will happen when we iterate through the string:\n\n**Iteration 1 (index 0):** Only the first if statement will be executed and 3 will be stored in \"num\". Please note that \"sign\" will be set to \"+\" before this iteration. \n\n**Iteration 2 (index 1):**  Only the second if statement will be executed, where 3 will be pushed to the stack and since the current sign is \"-\", the value of \"sign\" will be updated to \"-\".\n\n**Iteration 3 (index 2):** The first if statement will be executed and 2 will be stored in \"num\". The second if statement will be executed as well since this is the last index, where the sign will be checked which will be equal to \"-\", then -2 will be pushed to the stack. \n\n**After the loop:** We'll sum 3 and -2 and return the result which is 1.  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906521,
          "key": "837841b6-fd5c-45b3-8f97-75e09bb7a106",
          "title": "Collections - Map and Set",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "837841b6-fd5c-45b3-8f97-75e09bb7a106",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906522,
              "key": "22d4941b-c599-479b-aa1c-204c502385c8",
              "title": "035ND C01 L01 A11 MAP AND SET",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vhM8ZhbdM40",
                "china_cdn_id": "vhM8ZhbdM40.mp4"
              }
            },
            {
              "id": 906523,
              "key": "31e5a927-ed64-4fe7-b9eb-50525e691ce4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### The Difference between HashMap and TreeMap\nAs mentioned in the video, Hashmap is not ordered while TreeMap is ordered. The order here refers to the order of keys. Keys are always ordered in TreeMap, and they have an ascending order. For example, if we have the following key-value pairs: \n\n**\"1\": \"apple\"**\n\n**\"0\": \"orange\"**\n\n**\"2\": \"Guava\"**\n\nThe entries will be maintained in the TreeMap in order, i.e., \"0\": \"orange\" will be the first key-value entry, followed by \"1\": \"apple\", followed by \"2\": \"Guava\", because the keys will be ordered in an ascending manner (from 0 to 2). On the other hand, the order won't be guaranteed in HashMap, where the entries will be maintained randomly regardless of the ordering of keys. \n\nIn terms of complexity, HashMap is faster, because the basic operations (contains, add, remove, and size) require a constant time to be completed (O(1)). In the case of TreeMap, contains, add, and remove operations have O(log (n)) time complexity. So, if you don't care about the order, use HashMap. \n\n### The Difference between HashSet and TreeSet\nAs mentioned in the video, HashSet is not ordered, but TreeSet is ordered. The entries in TreeSet are ordered in an ascending manner based on their values. For example, if we enter the following entries in a TreeSet: **\"Hard\"**, **\"Work\"**, **\"Pays\"**, **\"Off\"**, they'll be stored in the following order: **\"Hard\"**, **\"Off\"**, **\"Pays\"**, **\"Work\"**, because they'll be ordered in an ascending manner based on the first alphabet of each entry. However, if we add the same entries to a HashSet, they'll be stored randomly regardless of the alphabetical order. \n\nIn terms of complexity, HashSet is faster, because the basic operations (contains, add, remove, and size) require a constant time to be completed (O(1)). In the case of TreeSet, contains, add, and remove operations have O(log (n)) time complexity. So, if you don't care about the order, use HashSet. \n\n### Useful Resources:\n\nMap: https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\n\nSet: https://docs.oracle.com/javase/8/docs/api/java/util/Set.html",
              "instructor_notes": ""
            },
            {
              "id": 906524,
              "key": "5c97a9d7-61cd-479f-abeb-a5146f405b1b",
              "title": "Map and Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5c97a9d7-61cd-479f-abeb-a5146f405b1b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which set maintains the order of elements?",
                "answers": [
                  {
                    "id": "a1564422375852",
                    "text": "HashSet",
                    "is_correct": false
                  },
                  {
                    "id": "a1564422385632",
                    "text": "TreeSet",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 906525,
              "key": "fcddc352-2648-4248-9f20-def01392882b",
              "title": "Map and Set Q2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fcddc352-2648-4248-9f20-def01392882b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "\n```\nMap<String, String> map = new HashMap<>(); \nmap.put(\"Name\", \"Aman\"); \nmap.put(\"Address\", \"Kolkata\"); \nmap.compute(\"Name\", (key, val)  -> val.concat(\" Singh\")); \nSystem.out.println(map.get(“Name”));\n```\n\nWhat is the console output?\n",
                "answers": [
                  {
                    "id": "a1564422433337",
                    "text": "Aman Singh",
                    "is_correct": true
                  },
                  {
                    "id": "a1564422472987",
                    "text": "Aman",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 906526,
              "key": "232e8057-52c8-478e-b3ba-b6f4f9e96080",
              "title": "Map And Set Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "232e8057-52c8-478e-b3ba-b6f4f9e96080",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Please complete the “words frequency” coding problem.\n\nGive a list of strings, calculate and print the frequency of each string based on alphabetical order.\n\nExample1: input {“abc”, “bcd”, “abc”}, output “abc”|2, “bcd”|1"
            },
            {
              "id": 906527,
              "key": "f4b6c322-0f90-4e4d-b4dc-77aa8d78055a",
              "title": "035ND C01 L01 A12 MAP AND SET WALKTHROUGH",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XkskFKGuvqI",
                "china_cdn_id": "XkskFKGuvqI.mp4"
              }
            },
            {
              "id": 947803,
              "key": "94d2cb0d-d2ec-4dce-bc16-34d64d25ec46",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you're still wondering why we added 1 after checking the frequency of a String in line 10 in the code appearing in the video above, consider the below example: \n\nIf we have a String \"bcd\" that doesn't exist in the map, `getOrderDefault` will return the default value which is 0. However, since the string is being added at the same step, this means the frequency should become 1 not 0, that's why we add 1 to the frequency. The same concept applies if we add a String that already exists. Let's say we want to add \"abc\" given that \"abc\" already exists once in the map. In this case, `getOrderDefault` will return 1, but because we want to add that String again to the map, the frequency should become 2. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899178,
          "key": "0253bde4-d002-45da-a48e-c11ce14a2d12",
          "title": "Environment Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0253bde4-d002-45da-a48e-c11ce14a2d12",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899200,
              "key": "e3696aa3-3e5c-4866-95bc-f4cfedfc450f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is MAVEN?\n\nMaven is a powerful project management tool that helps us build our code projects as well as managing their dependencies and documentation. With Maven we can do many things, like building our code projects, adding jar files and dependencies, build projects into different output types like JAR and WAR, and many other things. That's why, it's very important to have Maven installed on your computer.  ",
              "instructor_notes": ""
            },
            {
              "id": 900502,
              "key": "ceee1b33-c252-4360-b4dc-e65c25f26f1e",
              "title": "035ND C01 L01 A13 ENVIRONMENT SETUP",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "r9zgAOvcrLo",
                "china_cdn_id": "r9zgAOvcrLo.mp4"
              }
            },
            {
              "id": 900503,
              "key": "ae9f0451-ff4e-4f72-a161-c1d6b9f4d23d",
              "title": "035ND C01 L01 A14 WHAT IS MAVEN-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cHzqeuKoDX8",
                "china_cdn_id": "cHzqeuKoDX8.mp4"
              }
            },
            {
              "id": 899201,
              "key": "8a37312f-53a1-47d0-9d65-07ba8bef9c4e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Maven installation link:** https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html. \n",
              "instructor_notes": ""
            },
            {
              "id": 900505,
              "key": "d10aed0e-e488-4461-9c31-3687e62b37f9",
              "title": "035ND C01 L01 A15 INSTALL MAVEN",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rD6WpD-z04k",
                "china_cdn_id": "rD6WpD-z04k.mp4"
              }
            }
          ]
        },
        {
          "id": 899179,
          "key": "ed27e52e-fd6c-41e7-be69-d2b7ef48fafc",
          "title": "Exception and File IO",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed27e52e-fd6c-41e7-be69-d2b7ef48fafc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899202,
              "key": "185851c8-8de6-4dd7-aa76-c378eb4588e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Exception\n\nAn exception is a problem that arises during run-time. Try each of the following lines separately and observe the resulting exception and try to understand it. \n\n```\nint num = 10 / 0;\nList<Integer> lst = null; int size = lst.size();\nString s = \"FOOBAR\"; int i = Integer.parseInt(s);\nint[] a = {1, 2, 3}; System.out.println(a[3]);\n```\nBelow is an exaplanation of why each line will cause an exception: \n\n```\nint num = 10 / 0; // The system will crash and an ArithmeticException will occur because of dividing by 0. \nList<Integer> lst = null; int size = lst.size();  // The system will crash and a NullPointerException will occur because we can't call a method (size in this case) on a null object (lst)\nString s = \"FOOBAR\"; int i = Integer.parseInt(s); // The system will crash and a NumberFormatException will occur because there is no integer number to parse in FOOBAR\nint[] a = {1, 2, 3}; System.out.println(a[3]); // The system will crash and an ArrayIndexOutOfBoundsException will occur because the greatest index we have is 2, but we try to access index 3\n```\nIf there is no exception handling mechanism, when an exception happens, the system basically crashes. Therefore, we need to find a way to properly handle our exceptions, so we can handle the problem while keeping our application running.",
              "instructor_notes": ""
            },
            {
              "id": 900506,
              "key": "b8e065f3-e9e8-4815-996f-cf05f9a1b21b",
              "title": "035ND C01 L01 A16 EXCEPTION AND JAVA IO V2 (Post Launch) 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "o9yikSy7D2I",
                "china_cdn_id": "o9yikSy7D2I.mp4"
              }
            },
            {
              "id": 906279,
              "key": "64ee3380-2a65-40b0-90ec-a94643d8879c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Exception keywords:",
              "instructor_notes": ""
            },
            {
              "id": 899204,
              "key": "5b9b8b64-6f21-4c0e-9d16-1d269c923630",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d24eefb_screen-shot-2019-07-09-at-3.45.35-pm/screen-shot-2019-07-09-at-3.45.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5b9b8b64-6f21-4c0e-9d16-1d269c923630",
              "caption": "",
              "alt": "",
              "width": 1426,
              "height": 894,
              "instructor_notes": null
            },
            {
              "id": 900507,
              "key": "a77c6fcc-22a1-4518-b1e9-452f33ee756c",
              "title": "035ND C01 L01 A17 EXCEPTION AND HANDLE EXCEPTION",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aK0UlU5VI9k",
                "china_cdn_id": "aK0UlU5VI9k.mp4"
              }
            },
            {
              "id": 908201,
              "key": "a2c8ee00-4a4c-4e3a-9c4f-7f5835f8fa0c",
              "title": "Exception, Handle Exception Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a2c8ee00-4a4c-4e3a-9c4f-7f5835f8fa0c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which exception handling keyword will not actually throw the error?",
                "answers": [
                  {
                    "id": "a1565286943166",
                    "text": "throw",
                    "is_correct": false
                  },
                  {
                    "id": "a1565287065995",
                    "text": "throws",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 899127,
              "key": "19dd9e38-24f2-447c-a6a1-589667a016a3",
              "title": "Exception, Handle Exception Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "19dd9e38-24f2-447c-a6a1-589667a016a3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the built in base class to handle all exceptions in Java? Is It Exception or Throwable?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Exception",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Throwable",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 900508,
              "key": "4a95c3a5-32fe-444c-97d2-1d312c34791b",
              "title": "035ND C01 L01 A18 HOW TO HANDLE EXCEPTION CODE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GSxAgljq0go",
                "china_cdn_id": "GSxAgljq0go.mp4"
              }
            },
            {
              "id": 899205,
              "key": "dd873537-a6b4-41db-8169-33c58ea6d484",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Try to run the below code and practice catching the exception: \n\n```\npublic class JavaExceptionExample{  \n  public static void main(String args[]){  \n   try{  \n      //code that may raise exception  \n      int data=100/0;  \n   }catch(ArithmeticException e){System.out.println(e);}  \n   //rest code of the program   \n   System.out.println(\"rest of the code...\");  \n  }  \n}  \n```\n\nYou will notice that you can see the exception, but the rest of the code will keep running and the project won't crash. You can also try to add a finally block after the catch block. Finally block is not mandatory to use in all cases, however, it's very important to use if you have a resource that you want to release after catching an exception such as closing an opened file. So, in that case, the code of closing the file will be in the finally block. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 947809,
              "key": "68058d33-d013-4bb7-8419-cbdd8ee2d2f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exception and Error Types\n\nCheck the diagram below to know the different types of exceptions and errors that can occur in a program.",
              "instructor_notes": ""
            },
            {
              "id": 947810,
              "key": "063232a1-828e-44a7-8e55-4eb02eff5122",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d90e123_exceptions-and-erros/exceptions-and-erros.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/063232a1-828e-44a7-8e55-4eb02eff5122",
              "caption": "",
              "alt": "",
              "width": 1570,
              "height": 1014,
              "instructor_notes": null
            },
            {
              "id": 947811,
              "key": "244a9668-71ca-44dc-89a0-a1a7d2aa2fd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are two types of Exceptions, checked and unchecked. In java, everything under RunTimeException and Error classes is unchecked, all other exceptions are checked. A checked exception is checked during the compilation time, so the compiler won't allow you to run the code except after you handle that exception (using try and catch blocks), or you add the word \"throws\" followed by the exception name after the signature of the method that contains that checked exception. \"throws\" is used to specify what type of exception that method can throw (eg, if you write a method that opens a file, it throws FileNoteFoundException). \n\nAn unchecked exception is a one that's not checked at the compilation time so you don't need to write a code to handle it, but of course, if your code contains a logical error, it will occur at the run time and cause your program to crash. An example of this is when you try to access an index in an array that's out of bound, which will result in ArrayIndexOutOfBoundsException and will cause the app to crash. To fix the problem, you just need to fix the logical error in your code and prevent accessing out of bounds indices. \n\nFinally, the difference between errors and exceptions is that errors are problems that your program can't handle (eg, your program can't handle an OutOfMemory error, because it can't do anything about it when it occurs). However, exceptions are problems that your program can handle. ",
              "instructor_notes": ""
            },
            {
              "id": 906280,
              "key": "06701abf-11b8-4734-8e43-1aa9df10b18f",
              "title": "035ND C01 L01 A19 EXCEPTION SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3tMnWgLyqqY",
                "china_cdn_id": "3tMnWgLyqqY.mp4"
              }
            },
            {
              "id": 899206,
              "key": "20901308-dc90-4484-88ae-633c1d562b2d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# File IO\n\n### Resources:\n\nStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html\n\nFile api: https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html",
              "instructor_notes": ""
            },
            {
              "id": 900511,
              "key": "1c019a4c-c784-499b-a6ac-0f9ca6904d11",
              "title": "035ND C01 L01 A20 FILE IO, STREAMS, FILE APIS",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "We5x0AnzJsg",
                "china_cdn_id": "We5x0AnzJsg.mp4"
              }
            },
            {
              "id": 899174,
              "key": "93a554d0-7a72-483a-8545-a5ca5c142527",
              "title": "File IO, Streams, File APIs Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93a554d0-7a72-483a-8545-a5ca5c142527",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "The input/output package usually used with Java is?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "java.input",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "java.inout",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "java.io",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "java.file",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899207,
              "key": "9c960776-cd2a-47c4-9554-bfe883838ecb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Stream",
              "instructor_notes": ""
            },
            {
              "id": 900513,
              "key": "69023a49-b312-48d5-893a-6d6557299b87",
              "title": "035ND C01 L01 A21 STREAM V@ (Post Launch) 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MJoy3KtgA14",
                "china_cdn_id": "MJoy3KtgA14.mp4"
              }
            },
            {
              "id": 906281,
              "key": "397bcb89-6f10-477f-b371-28ce929ce221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# FileInputStream",
              "instructor_notes": ""
            },
            {
              "id": 899208,
              "key": "a649ea57-4917-45d7-b295-961d15b70db0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources:\n\nFileInputStream: https://docs.oracle.com/javase/8/docs/api/java/io/FileInputStream.html\n\nFileOutputStream: https://docs.oracle.com/javase/8/docs/api/?java/io/FileOutputStream.html\n\nFileReader: https://docs.oracle.com/javase/9/docs/api/?java/io/FileReader.html\n\nFileWriter: https://docs.oracle.com/javase/9/docs/api/?java/io/FileWriter.html",
              "instructor_notes": ""
            },
            {
              "id": 900515,
              "key": "e5b1bdda-292e-44eb-a8e6-5df216ae155a",
              "title": "035ND C01 L01 A22 FILE INPUT",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ScNJx0_tvps",
                "china_cdn_id": "ScNJx0_tvps.mp4"
              }
            },
            {
              "id": 899173,
              "key": "e3d97578-952b-4db1-b3bc-24e22c911b05",
              "title": "FileInputStream/FileOutputStream, FileReader/FileWriter Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e3d97578-952b-4db1-b3bc-24e22c911b05",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the name of the abstract base class for streams dealing with a general purpose (non-character) input?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "InputStream",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "OutputStream",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Reader",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Writer",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899163,
              "key": "537c92ce-6ab1-48fc-b643-444f5251aa90",
              "title": "FileReader and FileWriter Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "537c92ce-6ab1-48fc-b643-444f5251aa90",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Can a stream act as a data source for another stream?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "No. Streams must be connected directly to physical devices.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "No. Streams do not deal with data.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Yes. Some streams can be connected together.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Yes. An input stream can be connected to an output stream.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899209,
              "key": "f2fe0ba7-7ec7-49d2-8b0f-f5b29a30d38f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Buffer and BufferedReader\n",
              "instructor_notes": ""
            },
            {
              "id": 900514,
              "key": "15381260-ea7f-4861-b344-de9175ad5910",
              "title": "035ND C01 L01 A23 BUFFER V2 (Post Launch) 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qYXwOZCw0z8",
                "china_cdn_id": "qYXwOZCw0z8.mp4"
              }
            },
            {
              "id": 899210,
              "key": "1f72f9ed-cefd-4bab-baf8-0dd1c39cb5b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Resources:\n\nBufferedReader: https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html",
              "instructor_notes": ""
            },
            {
              "id": 899139,
              "key": "42756292-7ac8-4749-b9c3-8cf18dc72487",
              "title": "Buffer Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "42756292-7ac8-4749-b9c3-8cf18dc72487",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is a buffer?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A section of memory used as a staging area for input or output data.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "The cable that connects a data source to the bus.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Any stream that deals with character IO.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "A file that contains binary data.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 899180,
          "key": "ea054ec6-e431-4651-a6b3-3a9f62e0cc84",
          "title": "Java Programming Practice Exercises",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ea054ec6-e431-4651-a6b3-3a9f62e0cc84",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900516,
              "key": "29689c65-7cf2-4608-9753-f7610a7fe7ca",
              "title": "035ND C01 L01 A24 JAVA PROGRAMMING INTRO",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qTzYgQWua4w",
                "china_cdn_id": "qTzYgQWua4w.mp4"
              }
            },
            {
              "id": 899211,
              "key": "1dd8771a-ad67-49be-9216-f1baffee5869",
              "title": "Java Programming Exercise 1",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1dd8771a-ad67-49be-9216-f1baffee5869",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Great job!\nSolution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Complete find the first duplicate character in a string.\n\nComplete the following method so given a string it returns the index of the first duplicated character or -1 if there are no duplicated characters.\n\nExample1: input: abcabc, return: 3\n\nExample2: input: abcd, return: -1\n\n```\npublic static int findDuplicate(String input) {\n}\n```"
            },
            {
              "id": 899212,
              "key": "8647ffd8-55b5-4bad-a8ff-abb566313059",
              "title": "Java Programming Exercise 2",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8647ffd8-55b5-4bad-a8ff-abb566313059",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Great job!\nSolution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Complete the  “two sum” coding problem.\n\nGiven an integer array, return true if two numbers in this array can be summed to target. \n\nExample1: input[1, 2, 3, 4], target:5, return true\n\nExample2: input[1,4,5,1,6], target 12, return false\n\n```\npublic static boolean twoSum(int[] nums, int target) {\n}\n```"
            },
            {
              "id": 899213,
              "key": "b70163b7-c377-47cd-b72f-61ad7c07969b",
              "title": "Java Programming Exercise 3",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b70163b7-c377-47cd-b72f-61ad7c07969b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Great job!\nSolution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Complete the “String reverse” coding problem.\n\nWrite a function that takes a string as input and returns the string reversed.\n\nExample1: input: \"Hello World!\", return \"!dlroW olleH\"\n\nExample2: input: “abcde”, return “edcba”\n\n```\npublic static String reverseString(String s) {\n}\n```"
            },
            {
              "id": 899214,
              "key": "b93c4dd3-8b92-4e59-b9f2-a15a9a5db0d9",
              "title": "Java Programming Exercise 4",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b93c4dd3-8b92-4e59-b9f2-a15a9a5db0d9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Complete the “find top k largest numbers” in an unsorted integer array. \n\nGiven an unsorted integer array, return the top k largest numbers in a sorted list. The k is always less than array size. Make sure the time complexity is less than O(nlogn).\n\nExample 1: [-1, 15, 59, 22, 6, 42, 45, 0], k=4, return {22, 42, 45, 59}\n\nExample 2: [5, 10, 22, 100, 8], k=2, return {22, 100}"
            },
            {
              "id": 899215,
              "key": "f75e7351-4a88-4587-97b2-035033cd00cc",
              "title": "Java Programming Exercise 5",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f75e7351-4a88-4587-97b2-035033cd00cc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the exercise"
              ],
              "positive_feedback": "Solution: https://github.com/udacity/nd035-v1-C1-Java-Basics-Exercises-and-Project-Starter/tree/master/exercises",
              "video_feedback": null,
              "description": "Complete the “translate number to word” coding exercise.\n\nGiven a non-negative integer n, print the number in words.\n\nExample1: \n\nInput: 10245\n\nOutput: \"ten thousand two hundred forty five\"\n\nExample2:\n\nInput: 125\n\nOutput: \"one hundred twenty five\"\n\n```\npublic static String translateNumberToWord(int number) {\n}\n```"
            },
            {
              "id": 906539,
              "key": "7a5e46d5-9f11-47bc-917a-c89af4f9ac3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Java Programming Practice Exercises - Solutions",
              "instructor_notes": ""
            },
            {
              "id": 900517,
              "key": "46ae145a-24e3-4e40-b60e-fb8a470fbeac",
              "title": "035ND C01 L01 A25 JAVA PROGRAMMING EXERCISE",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LM8Uh5unBoA",
                "china_cdn_id": "LM8Uh5unBoA.mp4"
              }
            }
          ]
        },
        {
          "id": 906528,
          "key": "ba30dfe7-fd5f-4223-82ed-b1b6193c3d86",
          "title": "Java Refresher Course - Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba30dfe7-fd5f-4223-82ed-b1b6193c3d86",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906529,
              "key": "c180177f-8441-4428-9be3-8dc0f227d9cf",
              "title": "035ND C01 L01 A26 JAVA REFRESH SUMMARY",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iF4LOYd5ZkQ",
                "china_cdn_id": "iF4LOYd5ZkQ.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}