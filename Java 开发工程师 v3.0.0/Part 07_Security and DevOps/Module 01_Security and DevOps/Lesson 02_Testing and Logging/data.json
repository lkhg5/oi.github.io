{
  "data": {
    "lesson": {
      "id": 901068,
      "key": "85470e48-3d25-409c-877c-a88f013c6257",
      "title": "Testing and Logging",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Refresh testing fundamentals. Use logging to get insights into your code and debug your applications. Get practice with two commonly used logging utilities: SLF4J and Log4J.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/85470e48-3d25-409c-877c-a88f013c6257/901068/1581176810658/Unit+Testing+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/85470e48-3d25-409c-877c-a88f013c6257/901068/1581176803821/Unit+Testing+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1115566,
          "key": "e4b79178-6c18-4601-9886-1b49963ae862",
          "title": "Lesson Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e4b79178-6c18-4601-9886-1b49963ae862",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1115571,
              "key": "81d2e041-c714-40b7-9beb-a94558c31d54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Outline\n\nThis lesson is divided into two sections:\n\n1. **Unit testing refresher** - You must have learned about testing in the previous course(s). Since the final project will also require you to write the unit test with specified code coverage, the first half of this lesson presents a *refresher*. After completing the refresher, you will be able to:\n   * Write JUnit tests using Mockito framework\n   * Add tests in the eCommerce application\n1. **Logging** - Next, we will learn how to generate and save logs. The prime objective of this lesson is to describe SLF4J logging API and Log4J logging framework for code insight and debugging. By the end of the lesson, you will be able to:\n   * Explain the basics of Logging\n   * Use the SLF4J library (API) to implement any logging framework\n   * Implement Log4J framework in the eCommerce application\n\n\nIn the next lesson, Splunk, we will learn to analyze the logs to derive meaningful insight.",
              "instructor_notes": ""
            },
            {
              "id": 1115574,
              "key": "65348ef0-5cbe-48fc-b4b9-96ba971e7a50",
              "title": "ND035 C04 L03 A01 Logging",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Zek2MbmVtKs",
                "china_cdn_id": "Zek2MbmVtKs.mp4"
              }
            },
            {
              "id": 1115575,
              "key": "61f9a890-f8a0-46e1-a8f7-b2e38b5239a0",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "61f9a890-f8a0-46e1-a8f7-b2e38b5239a0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Suppose you have an eCommerce application and you want to find out the number of user requests per second. Is this the kind of information logging could give you?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Yes, that's a good example of logging.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "No, that is not really related to logging.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1115576,
              "key": "cb1f5e5f-5471-401a-91a9-b1d86e41fbe5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's start with the Testing refresher. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901060,
          "key": "6da17ace-768a-43b4-ad5b-17f33c53f559",
          "title": "Testing - Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6da17ace-768a-43b4-ad5b-17f33c53f559",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901003,
              "key": "46bf36d0-8e9c-463f-b776-e0b5d37fb9a7",
              "title": "Types of testing",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Types of Testing\n\nSoftware testing is broadly divided into the following types - Functional, Non-Functional, and Maintenance testing, as described below:\n\n* **Functional** testing is usually performed by the Quality and Development team and sometimes Business. Functional testing includes unit testing, integration testing, system testing, sanity testing, UAT(user acceptance testing) testing, regression, amongst others.\n\n* **Non-Functional** testing is performed by specialized testing teams. Non-functional testing includes performance testing, load testing, stress testing, security testing, reliability testing, usability testing, compliance testing, amongst others.\n\n* **Maintenance** testing is performed on already deployed softwares. It includes regression testing, and confirmation testing. The need for maintenance testing arises when a software undergoes some addition/change in functionality.",
              "instructor_notes": ""
            },
            {
              "id": 901037,
              "key": "d02b1440-af04-4036-85b0-235d19f8ccc4",
              "title": "ND035 C04 L02 A06 Types Of Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YlCVrRHDhDg",
                "china_cdn_id": "YlCVrRHDhDg.mp4"
              }
            },
            {
              "id": 969490,
              "key": "baab1ca1-ed5e-4bfb-8dbe-31fbf505422f",
              "title": "Unit Testing",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Unit Testing\n\nUnit testing is the process of testing an individual, usually small, software module or component independently to find bugs. These tests are required to be written by the developers as it requires detailed knowledge of the code.",
              "instructor_notes": ""
            },
            {
              "id": 901009,
              "key": "a73cf45c-a59f-48b3-9a13-8a8e50be2f01",
              "title": "ND035 C04 L02 A07 Unit Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CV2BCTewG28",
                "china_cdn_id": "CV2BCTewG28.mp4"
              }
            },
            {
              "id": 901073,
              "key": "d371d659-cb38-4f11-b8e7-2285b1c46bd6",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d371d659-cb38-4f11-b8e7-2285b1c46bd6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each type of functional testing with its description."
                },
                "concepts_label": "Type of testing",
                "answers_label": "Description",
                "concepts": [
                  {
                    "text": "Tests a very small piece or unit of code.",
                    "correct_answer": {
                      "id": "a1563738325971",
                      "text": "Unit"
                    }
                  },
                  {
                    "text": "Testing how projects interact with each other.",
                    "correct_answer": {
                      "id": "a1563738364866",
                      "text": "Integration"
                    }
                  },
                  {
                    "text": "Make sure the basic use case is met.",
                    "correct_answer": {
                      "id": "a1563738365548",
                      "text": "Sanity/Smoke"
                    }
                  },
                  {
                    "text": "Make sure that the software is inclusive to differently abled users.",
                    "correct_answer": {
                      "id": "a1563738366155",
                      "text": "Accessibility"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1563738364866",
                    "text": "Integration"
                  },
                  {
                    "id": "a1563738325971",
                    "text": "Unit"
                  },
                  {
                    "id": "a1563738366155",
                    "text": "Accessibility"
                  },
                  {
                    "id": "a1563738365548",
                    "text": "Sanity/Smoke"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 901062,
          "key": "951aa8ce-018d-4898-af25-241bb611ce4c",
          "title": "Testing - JUnit Practice - I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "951aa8ce-018d-4898-af25-241bb611ce4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901035,
              "key": "b9a03459-667b-4660-94a9-427f16166c62",
              "title": "Introduction to JUnits",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We'll now go through a hands-on example as a refresher to JUnit. To follow along, you can download or switch to the <a href=\"https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/2.UnitTestStarter\" target=\"_blank\">2.UnitTestStarter branch of the GitHub repository</a>.",
              "instructor_notes": ""
            },
            {
              "id": 969494,
              "key": "1513f191-b758-4eab-95fe-29ac4f748abf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<hr>\n\n## Getting Started\n\nAs per convention, we have the following two packages in our project:\n\n1. `src/main/java` - for Java classes\n1. `src/test/java` - for Unit Test classes\n\n### Annotations\n\nJUnit uses annotation **`@`** before the definition of classes and methods that designate a test. A few frequently used annotations for methods are:\n\n* `@Test` - Declares a method as a test method\n* `@Before` - Runs before each test. It prepares the necessary state of the system (e.g., read input data, initialize the other classes)\n* `@BeforeClass` - Runs once before **any** of the test methods in the class. In other words, it runs exactly once before the entire set of tests in the class.\n* `@After` - Executed after each test. It releases the resources used for the test (e.g., delete temporary data, restore defaults)\n\n### Assertions\n\nJUnit provides static methods in the **Assert** class, to test certain conditions. These assertion methods start with the word `assert`. These methods allow us to specify the error message, the expected output, and the actual output. The assertion method checks the value returned by a test to the expected value. It throws an `AssertionException` if the comparison fails. Some useful assertion methods are:\n\n* `assertTrue()` - Checks that the boolean condition is true. \n* `assertFalse()` - Checks that the boolean condition is false.\n* `assertEquals()` - Tests that two values are the same. \n* `assertEquals()` - Tests whether float or double values are identical. The tolerance is the number of decimals, which must be the same.\n* `assertNull()` - Checks that the object is null.\n\n### Failed Tests\n\nIt is essential to check our methods using the corresponding test methods. If a test fails, console output would tell what went wrong so that we may make the necessary correction. For example, a sample error would look like:\n\n```\nThere was 1 failure:\n1) evaluatesExpression(AbacusTest)\njava.lang.AssertionError: expected:<60> but was:<-60>\n  at org.junit.Assert.fail(Assert.java:23)\n```",
              "instructor_notes": ""
            },
            {
              "id": 1028886,
              "key": "fceae01f-8bbe-4d7a-bdc4-d83f9e63603c",
              "title": "Reflect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fceae01f-8bbe-4d7a-bdc4-d83f9e63603c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What does the `pom.xml` file contain?"
              },
              "answer": {
                "text": " It contains information about the project, its dependencies, and configuration details used by Maven to build the project. ",
                "video": null
              }
            },
            {
              "id": 1028872,
              "key": "a399a439-b0af-4994-baa7-c2c33a07ae10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 2. Getting familiar with the starter code",
              "instructor_notes": ""
            },
            {
              "id": 907226,
              "key": "df24adca-adf9-4848-9512-6eb5f0123160",
              "title": "Task List",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df24adca-adf9-4848-9512-6eb5f0123160",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Cloned the repo or switched the branch in the IDE. ",
                "Imported the code into IntelliJ",
                "Looked over the methods in the starter code (we'll be writing tests for them shortly)",
                "Spend at least a few moments thinking about what types of tests you might want to write"
              ],
              "positive_feedback": "Good—now we are ready to start writing some tests!",
              "video_feedback": null,
              "description": "Before going further, be sure that you've done the following:"
            },
            {
              "id": 901014,
              "key": "5f381f87-6bc6-444b-bc84-fe93ed67ca97",
              "title": "ND035 C04 L02 A08.1 Basics Of Junits-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6TdPhGKTUmM",
                "china_cdn_id": "6TdPhGKTUmM.mp4"
              }
            },
            {
              "id": 1115589,
              "key": "4243ee2a-d1b5-4a7c-a9c0-3474a1a9a895",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> **Note**: The JUnit dependency version may vary in the demo video above, and the current version available.  \n>",
              "instructor_notes": null
            },
            {
              "id": 901006,
              "key": "0d4d1384-ffb5-4f58-b426-c6c02b2c6352",
              "title": "Find the Maven Dependency",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0d4d1384-ffb5-4f58-b426-c6c02b2c6352",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I found the Maven dependency!",
                "I've added the dependency to the starter code (if you're not sure how to do this, just check out the video below)."
              ],
              "positive_feedback": "**Great!**",
              "video_feedback": null,
              "description": "Go ahead and see if you can find the Maven dependency.\n(Google is your friend!)\n\nIf you have any trouble finding it, no worries—Sareeta will show how in the next video."
            },
            {
              "id": 901069,
              "key": "8124c74b-3595-47a4-bf32-2fc74e9375f4",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 3. Add the Maven Dependency",
              "instructor_notes": ""
            },
            {
              "id": 901010,
              "key": "b716d6be-126b-49eb-b338-41f9aa841bac",
              "title": "ND035 C04 L02 A08.2 Basics Of Junits-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gc58Hm-NK_M",
                "china_cdn_id": "gc58Hm-NK_M.mp4"
              }
            },
            {
              "id": 1115598,
              "key": "2501be76-f267-4d41-8b16-3bc33dd0e9a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Solution**: You can add <a href=\"https://mvnrepository.com/artifact/org.mockito/mockito-core\" target=\"_blank\">Mockito Core</a> Maven dependency for Mockito.\n```\n<!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-core</artifactId>\n    <version>2.23.4</version>\n    <scope>test</scope>\n</dependency>\n```",
              "instructor_notes": null
            },
            {
              "id": 969492,
              "key": "c4dfbfe1-fd1d-4ab1-a048-71fe4ada9d51",
              "title": "JUnits for the helper methods",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 4. Writing JUnits for the helper methods",
              "instructor_notes": ""
            },
            {
              "id": 901045,
              "key": "fe18aa9d-e1b9-4878-84a8-d9afcbd590ee",
              "title": "ND035 C04 L02 A08.3 Basics Of Junits-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pzUEW_mJnL8",
                "china_cdn_id": "pzUEW_mJnL8.mp4"
              }
            },
            {
              "id": 901008,
              "key": "d8c4ff8d-71b4-454c-a537-cbb2c985e26c",
              "title": "Add the HelperTest class",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d8c4ff8d-71b4-454c-a537-cbb2c985e26c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add the `HelperTest` class like Sareeta showed in the video above",
                "Try some of the different `assert` methods (such as `assertEquals`)"
              ],
              "positive_feedback": "**Nice work!**",
              "video_feedback": null,
              "description": "Before you move on, be sure that you've tried the following things for yourself:"
            },
            {
              "id": 969491,
              "key": "c569d157-3b00-47dc-acfc-26037109f8f0",
              "title": "More on JUnit",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 5. Access modifier and Return type of JUnits methods",
              "instructor_notes": ""
            },
            {
              "id": 901030,
              "key": "bbd41c41-b41c-4f00-add2-0d14787e7fba",
              "title": "ND035 C04 L02 A08.4 Basics Of Junits-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "O6oUEGU1iBM",
                "china_cdn_id": "O6oUEGU1iBM.mp4"
              }
            },
            {
              "id": 901071,
              "key": "6c7797de-bdff-4720-9d54-ac1ece64f28a",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 6. Writing tests on the `Helper` class",
              "instructor_notes": ""
            },
            {
              "id": 901070,
              "key": "53bf2884-f176-469e-bd49-5b913b1520e9",
              "title": "ND035 C04 L02 A08.5 Basics Of Junits-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DJ0_RCkECwk",
                "china_cdn_id": "DJ0_RCkECwk.mp4"
              }
            },
            {
              "id": 901013,
              "key": "7804062a-e3be-45ee-83d0-13e9128ffcca",
              "title": "Write a test for the `getMergedList` method",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7804062a-e3be-45ee-83d0-13e9128ffcca",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I wrote a JUnit test (in `HelperTest`) for the `getMergedList` method"
              ],
              "positive_feedback": "**Awesome!**",
              "video_feedback": null,
              "description": "See if you can write a JUnit test (in `HelperTest`) for the `getMergedList` method. Once you've given it a shot, you can check out our example below to compare.\n\n(As always, if you run into trouble and don't quite get it working, no worries—the point is simply to practice and to learn!)"
            },
            {
              "id": 1115591,
              "key": "0272164c-b66e-4575-8e63-a832f4e6dc42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution Code\nBelow is the solution code for all of the tests. We encourage you to try out as many of these as you like and compare your code with the examples. <font color=\"green\">As always, it's possible your code might look a bit different and still accomplishes the end goal!</font>\n<div id=\"spoiler_1\" style=\"display:none\">\n\n```\n//Necessary imports\npublic class HelperTest {\n\t@Before\n\tpublic void init() {\n\t\t System.out.println(\"init executed\"); }\t \n\t@After\n\tpublic void teardown() {\n\t\t System.out.println(\"teardown executed\"); }\n\t@Test\n\tpublic void test() {\n\t\tassertEquals(\"test\", \"test1\");\t}\t\t\n\t@Test\n\tpublic void validate_getCount() {\n\t    List<String> empNames = Arrays.asList(\"sareeta\", \"\", \"john\",\"\");\n\t\tassertEquals(2, Helper.getCount(empNames));\n\t}\n\t@Test\n\tpublic void validate_3lengthString() {\n\t    List<String> empNames = Arrays.asList(\"sareeta\", \"\", \"Jeff\",\"sam\");\n\t\tassertEquals(2, Helper.getStringsOfLength3(empNames));\n\t}\n\t@Test\n\tpublic void verify_list_is_squared(){\n\t      List<Integer> yrsOfExperience = Arrays.asList(13,4,15,6,17,8,19,1,2,3);\n\t      List<Integer> expected = Arrays.asList(169, 16, 225, 36, 289, 64, 361, 1, 4, 9);\n\t      assertEquals(expected, Helper.getSquareList(yrsOfExperience));\n\t}\n\t@Test\n\tpublic void verify_merged_list(){\n\t\tList<String> empNames = Arrays.asList(\"sareeta\", \"\", \"john\",\"\");\n\t      assertEquals(\"sareeta, john\", Helper.getMergedList(empNames));\n\t}\n\t@Test\n\tpublic void verify_getMax(){\n\t      List<Integer> empLevel = Arrays.asList(3,3,3,5,7,2,2,5,7,5);\n\t      assertEquals(7, Helper.getStats(empLevel).getMax());\n\t}\n    // This method must be public and static\n\t@BeforeClass\n\tpublic static void initClass() {\n\t\t System.out.println(\"init Class executed\");\t\n\t}\t\n\t@AfterClass\n\tpublic static void teardownclass() {\n\t\t System.out.println(\"teardown Class executed\");\n\t}\n\t@Test\n\tpublic void verify_ArrayListTest(){\n\t      int[] yrsOfExperience = {13,4,15,6,17,8,19,1,2,3};\n\t      int[] expected = {13,4,15,6,17,8,19,1,2,3};\n\t      assertArrayEquals(expected, yrsOfExperience);\n\t}\n}\n```\n</div>\n<button type=\"button\" id=\"myButton1\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}if (document.getElementById('myButton1').innerHTML=='Show Solution') {document.getElementById('myButton1').innerHTML='Hide Solution';}else{document.getElementById('myButton1').innerHTML = 'Show Solution';}\">Show Solution</button>",
              "instructor_notes": ""
            },
            {
              "id": 901040,
              "key": "92e4b199-cf4f-411c-a22e-019dad5a8290",
              "title": "Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "92e4b199-cf4f-411c-a22e-019dad5a8290",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are important features of JUnit?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It is an open source framework.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Provides Annotation to identify the test methods.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Provides Assertions for testing expected results.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "JUnit shows test progress in a bar that is green if test is going fine and it turns red when a test fails.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1028873,
              "key": "715d56c1-89f7-4c8a-bca1-e3be8759d369",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "715d56c1-89f7-4c8a-bca1-e3be8759d369",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does annotations @ do in JUnit test-cases?",
                "answers": [
                  {
                    "id": "a1590676682723",
                    "text": "Designate a test to run before/after a method is called or a class is instantiated. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1590676767799",
                    "text": "Test certain conditions based on the actual and expected output.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1115596,
              "key": "07b2a05b-ddb3-4498-9437-b06f037deccc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Resource\n[Official tutorial on getting started with JUnit](https://github.com/junit-team/junit4/wiki/Getting-started)",
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 901064,
          "key": "ba6a6796-4261-4b34-a9fb-8aec154e42ba",
          "title": "Testing - JUnit Practice - II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ba6a6796-4261-4b34-a9fb-8aec154e42ba",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901038,
              "key": "f2769a8b-8631-4c89-901e-3435d3a4a841",
              "title": "ND035 C04 L02 A09.1 How To Write A Junit, Example-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VLuhu3OESuo",
                "china_cdn_id": "VLuhu3OESuo.mp4"
              }
            },
            {
              "id": 901021,
              "key": "c5b2db81-0b42-4d2a-9151-090299548fda",
              "title": "Link to junit official site",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As we just saw in the video, you can check out [this page](http://junit.sourceforge.net/javadoc/org/junit/Assert.html) for a comprehensive list of all of the methods that the JUnits `Assert` class contains.",
              "instructor_notes": ""
            },
            {
              "id": 1028879,
              "key": "4e6e9230-7254-4a81-8bab-8a028c363f9f",
              "title": "MCQ",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e6e9230-7254-4a81-8bab-8a028c363f9f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do assert methods do in a test-case?",
                "answers": [
                  {
                    "id": "a1590678286179",
                    "text": "test certain conditions based on actual and expected output.",
                    "is_correct": true
                  },
                  {
                    "id": "a1590678305758",
                    "text": "make an assumption that the test case is failed.",
                    "is_correct": false
                  },
                  {
                    "id": "a1590678316304",
                    "text": "throws an AssertionException with a custom message if the comparison fails.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 901072,
              "key": "41058ffa-4b0a-4d79-80a5-4e758d093719",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using `@Before`, `@BeforeClass`, `@After`, `@AfterClass` and `@Ignore`",
              "instructor_notes": ""
            },
            {
              "id": 901036,
              "key": "08ca86a3-f073-4d89-b78b-aebb1b2efa3a",
              "title": "ND035 C04 L02 A09.2 How To Write A Junit, Example-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DNPs_Jz9Xtg",
                "china_cdn_id": "DNPs_Jz9Xtg.mp4"
              }
            },
            {
              "id": 907189,
              "key": "e164cbf4-34ec-4d51-9868-ac2c897b9aaa",
              "title": "JUnit lifecycle test",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e164cbf4-34ec-4d51-9868-ac2c897b9aaa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Here are some Junit annotations. See if you can match each one with its purpose."
                },
                "concepts_label": "Purpose",
                "answers_label": "Annotation",
                "concepts": [
                  {
                    "text": "Runs before every test to do common, repeated setup",
                    "correct_answer": {
                      "id": "a1564801314555",
                      "text": "`@Before`"
                    }
                  },
                  {
                    "text": "Runs once, before all tests, to do common, needed-only-once setup",
                    "correct_answer": {
                      "id": "a1564801377027",
                      "text": "`@BeforeClass`"
                    }
                  },
                  {
                    "text": "Runs after every test to do common, repeated teardown",
                    "correct_answer": {
                      "id": "a1564801397469",
                      "text": "`@After`"
                    }
                  },
                  {
                    "text": "Runs once, after all tests, to do common, needed-only-once teardown",
                    "correct_answer": {
                      "id": "a1564801402262",
                      "text": "`@AfterClass`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1564801314555",
                    "text": "`@Before`"
                  },
                  {
                    "id": "a1564801377027",
                    "text": "`@BeforeClass`"
                  },
                  {
                    "id": "a1564801397469",
                    "text": "`@After`"
                  },
                  {
                    "id": "a1564801402262",
                    "text": "`@AfterClass`"
                  }
                ]
              }
            },
            {
              "id": 901033,
              "key": "8826257d-da17-4594-8684-ee650503cba4",
              "title": "Parameterized tests heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Parameterized tests",
              "instructor_notes": ""
            },
            {
              "id": 901020,
              "key": "e193939e-de30-4e84-8806-a77833f85ed5",
              "title": "ND035 C04 L02 A09.3 How To Write A Junit, Example-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WyJcPLMcOOU",
                "china_cdn_id": "WyJcPLMcOOU.mp4"
              }
            },
            {
              "id": 1115579,
              "key": "45161226-8c8e-4dfc-95db-45e55a2774c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution\n\nThe complete code followed in the video above is available in the <a href=\"https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/3.UnitTestSolution\" target=\"_blank\">3.UnitTestSolution </a> branch of the Github repository.",
              "instructor_notes": ""
            },
            {
              "id": 907190,
              "key": "fd05e8b7-014d-482d-8e72-e12987c374d4",
              "title": "Parameterized Test Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fd05e8b7-014d-482d-8e72-e12987c374d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Parameterized Tests allow you to do what?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Ignore test failures",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Display how much of your code was tested",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Run the same test with different parameters",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Ignore certain tests",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 901052,
              "key": "d8cddb89-7d57-4382-9598-aa040ee757ac",
              "title": "Annotations from JUnits suites heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `@RunWith` and `@SelectClasses` annotations from JUnit5 suite",
              "instructor_notes": ""
            },
            {
              "id": 901048,
              "key": "f53389c3-c059-4d8c-a419-aff98d7c55d9",
              "title": "ND035 C04 L02 A09.4 How To Write A Junit, Example-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "H6_SHLZjwPw",
                "china_cdn_id": "H6_SHLZjwPw.mp4"
              }
            },
            {
              "id": 1028875,
              "key": "081ba162-1c81-483e-9ddf-c3808529eee2",
              "title": "Reflect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "081ba162-1c81-483e-9ddf-c3808529eee2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Refer - [JUnit 5 Documentation](https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations), and name three more annotations (@) which we have not discussed above. "
              },
              "answer": {
                "text": "@Disabled @DisplayName @Tag",
                "video": null
              }
            },
            {
              "id": 1115597,
              "key": "15617bed-24a9-4426-8e72-16e5fae19fe4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Resource\n\n[Official tutorial on Parameterized tests](https://github.com/junit-team/junit4/wiki/Parameterized-tests)",
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 901065,
          "key": "8b9da78c-a449-411b-ad4d-d1e89f2c6ca9",
          "title": "Testing - Code Coverage",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8b9da78c-a449-411b-ad4d-d1e89f2c6ca9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901046,
              "key": "1d95c231-ee20-446b-9696-4de9c1f4fb15",
              "title": "Code Coverage",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Code Coverage\n\n**Code coverage** is a measure used to find the degree to which the source code of a program is executed when the tests for that program are run. In other words, if running the tests results in 80% of the program's code being executed, then we would say that we have achieved 80% code coverage.",
              "instructor_notes": ""
            },
            {
              "id": 901043,
              "key": "605de48f-ecdf-4fd7-9843-6a6a27da7c1e",
              "title": "ND035 C04 L02 A10 Code Coverage",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "L6GMayyvBNU",
                "china_cdn_id": "L6GMayyvBNU.mp4"
              }
            },
            {
              "id": 901042,
              "key": "4ad7881c-4acf-4343-a3b3-b787f4cceec9",
              "title": "Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ad7881c-4acf-4343-a3b3-b787f4cceec9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is **code coverage**?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Code coverage is the percentage of code that is run by automated tests.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Code coverage is the percentage of code that is not run by automated tests.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Code coverage is the percentage of code that is actively used during the running of the program.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 901031,
              "key": "67a26c32-02f3-48de-b903-9ead0b57d1a4",
              "title": "Quiz 3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "67a26c32-02f3-48de-b903-9ead0b57d1a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is a typical code coverage percentage that a developer should aim for?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "10%",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "0%",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "80%",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "100%",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 907271,
              "key": "188dae30-cb5e-4480-89fc-278bff663fc0",
              "title": "Task List",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "188dae30-cb5e-4480-89fc-278bff663fc0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Run the test methods you've written so far in a particular class (one that has code coverage) and make sure you can identify the % coverage for that code"
              ],
              "positive_feedback": "Great!\n\nIf your code coverage is above 60-80% by this point, you're doing great! \nIf not, you'll want to think about how you can get it higher.",
              "video_feedback": null,
              "description": "It's important to know how to use your IDE to find the code coverage of your tests. So before going further, take a few minutes and see if you can do that."
            }
          ]
        },
        {
          "id": 901066,
          "key": "bc54ef52-2e89-4105-9e58-4c8d7179e9f7",
          "title": "Testing - Mockito",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc54ef52-2e89-4105-9e58-4c8d7179e9f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1115567,
              "key": "0627ec69-423b-4b97-892d-23003e7a1c00",
              "title": "Mocks",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Mocks\n\nSometimes it is impossible or undesirable to directly work with a particular object, such as if that object is unavailable or impractical to work with. But we may still want to test our code to see how it works with that object. In such cases, we can create a **mock object** (or **mock**) that simulates the real object in specific, controlled ways—and then test our code using this simulated object. In this section, we'll explore how to create such mocks using a framework called **Mockito**.",
              "instructor_notes": ""
            },
            {
              "id": 1115568,
              "key": "1529c279-8abf-4b8e-91a7-e2144e585c81",
              "title": "ND035 C04 L02 A11 Mockito",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "14Okwxla5l8",
                "china_cdn_id": "14Okwxla5l8.mp4"
              }
            },
            {
              "id": 1115569,
              "key": "f2c1f765-4345-40a0-91ff-c7985f5b461c",
              "title": "Mocking Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f2c1f765-4345-40a0-91ff-c7985f5b461c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "True or False: In unit testing, a **Mock** object (or a method) substitutes an actual instance (or an implementation). ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "True",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 901041,
              "key": "d4b0cbeb-5228-40ea-b1c6-ae034f275947",
              "title": "Mockito",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Mockito\n\nLet's look at how we can create mocks using <a href=\"https://site.mockito.org/\" target=\"_blank\">**Mockito**</a>, mocking framework for unit tests in Java.\n\nIn this next video, we'll walk through building some mocks for the eCommerce application. You likely cloned the repository for this earlier in the course, but if you need it, you can find it <a href=\"https://github.com/udacity/JDND/tree/master/projects/P04-eCommerce%20Application/starter_code\" target=\"_blank\">here</a>.",
              "instructor_notes": ""
            },
            {
              "id": 901075,
              "key": "3df341c4-29e7-40eb-9d32-a10c931775a2",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Writing `TestUtils`",
              "instructor_notes": ""
            },
            {
              "id": 901034,
              "key": "e62beb54-5aa7-4701-9e85-f56e2c5a93b0",
              "title": "ND035 C04 L02 A12.1 Mockito Example",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UPFUQOdm8zY",
                "china_cdn_id": "UPFUQOdm8zY.mp4"
              }
            },
            {
              "id": 901074,
              "key": "95fbd7a4-ef3d-4652-a578-badfb009a129",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n### Few important methods and annotations provided by Mockito are:\n* [`mock()`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#mock-java.lang.Class-)/[`@Mock`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mock.html) - To create mock object. Here, `mock()` is an overloaded static method which accepts `Class<T> classToMock` as an argument and correspondingly returns a mock instance. \n\n* [`when()`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#when-T-)/[`given()`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/BDDMockito.html#given-T-) - To specify the behaviour of mock object. `when()` method takes a particular method **X** as argument and set the expected (mocked) return value as **Y**. Following are the few examples:  \n```\nwhen(mock.someMethod()).thenReturn(200); \n//parameterized methods as argument\nwhen(mock.someMethod(anyString())).thenReturn(200); \n//throw an exception \nwhen(mock.someMethod(\"some argument\")).thenThrow(new RuntimeException());\n```\n* [`spy()`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#spy-T-)/ [`@Spy`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Spy.html) - It is used for partial mocking. It means that the real methods are invoked but still can be verified and stubbed.\n* There are few more methods and annotations available, such as [`@InjectMocks`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/InjectMocks.html), [`verify()`](http://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#verify-T-)\n\nNote that if a project contains private methods to test, then we can't use Mockito as it does not mock private methods. Mockito assumes that private methods don't exist from the viewpoint of testing. \n\nThere are few other mocking frameworks available for Java, such as [JMock](http://www.jmock.org/), [EasyMock](http://easymock.org/), and [Powermock](https://powermock.github.io/). It is a matter of choice of the developer based on preferences such as Powermock can even mock private methods. \n\n\n## Writing the `UserController` class",
              "instructor_notes": ""
            },
            {
              "id": 901039,
              "key": "e2b8d4a5-e701-4590-b5f4-e71f05d42f42",
              "title": "ND035 C04 L02 A12.2 Mockito Example V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QPDYREKOwR4",
                "china_cdn_id": "QPDYREKOwR4.mp4"
              }
            },
            {
              "id": 901050,
              "key": "32e36950-e9a3-47fc-892a-22fc6dbf9b4e",
              "title": "Mockito Example",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32e36950-e9a3-47fc-892a-22fc6dbf9b4e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Add `TestUtils`",
                "Add `UserController`",
                "Increased the test coverage percent (remember you're shooting for 80% here!)"
              ],
              "positive_feedback": "Again, having done these things now means you'll be in great shape when you get to the final project!",
              "video_feedback": null,
              "description": "Before moving on, make sure that you've done the following in the eCommerce application:"
            }
          ]
        },
        {
          "id": 901067,
          "key": "a17d521a-1b15-4835-9cbf-328d3c50315d",
          "title": "Testing - Best Practices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a17d521a-1b15-4835-9cbf-328d3c50315d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901053,
              "key": "b4802edf-4739-4589-af60-943d78afeae2",
              "title": "Best practices heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Unit Testing Best Practices",
              "instructor_notes": ""
            },
            {
              "id": 901056,
              "key": "cacc4472-e39f-4243-8981-9c92e3f5e73c",
              "title": "ND035 C04 L02 A13 Best Practices",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7jAekgd00PM",
                "china_cdn_id": "7jAekgd00PM.mp4"
              }
            },
            {
              "id": 907330,
              "key": "cd82ff39-a5f3-460a-a1db-73fbb78ef3e9",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Further reading",
              "instructor_notes": ""
            },
            {
              "id": 901057,
              "key": "af82fe61-b007-4f79-a84b-1ab1b95119fe",
              "title": "ND035 C04 L02 A14 Further Reading",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mSXHlyKXlno",
                "china_cdn_id": "mSXHlyKXlno.mp4"
              }
            },
            {
              "id": 901044,
              "key": "f261fa46-d534-443d-8500-42af93ac9bf9",
              "title": "Topics to explore",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here are the topics mentioned in the above video, which you may want to consider diving into when you have time:\n\n* <a href=\"https://junit.org/junit4/javadoc/4.12/org/junit/rules/ExpectedException.html\" target=\"_blank\">Exceptions</a>\n* <a href=\"https://stormpath.com/blog/7-tips-writing-unit-tests-java\" target=\"_blank\">Writing Great Unit Tests</a>\n* <a href=\"https://www.vogella.com/tutorials/Mockito/article.html\" target=\"_blank\">Advanced Mockito</a>\n* <a href=\"https://powermock.github.io/\" target=\"_blank\">PowerMock</a>\n* <a href=\"https://testng.org/doc/\" target=\"_blank\">TestNg</a>",
              "instructor_notes": ""
            },
            {
              "id": 907192,
              "key": "7824599d-163e-424e-9809-0834de37ec22",
              "title": "Checkbox Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7824599d-163e-424e-9809-0834de37ec22",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are best practices for testing",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Keep unit tests minimal, only test 1 unit at a time",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Don't test configuration",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Mock external services",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Only assert what you need to",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 907273,
              "key": "df76de37-ab64-47ad-b94f-b210e69d3679",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "df76de37-ab64-47ad-b94f-b210e69d3679",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What's the difference between a \"defect\" and a \"failure\" in software testing?\n\n",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "When an issue reaches the end customer, it is called a failure; when it is identified and resolved internally, it is referred to as a defect.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "They mean the same thing.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "When an issue reaches the end customer, it is called a defect; when it is identified and resolved internally, it is referred to as a failure.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 901091,
          "key": "faf30e87-163e-4c06-8f5c-f6ed8539549b",
          "title": "Logging - SLF4J and Log4J",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "faf30e87-163e-4c06-8f5c-f6ed8539549b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901083,
              "key": "443ac6ea-2ebf-40aa-b51c-df82c0a75725",
              "title": "SLF4J and Log4j",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# SLF4J and Log4j\nSimple Logging Facade for Java (SLF4J) is an API that can be used as an abstraction layer for several logging frameworks. Examples include **java.util.logging**, **logback** and **Log4j**. It is one of the best practices to use SLF4J in enterprise application development. SLF4J in combination with any logging framework provides a complete logging solution. We have chosen Log4j as our preferred logging framework.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 901076,
              "key": "9c2633ac-1a5f-44eb-ab83-acae53c7ef44",
              "title": "ND035 C04 L03 A02 SLF4J Or Log4j",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SyLVZsE3_UQ",
                "china_cdn_id": "SyLVZsE3_UQ.mp4"
              }
            },
            {
              "id": 969497,
              "key": "a96c435d-18e1-4ac9-b92c-050edbc045a9",
              "title": "SLF4J",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## SLF4J\n",
              "instructor_notes": ""
            },
            {
              "id": 901087,
              "key": "5ad203cb-5ef5-4ef3-8c1d-bf1680b0f265",
              "title": "ND035 C04 L03 A03 SLF4J",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ksA0EZpwSZU",
                "china_cdn_id": "ksA0EZpwSZU.mp4"
              }
            },
            {
              "id": 969496,
              "key": "65c7c648-309d-4cbd-8cba-3d34e32dac0e",
              "title": "SLF4J",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "SLF4J allows the end-user to plug-in the desired logging framework at deployment time.  Using SLF4J is particularly useful for enterprise applications because individual embedded components have different logging requirements. In addition, SLF4J API is backward compatible and easy to implement. For stand-alone applications, we may invoke the logging framework of our choice directly.\n\n### SLF4J-Log4J Dependency\n\nFor Log4j v2, we would need to include the **SLF4J-Log4j binding** Maven dependency into `pom.xml` as:\n\n```\n<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n```\n\nYou can find this SLF4J-Log4j Maven dependency <a href=\"https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12\" target=\"_blank\">here</a>. \n\n> Note: The version of the dependency above may change over time.   \n>",
              "instructor_notes": ""
            },
            {
              "id": 901080,
              "key": "6a94a024-6717-4e6c-8b3a-39b70b17caf3",
              "title": "SLF4J manual",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6a94a024-6717-4e6c-8b3a-39b70b17caf3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I've opened the link and bookmark the page (and maybe read a little bit too!)."
              ],
              "positive_feedback": "**Good!**\n\nIf you set aside the time to read through the manual, you will know more than many (perhaps most) developers!",
              "video_feedback": null,
              "description": "You can check out the SLF4J manual [here](https://www.slf4j.org/manual.html) and Log4j manual [here](https://logging.apache.org/log4j/2.0/manual/index.html). If you don't want to read it now, then we suggest you still have a quick look and bookmark it for later reference!"
            }
          ]
        },
        {
          "id": 901089,
          "key": "81ef6c3c-9f00-441b-aedd-5cd71d4e88a6",
          "title": "Logging - Log Levels",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "81ef6c3c-9f00-441b-aedd-5cd71d4e88a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901081,
              "key": "9e55c879-0f3c-4554-a84d-411d4c0e242e",
              "title": "ND035 C04 L03 A04 Log Levels",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ji9CeW7trDE",
                "china_cdn_id": "Ji9CeW7trDE.mp4"
              }
            },
            {
              "id": 969498,
              "key": "aa0e31dc-ce28-45e9-9a8f-eed290fdb825",
              "title": "Log Levels",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Log4J is most often used to create an instance of the Logger interface from the LogManager and then call the methods on this interface. Assume there is a `MyClass.java`, inside which we need to create an instance of `Logger` interface by using either of the following ways: \n\n```\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n// Inside the class\npublic static final Logger log = LogManager.getLogger(MyClass.class) \npublic static final Logger log = LoggerFactory.getLogger(MyClass.class)\n```\n\nThen, we can use any of the in-built log-levels in any method of `MyClass.java`, as follows:\n\n```\n// ...\n log.trace(\"the built-in TRACE level\");\n log.debug(\"the built-in DEBUG level\");\n log.notice(\"a custom level: a NOTICE message\");\n log.info(\"the built-in INFO level\");\n log.warn(\"the built-in WARN level\");\n log.error(\"the built-in ERROR level\");\n log.fatal(\"the built-in FATAL level\");\n // ...\n```\n\nFollowing are the in-built log-levels in *highest* to the* lowest* order of logging:\n\n<div class=\"index-module--table-responsive--1zG6k\"><table class=\"index-module--table--8j68C index-module--table-striped--3HHC-\">\n<thead>\n<tr>\n<th><strong>Log-Level</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Trace</td>\n<td>Logs the fine-grained information. This is a high (most detailed) level of logging. </td>\n</tr>\n<tr>\n<td>Debug</td>\n<td>Logs the information necessary for debugging. </td>\n</tr>\n<tr>\n<td>Info</td>\n<td>Used for logging the status messages or any desirable field value</td>\n</tr>\n<tr>\n<td>Warn</td>\n<td>Used for logging potentially unexpected/dangerous situations</td>\n</tr>\n<tr>\n<td>Error</td>\n<td>Used for logging Exception and minor Error events</td>\n</tr>\n<tr>\n<td>Fatal</td>\n<td>Used for logging very severe Error events that might lead the application to collapse.</td>\n</tr>\n</tbody>\n</table>\n</div>\n\nWe can define custom log-levels as well. The guide to defining custom log-levels is available <a href=\"https://logging.apache.org/log4j/2.x/manual/customloglevels.html\" target=\"_blank\">here</a>.",
              "instructor_notes": ""
            },
            {
              "id": 907194,
              "key": "e572cfa7-50cb-4d4b-bf4c-a55f55a47b7b",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e572cfa7-50cb-4d4b-bf4c-a55f55a47b7b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the log levels with their description:"
                },
                "concepts_label": "Description",
                "answers_label": "Log level",
                "concepts": [
                  {
                    "text": "The \"lowest\" level, for logging incredibly detailed statistics and other detailed information",
                    "correct_answer": {
                      "id": "a1564802655049",
                      "text": "Debug"
                    }
                  },
                  {
                    "text": "For logging standard, non-error information",
                    "correct_answer": {
                      "id": "a1564802795464",
                      "text": "Info"
                    }
                  },
                  {
                    "text": "For logging non-fatal errors that can maybe be recovered from",
                    "correct_answer": {
                      "id": "a1564802827371",
                      "text": "Warn"
                    }
                  },
                  {
                    "text": "For logging fatal errors that are unrecoverable",
                    "correct_answer": {
                      "id": "a1564802856654",
                      "text": "Error"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1564802795464",
                    "text": "Info"
                  },
                  {
                    "id": "a1564802856654",
                    "text": "Error"
                  },
                  {
                    "id": "a1564802827371",
                    "text": "Warn"
                  },
                  {
                    "id": "a1564802655049",
                    "text": "Debug"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 901090,
          "key": "f704137c-ed9a-4967-b160-8c8a19653bad",
          "title": "Logging - Log4J Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f704137c-ed9a-4967-b160-8c8a19653bad",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901085,
              "key": "f70cb914-cbdd-4bb6-bff7-656766e8d33a",
              "title": "Trying out Log4J heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Log4J Example",
              "instructor_notes": ""
            },
            {
              "id": 901077,
              "key": "11ba1e3e-681e-4c76-a7f2-718ece1a7acb",
              "title": "ND035 C04 L03 A05 Example Of Use Of Log4j",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OVZuylA3zAE",
                "china_cdn_id": "OVZuylA3zAE.mp4"
              }
            },
            {
              "id": 1115580,
              "key": "6b899210-e72c-4933-aadc-794d1478ab32",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can continue with the <a href=\"https://github.com/udacity/nd035-c4-Security-and-DevOps/tree/1.Auth\" target=\"_blank\">1.Auth branch of the Github repo</a>, and make changes as shown in the video above.",
              "instructor_notes": null
            },
            {
              "id": 901079,
              "key": "d5b3a99b-0e07-4f8a-bf2f-1b2963e98415",
              "title": "Trying out log4J",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5b3a99b-0e07-4f8a-bf2f-1b2963e98415",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Identified where you need to add logs and why",
                "Added info logs in the project",
                "Identified and added debug logs in the project"
              ],
              "positive_feedback": "**Nice work!**",
              "video_feedback": null,
              "description": "Before moving on, be sure that you've tried out using log4J for yourself. In particular, be sure that you have:"
            },
            {
              "id": 901078,
              "key": "e2542493-b017-4617-b601-0142c241012d",
              "title": "Quiz 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e2542493-b017-4617-b601-0142c241012d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why is logging important?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It’s needed to understand how your application behaves in a production environment, and to be able to debug any issues.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "To tell the user what happened.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "To send emails.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "To display test results.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 969495,
              "key": "3fd759fb-74b9-47cb-95a6-438d50ec28c1",
              "title": "Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Conclusion\n\nIf you have been following along, you should be able to:\n\n* Explain the basics of Logging\n* Differentiate between the SLF4J library (API) and Log4J framework\n* Implement Log4J in the eCommerce application",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}