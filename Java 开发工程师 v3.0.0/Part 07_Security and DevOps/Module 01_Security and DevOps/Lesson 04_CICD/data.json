{
  "data": {
    "lesson": {
      "id": 901176,
      "key": "be661539-ef2d-4b69-beb4-e5f2bcba1aa6",
      "title": "CI/CD",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "You’ll learn about various CI/CD tools including git, docker, Jenkins, and more and how to use them to setup a pipeline on an AWS instance.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/be661539-ef2d-4b69-beb4-e5f2bcba1aa6/901176/1565040047270/CI/CD+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/be661539-ef2d-4b69-beb4-e5f2bcba1aa6/901176/1565040043684/CI/CD+Subtitles.zip"
          },
          {
            "name": "AWS Best Practices Guide",
            "uri": "https://video.udacity-data.com/topher/2020/December/5fd9abbd_aws-best-practices-guide/aws-best-practices-guide.pdf"
          },
          {
            "name": "sample.html",
            "uri": "https://video.udacity-data.com/topher/2021/February/60240f3d_sample/sample.html"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1133600,
          "key": "4bd30e2a-9555-4899-b523-7458fd5b679c",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4bd30e2a-9555-4899-b523-7458fd5b679c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1133607,
              "key": "4c178169-2d3f-4628-aece-81338058c360",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overview\nIn this lesson, you will deploy your application in a container. For now, consider a *container* as an isolated computing environment in a given machine. In our case, this container will be running inside a virtual machine on the cloud, called EC2 instance. Next, we will learn to \"connect\" our code residing in a Github repository to the container with Jenkins's help. This \"connection\" is called CI/CD pipeline. The diagram below shows the overarching theme of the current lesson. ",
              "instructor_notes": ""
            },
            {
              "id": 1133601,
              "key": "bfd10094-5972-4cea-9541-37c1e3807b41",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60239d17_copy-of-ci-cd-pipeline/copy-of-ci-cd-pipeline.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bfd10094-5972-4cea-9541-37c1e3807b41",
              "caption": "Overarching system diagram",
              "alt": "",
              "width": 700,
              "height": 276,
              "instructor_notes": null
            },
            {
              "id": 1133608,
              "key": "80cc24d8-59f9-4e55-849a-749a3eed3816",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Outline",
              "instructor_notes": ""
            },
            {
              "id": 1133604,
              "key": "aaf8b063-bdb1-40bb-ba26-5cb9f566870b",
              "title": "ND035 C04 L05 A01 Definition Of CI-CD V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7xIcv9ORvWs",
                "china_cdn_id": "7xIcv9ORvWs.mp4"
              }
            },
            {
              "id": 1133603,
              "key": "e1c543ae-2d2f-4310-8512-3423bec995e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\nIn this lesson, you will learn the various technologies that aid with the process of Continuous Integration / Continuous Delivery (CI/CD). By the end of the lesson, you will be able to:\n\n* Create a Git repository in GitHub, and run a few basic commands\n\n\n* Introduce the Docker, Container, and Images \n\n\n* Create and connect to the EC2 instances on AWS, \n\n\n* Configure the Jenkins console to automate the CI/CD pipeline\n\nThe first few pages of this lesson will make you familiar with the necessary third party tools/softwares, such as Github, AWS, Docker, and Jenkins. All these concepts play an essential role in the different phases of CI/CD pipeline. <font color=\"red\"> Bear with us for learning these tools from their official documentation, though we will demonstrate the usage in our videos. </font>\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901171,
          "key": "5157a6ec-f002-42af-9a69-61b7566fb39f",
          "title": "CI/CD",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5157a6ec-f002-42af-9a69-61b7566fb39f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 969648,
              "key": "4d9ca775-e755-4ec5-9892-147545f93023",
              "title": "What is DevOps",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "CI/CD is part of a larger set of IT practices, called DevOps. \n\n## What is DevOps?\n\nDevOps is the combination of industry best practices, and set of tools that improves an organization’s ability to:\n\n* Increase the speed of software delivery\n* Increases the speed of software evolution\n* Have better reliability of the software\n* Have scalability using automation,\n* Improved collaboration among teams. \n\n**In other words, these tools enable a company to showcase industry best practices in software development.**\n\nIn the DevOps model, development and operations teams are merged into a single team. These DevOps teams use a few tools and best practices to accomplish their goals efficiently. Some of these best practices are:\n\n* **Continuous Integration / Continuous Delivery (CI/CD)**\n* Microservices\n* Infrastructure as Code (IaaC) - Configuration Management and Policy as a Code\n* Monitoring and Logging\n* Communication and Collaboration",
              "instructor_notes": ""
            },
            {
              "id": 1029108,
              "key": "19187793-8851-4470-a42f-c65163839fa1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What is CI/CD?\n**CI/CD** stands for **Continuous Integration/Continuous Delivery **, and it is essentially a consistent and automated way for a DevOps team to build, package, and test applications.\n\n* **Continuous Integration** means newly developed code changes of a project are regularly built, tested, and merged to a shared repository like git.\n\n* **Continuous Delivery** is the process of automating the release of the merged and validated code to a repository and finally release a production-ready build to the production environment.\n\nAs shown in the figure below, CI/CD Pipeline implementation is the backbone of the modern DevOps environment. It bridges the gap between development and operations teams by automating the building, testing, and deployment of applications. \n",
              "instructor_notes": ""
            },
            {
              "id": 969647,
              "key": "7423db13-d543-4211-b687-e952b4ea7448",
              "title": "DevOps model",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0cff4_images/images.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7423db13-d543-4211-b687-e952b4ea7448",
              "caption": "A CI/CD Pipeline under DevOps model to show quick delivery and evolution of software",
              "alt": "DevOps model to show quick delivery and evolution of software",
              "width": 716,
              "height": 213,
              "instructor_notes": null
            },
            {
              "id": 901190,
              "key": "4c60fd98-0303-41ea-9f1d-480df71d9ddb",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c60fd98-0303-41ea-9f1d-480df71d9ddb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does CI/CD help us achieve?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "CI/CD helps us deploy changes into production as quickly as possible while minimizing risks in software quality assurance and compliance.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "CI/CD helps erase logs",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "CI/CD helps us to write tests",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 901173,
          "key": "56b11e9f-e047-4e48-b0ac-e19d3e16ac72",
          "title": "Git",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "56b11e9f-e047-4e48-b0ac-e19d3e16ac72",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907241,
              "key": "cda21da2-176e-4e73-98a2-f9ccdf642eb4",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Git\n\nGit is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.",
              "instructor_notes": ""
            },
            {
              "id": 901158,
              "key": "7f8a8b1f-d010-4fb3-9ae5-29bc4d88a0ed",
              "title": "ND035 C04 L05 A02.1 Why Git V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "j4v7SkHFlko",
                "china_cdn_id": "j4v7SkHFlko.mp4"
              }
            },
            {
              "id": 901156,
              "key": "6e0ceb87-cf0a-4c05-96f9-06937d8ecdf1",
              "title": "Link to Git courses",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this course, we assume that you're already pretty familiar with both Git and GitHub, but if you feel shaky on these skills (or just want to learn more), you can check out this free course:\n* [Version Control with Git](https://www.udacity.com/course/version-control-with-git--ud123)\n\n\n## Git Branching",
              "instructor_notes": ""
            },
            {
              "id": 901155,
              "key": "aad53e27-8f7b-4010-a17f-4716d8c06035",
              "title": "ND035 C04 L05 A02.2 Why Git",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kYiI4sTGyUw",
                "china_cdn_id": "kYiI4sTGyUw.mp4"
              }
            },
            {
              "id": 901164,
              "key": "857bdd7a-fc8d-4bc8-b5cb-e1b6aae0d635",
              "title": "Quiz 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "857bdd7a-fc8d-4bc8-b5cb-e1b6aae0d635",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What’s the current most-popular version control tool?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Git",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "SVN",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "CVS",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Bazzar",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1133609,
              "key": "7b5a0cf6-d70b-42ab-9638-48aa45c0d248",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ToDo Exercise\n1. If you haven't done it already, fork the [Udacity project repository](https://github.com/udacity/nd035-c4-Security-and-DevOps) to your Github account. The forked one will now become the **remote repository** for you. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1133612,
              "key": "9f31d889-3a25-4567-89e0-f36e713bcbf1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023aa2e_screenshot-2021-02-10-at-3.08.04-pm/screenshot-2021-02-10-at-3.08.04-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9f31d889-3a25-4567-89e0-f36e713bcbf1",
              "caption": "Fork the project repository",
              "alt": "",
              "width": 700,
              "height": 678,
              "instructor_notes": null
            },
            {
              "id": 1133611,
              "key": "4e02068f-8647-462a-8831-385edacdb4dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n2. Clone the remote repository to your local machine using terminal (Mac/Linux)/Gitbash(Windows). You will require to download [Git](https://git-scm.com/downloads) before running the following commands :\n```\ngit clone https://github.com/<YourGithubUserName>/nd035-c4-Security-and-DevOps.git\ncd nd035-c4-Security-and-DevOps\n```\nAlternatively, you can clone it directly into your IntelliJ IDE. \n",
              "instructor_notes": ""
            },
            {
              "id": 1133613,
              "key": "af8e7521-c028-4e6a-83b0-b66aa30d2362",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023aa49_screenshot-2021-02-10-at-3.08.31-pm/screenshot-2021-02-10-at-3.08.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/af8e7521-c028-4e6a-83b0-b66aa30d2362",
              "caption": "Clone the forked repository, now called \"remote\" for you.",
              "alt": "",
              "width": 700,
              "height": 1322,
              "instructor_notes": null
            },
            {
              "id": 1133614,
              "key": "ef22f68c-81c4-46c3-8100-e798106b633b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023aa98_screenshot-2021-02-10-at-3.07.03-pm/screenshot-2021-02-10-at-3.07.03-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ef22f68c-81c4-46c3-8100-e798106b633b",
              "caption": "Alternatively, clone the forked repository directly into your IntelliJ IDE",
              "alt": "",
              "width": 600,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 1133610,
              "key": "b0c39ee8-6032-41f9-8a68-7063e7e20460",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. Make any changes in the repository, and push the changes back to the remote repository. \n**Optional**: If you were doing the changes in a text editor, such as Visual Studio Code, you could use the following commands to push the changes back to the remote. \n```bash\n# Verify the remote. The default name of remote is \"origin\"\ngit remote -v\n# Open the code in IntelliJ or any editor. \n# Make any change, as small as adding one comment to your code\n# Add the changes to the \"staging\" area: New, Modified, and Deleted files\ngit add -A \n# Commit your changes with a message to the reader of your repo\ngit commit -m \"my comment\"\n# Push all changes back to the remote\ngit push\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901174,
          "key": "7adfc17c-3f5d-4a42-933e-6568953c328e",
          "title": "AWS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7adfc17c-3f5d-4a42-933e-6568953c328e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029105,
              "key": "6386d963-e4df-4e30-b200-9bfbbe5bdf3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Amazon Web Services (AWS) - Introduction\n>We recommend deploying your code on cloud infrastructure for our eCommerce application because cloud infrastructure (servers, storage, networks, supporting applications, and services) is auto-scalable, accessible broadly, and measurable for \"charge-per-use\" basis.\n\nAmazon Web Services (AWS) is a cloud service provider. At this point, we may think of a \"cloud\" as a geographically distributed set of data centers that host different Virtual Machines (VMs) from different users. AWS has categorized the entire world into several geographical regions. Each region has many availability zones, which in turn, comprises one or more data centers. Each data center has hundreds of servers, each of which hosts thousands of VMs dynamically.",
              "instructor_notes": ""
            },
            {
              "id": 901185,
              "key": "7b576576-c691-45a8-a6a5-4342a7a4fdcd",
              "title": "ND035 C04 L05 A04 Why AWS ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3PK5Nv4Fe5w",
                "china_cdn_id": "3PK5Nv4Fe5w.mp4"
              }
            },
            {
              "id": 907197,
              "key": "fe2d7197-44a2-439d-91b7-3ad6d68b6e89",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fe2d7197-44a2-439d-91b7-3ad6d68b6e89",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is AWS a **”perfect”** solution to deploy any enterprise application on cloud?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1029113,
              "key": "7d2a419d-e56f-4fc2-92a7-459014a8ca4e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## AWS Setup Instructions \n### Create an AWS Account\nOpen a free-tier AWS account (if you don't already have one) following the instructions via the [Amazon Web Service Help Center](https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/)\n\n\n### Launch, and Connect to your Elastic Compute Cloud (EC2) Instance\nEC2 instances are the virtual machines (VMs) with user-defined configuration. On the next page, you will learn to launch a sample EC2 instance by following the instruction given in the [official documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance). ",
              "instructor_notes": ""
            },
            {
              "id": 1029142,
              "key": "07f34bbd-177b-44e3-8f0d-1492d88702c1",
              "title": "Reflect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "07f34bbd-177b-44e3-8f0d-1492d88702c1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What is an Amazon Machine Image?"
              },
              "answer": {
                "text": "An AMI is a template that contains the software configuration (operating system, application server, and applications) required to launch your instance.",
                "video": null
              }
            },
            {
              "id": 1029143,
              "key": "35568545-ae81-4cd7-a792-dac56796c6ee",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "35568545-ae81-4cd7-a792-dac56796c6ee",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Are the AWS services free unlimitedly to a new \"free-tier\" account?",
                "answers": [
                  {
                    "id": "a1590757172197",
                    "text": "No. The services are limited to a certain extent. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1590757331328",
                    "text": "Yes. The \"free-tier\" account means everything is free for 1 year unlimitedly. ",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1101748,
          "key": "613ae3f9-8bfd-45ff-a734-152f7664bc29",
          "title": "EC2 - Launch an Instance",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "613ae3f9-8bfd-45ff-a734-152f7664bc29",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1101750,
              "key": "c0a924f8-e8cd-406e-9e90-1f632cb0108c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this tutorial, you will learn to launch an [Amazon Elastic Compute Cloud](https://aws.amazon.com/ec2/) (EC2) instance. An EC2 instance is a Virtual Machine (VM) with user-defined configuration that runs on the cloud. There are a plethora of options to choose the instance-configuration of your choice. Let's learn the general steps to build an instance with any given configuration.\n\n## A. Prerequisite\n1. You should have an AWS account. \n\n## B. Go to the EC2 Dashboard\n1. Log in to your AWS account, and go to the [AWS Management Console](https://aws.amazon.com/console/). Select the EC2 service.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1101760,
              "key": "6aa85623-66b1-4fe3-8258-06a7d965bb35",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb6775d_screenshot-2020-11-19-at-6.18.11-pm/screenshot-2020-11-19-at-6.18.11-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6aa85623-66b1-4fe3-8258-06a7d965bb35",
              "caption": "Snapshot: AWS Management Console. You can select any AWS service from here. ",
              "alt": "",
              "width": 700,
              "height": 882,
              "instructor_notes": null
            },
            {
              "id": 1101759,
              "key": "71ebba05-2b2a-4bb0-ac0b-1698ee4bce7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. Have a look at the [EC2 Dashboard](https://console.aws.amazon.com/ec2/v2/home). The EC2 Dashboard is home to a variety of related services, such as Amazon Machine Images, Elastic Block Store (EBS), Load Balancer, and Auto Scaling. ",
              "instructor_notes": ""
            },
            {
              "id": 1101761,
              "key": "1f01bca5-e7f7-47bc-b875-a82c3c168159",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb6780e_screenshot-2020-11-19-at-6.46.25-pm/screenshot-2020-11-19-at-6.46.25-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1f01bca5-e7f7-47bc-b875-a82c3c168159",
              "caption": "Snapshot: EC2 Dashboard. ",
              "alt": "",
              "width": 700,
              "height": 1256,
              "instructor_notes": null
            },
            {
              "id": 1101752,
              "key": "3524f1c1-a2c7-4db3-9675-e18bdcee7c29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## C. Start the Launch Instance Wizard\nLaunching an instance is an eight-step process, as described below. At any stage, you can refer to the instruction given in the [official documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance) for help. \n\n\n### Step 1 - Choose an Amazon Machine Image (AMI)\nAn AMI is a template used to create a VM. AMI contains the pre-installed operating system, application server, and applications required to launch your instance.  There is a variety of Linux, Windows, and other OS servers available. **Choose the one available under the free-tier option.**",
              "instructor_notes": ""
            },
            {
              "id": 1101762,
              "key": "7b0cb228-43a2-48a9-8dd5-e01b254cecd1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbb5c30_screenshot-2020-11-19-at-6.50.13-pm/screenshot-2020-11-19-at-6.50.13-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7b0cb228-43a2-48a9-8dd5-e01b254cecd1",
              "caption": "Snapshot: Choose AMI. The **Quick Start** provides a list of basic AMIs. ",
              "alt": "",
              "width": 700,
              "height": 1170,
              "instructor_notes": null
            },
            {
              "id": 1101753,
              "key": "0c60ba2c-68a7-4cd8-a909-165497b74bc6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 2 - Choose an Instance Type\nInstance Type offers varying combinations of CPUs, memory (GB), storage (GB), types of network performance, and availability of IPv6 support. AWS offers a variety of instance types, based on the configuration you choose. **Prefer to choose any one of those types supported by a free tier account**. ",
              "instructor_notes": ""
            },
            {
              "id": 1101763,
              "key": "2646ebd2-dbe0-41ba-84e2-b894919da8ac",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb67893_screenshot-2020-11-19-at-6.52.45-pm/screenshot-2020-11-19-at-6.52.45-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2646ebd2-dbe0-41ba-84e2-b894919da8ac",
              "caption": "Snapshot: Choose an Instance Type. ",
              "alt": "",
              "width": 700,
              "height": 1696,
              "instructor_notes": null
            },
            {
              "id": 1103090,
              "key": "a331e743-fb1d-4753-8678-717c60bc4930",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " Select the hardware configuration of your instance. The `t2.micro` instance type, which is available under the **free tier**, is selected by default. It has 1 vCPU, 2.5 GHz, 1 GiB memory, the default root volume, and supports additional EBS storage.",
              "instructor_notes": ""
            },
            {
              "id": 1101754,
              "key": "11811379-3f72-4ede-9704-57aa7c3a8817",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 3 - Configure Instance Details\nProvide the instance count and configuration details, such as network, subnet, behavior, monitoring, etc.",
              "instructor_notes": ""
            },
            {
              "id": 1101764,
              "key": "4a20689e-3ff9-4568-9518-a50fd62eea99",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb678c1_screenshot-2020-11-19-at-6.57.24-pm/screenshot-2020-11-19-at-6.57.24-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4a20689e-3ff9-4568-9518-a50fd62eea99",
              "caption": "Snapshot: Configure Instance Details. The wizard will populate the default values for all fields. ",
              "alt": "",
              "width": 700,
              "height": 1686,
              "instructor_notes": null
            },
            {
              "id": 1101755,
              "key": "e85b2a11-6be7-474c-a677-11779de6a180",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 4 - Add Storage \nYou can choose to attach either SSD or Standard Magnetic drive to your instance.",
              "instructor_notes": ""
            },
            {
              "id": 1101765,
              "key": "16e265ac-7aa6-4b71-83e9-7ea1d8843d4d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb678ed_screenshot-2020-11-19-at-6.58.35-pm/screenshot-2020-11-19-at-6.58.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/16e265ac-7aa6-4b71-83e9-7ea1d8843d4d",
              "caption": "Snapshot: Add Storage. You can edit the setting of the default root volume or attach additional EBS volumes. ",
              "alt": "",
              "width": 700,
              "height": 996,
              "instructor_notes": null
            },
            {
              "id": 1101756,
              "key": "a9413418-7c6c-40a6-86c8-f087646ccb92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 5 - Add Tags \nA tag serves as a label that you can attach to multiple AWS resources, such as volumes, instances, users, or roles. Tagging helps in easy search and grouping resources for various purposes.\n",
              "instructor_notes": ""
            },
            {
              "id": 1101766,
              "key": "35e44a10-e23e-4863-b622-bc84d5fc091b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb6791f_screenshot-2020-11-19-at-7.03.14-pm/screenshot-2020-11-19-at-7.03.14-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/35e44a10-e23e-4863-b622-bc84d5fc091b",
              "caption": "Snapshot: Add Tags. Tags help to categorize the resources across AWS services. It works as a label. ",
              "alt": "",
              "width": 700,
              "height": 708,
              "instructor_notes": null
            },
            {
              "id": 1101757,
              "key": "4963e12e-1f2d-4301-84b0-67139a0e8688",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 6 - Configure Security Group \nAttach a set of firewall rules to your instance(s) that controls the incoming traffic to your instance(s).\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1101767,
              "key": "2613bd50-6bf6-4cb3-a06e-99976bd7530c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb67951_screenshot-2020-11-19-at-7.05.19-pm/screenshot-2020-11-19-at-7.05.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2613bd50-6bf6-4cb3-a06e-99976bd7530c",
              "caption": "Snapshot: Security Groups. It defines the firewall rules, such as the protocol to open to network traffic and the set of valid IP addresses. By default, SSH protocol is used for a Linux instance, and RDP for a Windows instance. HTTP and HTTPS allow Internet traffic to reach your instance. ",
              "alt": "",
              "width": 700,
              "height": 1,
              "instructor_notes": null
            },
            {
              "id": 1101758,
              "key": "71fd6181-1a79-4a16-8ced-e7db3b5e9c9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 7 -  Review \nReview your instance details before the launch.",
              "instructor_notes": ""
            },
            {
              "id": 1101768,
              "key": "e88c608e-6349-4a7d-88a7-86992a69988a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb67a0f_screenshot-2020-11-19-at-7.08.01-pm/screenshot-2020-11-19-at-7.08.01-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e88c608e-6349-4a7d-88a7-86992a69988a",
              "caption": "Snapshot: Review",
              "alt": "",
              "width": 700,
              "height": 908,
              "instructor_notes": null
            },
            {
              "id": 1101769,
              "key": "924352f8-7256-4903-ae7c-e645f514a99a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 8 - Download Key Pair\nAWS generates a pair of public and private (encrypted) keys, that help in logging into the EC2 instance. Download the private key (.pem file) locally. The public key will be stored on the EC2 instance, while the private key will be available to download locally, ***just once***. In case, if the private key file (.pem) is misplaced or lost, the AWS doesn't allow regenerating the private key. ",
              "instructor_notes": ""
            },
            {
              "id": 1101770,
              "key": "99938016-1e55-462e-967b-d2f5f6c17fef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb67a6c_screenshot-2020-11-19-at-7.10.55-pm/screenshot-2020-11-19-at-7.10.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/99938016-1e55-462e-967b-d2f5f6c17fef",
              "caption": "Snapshot: Download Private Key",
              "alt": "",
              "width": 500,
              "height": 1036,
              "instructor_notes": null
            },
            {
              "id": 1101776,
              "key": "a0ab1253-9410-44ff-8286-fd8cb3b729fe",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb6945b_screenshot-2020-11-19-at-9.18.12-pm/screenshot-2020-11-19-at-9.18.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a0ab1253-9410-44ff-8286-fd8cb3b729fe",
              "caption": "Snapshot: EC2 dashboard &#8594; Instances dashboard showing a running instance. You can select the checkbox against the instance you wish to connect/stop/terminate/view details. In this dashboard, you will see all your instances, their properties, and configuration details.",
              "alt": "",
              "width": 700,
              "height": 1416,
              "instructor_notes": null
            },
            {
              "id": 1101787,
              "key": "9c83847e-864b-4a36-88ba-b215ae4dd94c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Note** - Do not forget to shut down/terminate every AWS resource after use. You can instantiate them again when you'd come back. ",
              "instructor_notes": ""
            },
            {
              "id": 1101804,
              "key": "48b4dd76-a59c-426f-bec1-997555b8bfe3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*Now, in one of your hands-on exercises next, you will have the chance to spin up your own EC2 Instance.*. ",
              "instructor_notes": ""
            },
            {
              "id": 1102169,
              "key": "3ad28edc-f260-4942-9e50-973f328676f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Recommended Read\n* [Best practices for Amazon EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-best-practices.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1101778,
          "key": "4b3a302f-1a91-4382-a934-203e77f95212",
          "title": "EC2 Dashboard",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4b3a302f-1a91-4382-a934-203e77f95212",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1101808,
              "key": "5b5b9e8d-528b-4440-82b1-23af7f8a8101",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's have an overview of the information available on the EC2 dashboard. ",
              "instructor_notes": ""
            },
            {
              "id": 1101790,
              "key": "d0a0acbd-bbf2-442a-a598-c558533028bb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb699a0_screenshot-2020-11-19-at-9.35.40-pm/screenshot-2020-11-19-at-9.35.40-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d0a0acbd-bbf2-442a-a598-c558533028bb",
              "caption": "Snapshot: EC2 Dashboard",
              "alt": "",
              "width": 1000,
              "height": 1536,
              "instructor_notes": null
            },
            {
              "id": 1101783,
              "key": "59ee853e-2b5a-49ce-a767-f8eef4552250",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The details of the items highlighted in red above are:\n### 1. Resource Summary\n* It presents the summary of all the EC2 resources running in a particular region. Currently, it is showing one instance (running state), one key pair, zero load balancers, two security groups, and one volume (storage). A few of these resources, such as key-pairs, security groups, and load balancers are modular in nature, meaning, they can be re-utilized to launch another EC2 instance. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1101792,
              "key": "48304aec-ef66-4896-84d1-93892ff030ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 2. Instances\n The simplest form of the EC2 Instance is the pay as you go, the on-demand instance, and that's this type of instance created using the default Launch wizard available on the EC2 dashboard. It's just the normal one pay as you go.\n\n\n* **Instances** - It shows the list and details of the instances running in a given region. \n\n\n* **Instance Types** - It shows the list of instance types (different combinations of hardware - CPU, storage, memory, architecture) available to launch a new instance. \n\n\n* **Launch Templates** - These are the scripts that contain configuration information written either in JSON or YAML format to automate instance launches, simplify permission policies, and enforce best practices across your organization. \n\n\n* **Spot Requests** - Spot is where you actually bid on an instance. If the price falls below your bid, the instance is automatically spun up and if the price goes above your bid, the server is automatically terminated. So this is good if you have an application that has a flexible start and stop time. \n\n\n* **Reserved Instances** - This is where you sign a contract for your EC2 Instance in either one to three years and you get a huge discount. So, this is good when you know the steady-state for your applications and you want to pay upfront.\n\n\n* **Dedicated Hosts** - This is where you have your own dedicated hardware. You may have license requirements for certain software packages that say no multi-tenancy. Meaning that you cannot run that application on a shared server. So Dedicated Hosts would solve that problem.\n\n\n* **Capacity Reservations** - This allows you to reserve the desired capacity (count) of instances in a particular availability zone. The reserved capacity is charged at the selected instance type’s On-Demand rate whether an instance is running in it or not. \n\n\nSee the detailed summary of all types and purchasing options [here](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html).\n",
              "instructor_notes": ""
            },
            {
              "id": 1101793,
              "key": "edf147bc-2863-4ff9-a140-7d024c84a5be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 3. Images\n* AWS provides an option to create custom [AMIs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html). Alternatively, you can use Images owned by Amazon and others. The AMI dashboard shows the Images owned by you. You can build a custom Image by using the **EC2 Image Builder** wizard available on this dashboard. ",
              "instructor_notes": ""
            },
            {
              "id": 1101794,
              "key": "51143a57-a327-466c-96e3-9d6c0006fe8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 4. Elastic Block Store (EBS)\n>In simple words, you can think of EBS as an external hard drive that we attach to the server for additional storage.\n\n* **Volumes** - It shows the list and details of all the volumes currently available to use. You can re-purpose a volume, meaning, you can anytime attach or detach a volume to any instance. You can create new volumes by using the **Create Volume** wizard. AWS provides the option to have a variety of volumes, such as general-purpose solid-state drive (SSD), provisioned SSD, general hard-disk (HDD), throughput-optimized HDD, or magnetic drives. Each type of volume has a different serving capacity, such as the number of I/O operations per second. \n\n\n* **Snapshots** - A snapshot is the saved state of the data in the (existing) volume at a particular moment. Snapshots can be used to transfer volumes from one instance to another or saving the state for future use. \n\n\n* **Lifecycle Manager** - It helps to schedule and manage the creation and deletion of EBS snapshots.\n",
              "instructor_notes": ""
            },
            {
              "id": 1101791,
              "key": "236311d4-4662-48ad-8130-144f9bae6145",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fb69989_screenshot-2020-11-19-at-9.39.59-pm/screenshot-2020-11-19-at-9.39.59-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/236311d4-4662-48ad-8130-144f9bae6145",
              "caption": "Snapshot: EC2 Dashboard (Scrolled down)",
              "alt": "",
              "width": 1000,
              "height": 942,
              "instructor_notes": null
            },
            {
              "id": 1101795,
              "key": "bb985a30-1458-47c6-ae64-5c7eb0765904",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 5. Network & Security\n* **Security Groups** - \nA security group acts as firewall rules that control the traffic for EC2 instances or virtual private clouds (VPC). You can define multiple security groups. A given security group can be assigned to multiple EC2 instances. \n\n When you launch an instance, you can specify one or more security groups. You can modify the rules for a security group at any time; the new rules are automatically applied to all instances that are associated with the [security group](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html). \n\n\n* **Elastic IP addresses** - \nAn Elastic IP address is a *static* IPv4 address. Assume you have a server running on an EC2 instance, that has a specific IP address. In case, the instance fails, the back-up instance will spin up. The back-up instance will have a *different* IP address, which will require you to update the IP address used in your client application. This problem can be solved by using the elastic IP address. An [Elastic IP address](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) can mask the failure of an instance by remapping the current IP address to another instance in your account. \n\n\n* **Placement Group** - You can imagine the EC2 instances as VMs running on the real servers in a data center. By default, the EC2 instances that you launch will be spread out across underlying hardware. But, sometimes there is a requirement to place the group of interdependent instances to meet the needs of your workload.  AWS allows to place the instances based on either of the following [placement strategies](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) - cluster (tightly packed), partition (logically grouped), or spread evenly across the underlying hardware. \n\n\n* **Key Pairs** - A [key-pair](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) is pair of (encrypted) public and (unencrypted PEM encoded) private keys. The public key is placed automatically on the instance, and the private key is made available to the user, just once. You can only log in to your running instance with the help of your private key. \n\n\n* **Network Interfaces** - A [network interface](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) represents a virtual network card in a VPC, and it has a both private and public IP addresses. When you create an instance, a default network interface is attached to it. In this dashboard, you can create and attach additional network interfaces to any instance. An EC2 instance can have multiple network interfaces.\n",
              "instructor_notes": ""
            },
            {
              "id": 1101796,
              "key": "1c6c26a7-54d6-49a4-b1fc-46a10502c5cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 6. Load Balancing\n* **Load Balancer** - A load balancer distributes the incoming traffic across multiple *targets*, such as EC2 instances in one or more Availability Zones. AWS supports three types of load balancers: [Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html), [Network Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html) (new), and [Classic Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/introduction.html) (might become deprecated soon). \n",
              "instructor_notes": ""
            },
            {
              "id": 1101797,
              "key": "7754530d-27f7-4261-90cc-ffd504a0cacf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 7. EC2 Auto Scaling\n* It is a [service](https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html) that automatically launches/terminates EC2 instances based on user-defined scaling policies, scheduled actions, and health checks. It ensures that you have a specified number of instances always up and running. You can specify the minimum and maximum count of instances. This service uses *launch templates*, i.e., a script containing the configuration details of the instances that will be launched automatically. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1006906,
          "key": "d4178b37-2cbe-402e-883f-a396dedce64d",
          "title": "EC2 - Connect to Linux Instance",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4178b37-2cbe-402e-883f-a396dedce64d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1103810,
              "key": "f9868601-8557-40a4-b728-45446ee70398",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can connect to your Linux/Ubuntu EC2 instance using the private key generated by AWS. To get started, start your instance and connect to it, as shown in the snapshot below. ",
              "instructor_notes": ""
            },
            {
              "id": 1006899,
              "key": "b1930014-f0ac-4028-90a5-da1694a95664",
              "title": "public DNS",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbe05b0_screenshot-2020-11-25-at-12.47.06-pm/screenshot-2020-11-25-at-12.47.06-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b1930014-f0ac-4028-90a5-da1694a95664",
              "caption": "Snapshot: Connect to the selected instance. Note the public DNS.",
              "alt": "",
              "width": 700,
              "height": 1336,
              "instructor_notes": null
            },
            {
              "id": 1103812,
              "key": "fc37c863-d84f-4506-b902-2d606e29b7ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Recently, AWS has launched the [EC2 Instance Connect](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html) wizard, which can help you to connect directly from the EC2 dashboard. Alternatively, you can use SSH as well. ",
              "instructor_notes": ""
            },
            {
              "id": 1006902,
              "key": "94debf74-3e9c-4b9f-83de-2006e11e4968",
              "title": "connect to EC2",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbe05cc_screenshot-2020-11-25-at-12.47.50-pm/screenshot-2020-11-25-at-12.47.50-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/94debf74-3e9c-4b9f-83de-2006e11e4968",
              "caption": "Snapshot: You can connect using the **EC2 Instance Connect** wizard. ",
              "alt": "",
              "width": 500,
              "height": 1336,
              "instructor_notes": null
            },
            {
              "id": 1103811,
              "key": "2ea46fcf-c139-4dcf-8f2e-b4a37bc821a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Linux/Mac users\nLinux/Mac users can log into your EC2 instance using Secure Shell (SSH) client. The following are the steps:\n",
              "instructor_notes": ""
            },
            {
              "id": 1103795,
              "key": "5453d438-c963-4a75-b932-3c83b8d061fb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbe05fb_screenshot-2020-11-25-at-12.48.04-pm/screenshot-2020-11-25-at-12.48.04-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5453d438-c963-4a75-b932-3c83b8d061fb",
              "caption": "Snapshot: Connect using SSH. **Copy** the commands and follow the steps mentioned above. ",
              "alt": "",
              "width": 500,
              "height": 1260,
              "instructor_notes": null
            },
            {
              "id": 1031960,
              "key": "0146b3ea-fbb1-4cf6-9bc5-430f05016b8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n\n\n1. **Change the Private key file permissions**<br>\n Open an SSH client/terminal. Navigate to the directory where you have your private key (.pem) file in your local machine, and change the permissions to hide it from the public for SSH to work, using the command \n```\nchmod 400 <path of private key .pem file locally>\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 1031961,
              "key": "ebe109da-c184-4233-a128-dfe260f2cdcb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n2. **Connect using the Public DNS**<br>\nYou will log-in using the default name. The default username for Ubuntu instances is `ubuntu`, and for Linux, it is `ec2-user`.  The list of default usernames is available [here](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html). \n \n Connect to your instance using its public DNS, as \n```bash\nssh -i <path of private key .pem file locally> <public DNS>\n```\nThe successful login will show you a prompt as shown in the snapshot below:",
              "instructor_notes": ""
            },
            {
              "id": 1006874,
              "key": "1b799ccb-5142-4191-9127-bd6e0843717b",
              "title": "Ubuntu SSH",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbe0856_screenshot-2020-11-25-at-1.01.00-pm/screenshot-2020-11-25-at-1.01.00-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1b799ccb-5142-4191-9127-bd6e0843717b",
              "caption": "Snapshot: Successful login using SSH. Notice the private IPv4 address at the prompt is `172.31.23.177`, which you can also see in your EC2 dashboard. ",
              "alt": "",
              "width": 700,
              "height": 676,
              "instructor_notes": null
            },
            {
              "id": 1103788,
              "key": "97a855b9-4369-4645-a89e-f7d0dae65bb2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Windows users\nWindows users can log in using PuTTY utility. The following are the steps:\n\n1. Download, and install the *PuTTY* utility suite in your Windows machine from [https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html) .",
              "instructor_notes": ""
            },
            {
              "id": 1006887,
              "key": "f66c40dd-6955-49cb-a41b-a91e8b752b68",
              "title": "SSH 5",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. You will need to have your PuTTY Private Key (.ppk) file locally. For this reason, we will use *PuTTYgen* utility to convert the .pem file to .ppk format. \n * Run the *PuTTYgen* in your machine. \n * Click **Load**, as shown in the snapshot below. \n * Browse and load the .pem key into the *PuTTYgen* and then click on **Save private key** to save the key in .ppk format without a passphrase. \n",
              "instructor_notes": ""
            },
            {
              "id": 1006881,
              "key": "b7eef309-f740-4c57-b570-1fb48c32866e",
              "title": "SSH 6",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/March/5e72767e_screenshot-2020-03-14-at-7.21.47-pm/screenshot-2020-03-14-at-7.21.47-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b7eef309-f740-4c57-b570-1fb48c32866e",
              "caption": "",
              "alt": "",
              "width": 488,
              "height": 473,
              "instructor_notes": null
            },
            {
              "id": 1006876,
              "key": "2036e93f-0f0a-402f-9437-f3aa4755aa5d",
              "title": "SSH 7",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/March/5e727698_screenshot-2020-03-14-at-7.26.48-pm/screenshot-2020-03-14-at-7.26.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2036e93f-0f0a-402f-9437-f3aa4755aa5d",
              "caption": "",
              "alt": "",
              "width": 490,
              "height": 476,
              "instructor_notes": null
            },
            {
              "id": 1006897,
              "key": "0945bd3e-5eb3-4f1c-87d7-8949bb19b453",
              "title": "SSH 8",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. Run the *PuTTY* to connect to the EC2 instance. \n4. Get the public DNS / IP address of your EC2 instance (host) from your AWS EC2 dashboard. Then, enter the public DNS / IP address of your EC2 instance (host) into the *PuTTY* . See snapshot below. \n",
              "instructor_notes": ""
            },
            {
              "id": 1006878,
              "key": "3e58cef2-1a1b-42a4-a0d2-823604574afb",
              "title": "SSH 9",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/March/5e7276b2_screenshot-2020-03-14-at-7.39.44-pm/screenshot-2020-03-14-at-7.39.44-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3e58cef2-1a1b-42a4-a0d2-823604574afb",
              "caption": "",
              "alt": "",
              "width": 457,
              "height": 442,
              "instructor_notes": null
            },
            {
              "id": 1031962,
              "key": "a79bb2d6-df87-4de4-9a43-e41a4fed8fa7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n5. Click on Connection → Data to enter the default username as `ubuntu` for Ubuntu, or `ec2-user` for Linux based OS. The list of default usernames are listed [here](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html)\n6. Click on Connection → SSH → Auth to upload the .ppk file. See the snapshot below:",
              "instructor_notes": ""
            },
            {
              "id": 1006900,
              "key": "8f1ec9b7-e9a2-4300-b529-8b1b6d1db809",
              "title": "SSH 11",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/March/5e7276cd_screenshot-2020-03-14-at-7.46.42-pm/screenshot-2020-03-14-at-7.46.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8f1ec9b7-e9a2-4300-b529-8b1b6d1db809",
              "caption": "",
              "alt": "",
              "width": 456,
              "height": 440,
              "instructor_notes": null
            },
            {
              "id": 1031963,
              "key": "60e871a8-bb27-41ca-bd17-2fa73f330965",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "7. If everything is set up correctly, a terminal window would open up to log you into your Linux/Ubuntu EC2 instance.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1027937,
          "key": "a55de3a4-1b3c-4c27-a453-7dbf7159568f",
          "title": "Monitor your AWS Costs and Credits",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a55de3a4-1b3c-4c27-a453-7dbf7159568f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1027960,
              "key": "ef2790e2-be1e-40b1-bca3-b55d273c95e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Monitoring your AWS Costs and Credits\nAll AWS services are a pay-as-you-go service, so we urge our students to closely monitor their usage costs and if they have adequate credits available to complete their project/task.  Follow the instructions below to do that:\n\n### Step 1. Log into your [AWS account](https://console.aws.amazon.com/).\n\n### Step 2.  Examine your costs \nGo to https://console.aws.amazon.com/billing/\n\nYou should see the following billing dashboard where it will show your costs.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1027965,
              "key": "e91352f8-4800-465e-bfb6-02939fcaec79",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ec71862_screen-shot-2020-05-21-at-5.07.48-pm/screen-shot-2020-05-21-at-5.07.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e91352f8-4800-465e-bfb6-02939fcaec79",
              "caption": "Snapshot: [AWS Billing Dashboard](https://console.aws.amazon.com/billing/home#/)",
              "alt": "",
              "width": 700,
              "height": 1366,
              "instructor_notes": null
            },
            {
              "id": 1103097,
              "key": "0d7bfb12-e471-40da-a0fa-ba95da6e5965",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If your account has been created within one year from the current date, your [AWS Billing Dashboard](https://console.aws.amazon.com/billing/home#/) will also show the resource usage statistics for the free tier services. See the snapshot below: ",
              "instructor_notes": ""
            },
            {
              "id": 1103098,
              "key": "3166f33e-f5c1-4ca8-8986-c60e65dda28e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbb70d9_screenshot-2020-11-23-at-12.54.53-pm/screenshot-2020-11-23-at-12.54.53-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3166f33e-f5c1-4ca8-8986-c60e65dda28e",
              "caption": "Snapshot: Resource usage statistics for top-free tier services.",
              "alt": "",
              "width": 500,
              "height": 1056,
              "instructor_notes": null
            },
            {
              "id": 1027966,
              "key": "10b55d99-ee91-4201-845d-84aae7b96772",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 3 (optional). Check the value of your credits. \nClick on the \"Credits\" from the left navigation menu, and the following screen will show your available credits.",
              "instructor_notes": ""
            },
            {
              "id": 1027967,
              "key": "e7c50a8b-c962-4666-b6a4-8404ba736bff",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ec71a62_screen-shot-2020-05-21-at-5.13.56-pm/screen-shot-2020-05-21-at-5.13.56-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e7c50a8b-c962-4666-b6a4-8404ba736bff",
              "caption": "Snapshot: Track credit (promo-code) balance",
              "alt": "",
              "width": 1000,
              "height": 1092,
              "instructor_notes": null
            },
            {
              "id": 1027968,
              "key": "ec0bafd3-5b49-474a-9bc8-c6a8d504b67e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<em>**Note:  For student learning, Udacity has partnered with Amazon to provide nominal credits for the student to complete their course work.  Please understand that these credits are limited and available for you to use judiciously. You are responsible for any additional costs beyond the given credits.**</em>\n\n## When will I be charged?\nThere are no tools to limit usage to what’s covered by the AWS Free Tier. This means that you are responsible for the services that you launch. You will be charged standard [pay-as-you-go service rates](https://aws.amazon.com/pricing/) for using AWS resources that exceed the AWS Free Tier limits and the credits provided by Udacity.\n\n\n## <font color=\"red\"> Shut Down your Resources, if not in use </font>\nThe Free Tier benefits and the credit amount provided by the Udacity Support team will be sufficient for you to complete your Nanodegree program.\n\n>####  <span>Note: <font color=\"red\">We recommend you shut down every resource (e.g., EC2 instances, or any other hosted service) on the AWS cloud immediately after the usage, otherwise you will run out of your free promo credits. </font></span>\n\nRemember, even if you are in the middle of the project and need to step away, PLEASE SHUT DOWN YOUR RESOURCES. You can re-instantiate later.\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901175,
          "key": "977a50aa-2a49-4ca2-a5bc-12131e8e5485",
          "title": "Docker",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "977a50aa-2a49-4ca2-a5bc-12131e8e5485",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901162,
              "key": "dfab81b5-58de-4765-af20-d2c1103f59fb",
              "title": "Docker",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Docker\n\nDocker is a tool that helps to create *Docker *images. An *image* (or Docker image) is a portable read-only template that contains a set of instructions to create a container. An image can be instantiated multiple numbers of times to create multiple *containers*.\n\n## Containers\n\nOS level virtualization allows us to run *multiple isolated user-space instances* in parallel. A *container* (or Docker container) is the isolated user-space instance that consists of the following items all bundled into one package:\n\n* the application code, \n* the required dependencies (e.g. libraries, utilities, configuration files), and \n* the necessary runtime environment to run the application. \n\nEach container is an independent component that can run on its own and be moved from environment to environment.\n\n### Benefit of Containers\n\n* Containers make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily. \n* Containers share a single kernel and share application libraries. \n* Containers cause a lower system overhead as compared to Virtual Machines.\n\n### Recommended Read\n\n* <a href=\"https://docs.docker.com/engine/docker-overview/\" target=\"_blank\">General overview about Docker containers</a>\n* <a href=\"https://www.docker.com/resources/what-container\" target=\"_blank\">Documentation on Docker Containers</a>",
              "instructor_notes": ""
            },
            {
              "id": 901152,
              "key": "7598a6ff-46cb-45a3-bf4c-b839d36afa73",
              "title": "ND035 C04 L05 A03 Why Docker ",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "E2QjRCyCo8c",
                "china_cdn_id": "E2QjRCyCo8c.mp4"
              }
            },
            {
              "id": 1029140,
              "key": "14109c46-0feb-4b8e-9752-eb7de86f6f95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms\n\n<center>\n\n**Term** |\t**Definition**\n----- | ------\nDockerfile |\tA file containing instructions on how to translate an application into an image that can be run in containers\nBase Image\t| A set of common dependencies built into a Docker image that acts as a starting point to build an application’s Docker images to reduce build times\nImage |\tA snapshot of dependencies and code used by Docker containers to run an application\nContainer |\tGrouped software dependencies and packages that make it easier and more reliable to deploy software\nDockerHub |\tA centralized place, called Container Registry, to store container images\nEphemeral |\tSoftware property where an application is expected to be short-lived\n</center>\n---",
              "instructor_notes": ""
            },
            {
              "id": 1136456,
              "key": "2fe6d5de-854b-4169-8b0c-d7e1213e539f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### How does it work?\nLet me give you an overview of the flow of execution for creating a container: \n<center>\n\n\n**Dockerfile &#8594; Docker Image &#8594; Docker container**\n\n</center>\nThe steps shown above are:\n1. **Write a Dockerfile**:<br> It is a text document that contains the commands a user would execute on the command line to assemble an image. In this file, you can specify the necessary environments and dependencies. For example, see a Dockerfile below:\n```bash\n# Pull the \"tomcat\" image. The community maintains this image. \nFROM tomcat \n# Copy all files present in the current folder to the \"/usr/local/tomcat/webapps\"  folder \nCOPY ./*.* /usr/local/tomcat/webapps\n```\nIn the example above, every time you create a container, it will have the tomcat web server installed. In addition, all the contents of the current directory will also be copied to the */usr/local/tomcat/webapps* folder of each container. See another Dockerfile [example here](https://github.com/docker/labs/blob/master/beginner/static-site/Dockerfile). <br>\nSee the [Dockerfile reference](https://docs.docker.com/engine/reference/builder/) for possible commands you can use. <br><br>\n\n\n\n2. **Build an Image**:<br> Use the `docker build` command to build an image from the Dockerfile. Usually, we execute this command from the same directory where the Dockerfile is present. \n```bash\n# This command will look for a Dockerfile in the `pwd`, and create myImage\ndocker build  --tag myImage  [OPTIONS] path_where_to_store_the_image \n```\nYou can store your images online at DockerHub as well, so that you/anyone can \"pull\" them on any other machine, anytime. We can even use the pre-created Docker images maintained by the community. <br><br>\n>You can by-pass the two steps mentioned above by directly pulling a pre-created image from the DockerHub to your local machine, and then create and run containers using that image. For example, you can pull an image by running the command below in your terminal:\n\n ```bash\ndocker pull tomcat:latest\n```\n\n\n3. **Create and run a Container**:<br> After creating an image, you can use it to create as many Containers as you want on any platform. Each container will have the same environment and dependencies to run a copy of your application. The following command creates and runs a new container:\n```bash\ndocker run --name myContainer myImage\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1029104,
              "key": "35ead66a-502c-4182-b379-8a96252b48a9",
              "title": "MCQ",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "35ead66a-502c-4182-b379-8a96252b48a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select all statements that are correct with regard to Docker Image.",
                "answers": [
                  {
                    "id": "a1590739815999",
                    "text": "It is a portable package that contains the application and its dependencies. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1590739870487",
                    "text": "An image can be instantiated multiple numbers of times to create \"containers\".",
                    "is_correct": true
                  },
                  {
                    "id": "a1590739941223",
                    "text": "We have to install a software \"Docker Desktop\" to be able to create images and instantiate containers",
                    "is_correct": true
                  },
                  {
                    "id": "a1590740128036",
                    "text": "Images can be stored locally, as well as online at DockerHub",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 907196,
              "key": "31de5851-22d2-4f0b-9653-7f5bab833993",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "31de5851-22d2-4f0b-9653-7f5bab833993",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is a container?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A server which runs your application directly on it",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "A bundled environment containing the tools, libraries, and other components to run an application",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "A testing framework",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1029121,
              "key": "875490bc-b164-4851-8a7e-9724df2434bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### How to Install Docker?\nWe will deploy our application on a Virtual Machine (VM) on Amazon Web Service (AWS) cloud. The VM that we will use would be a Linux machine, where we will install the Docker as\n```shell\n# Install Docker\nsudo yum install docker\n# Add the current user to the \"docker\" group\nsudo usermod -a -G docker $USER\n# Start Docker service\nsudo service docker start\n```\n\nAlternatively, if you wish to install Docker locally, you can refer to the official [\"Download and Install\"](https://docs.docker.com/desktop/) section. \n\n\n### Basic Commands\nThe following are basic commands used with Docker:\n* `docker build .` will run the Dockerfile to create an image. A Dockerfile is a text file that contains commands as a step-by-step recipe on how to build up your image. ***In our case, we would not use a Dockerfile because we will use a pre-created `jenkinsci/blueocean` image to instantiate a container.*** For more details about Dockerfile, refer the [Build and run your image](https://docs.docker.com/get-started/part2/) page. \n\n\n* `docker images` will print all the available images\n\n\n* `docker run {IMAGE_ID}` will create and run a container with the specified image\n\n\n* `docker exec -it {CONTAINER_ID} bash` will open a bash terminal inside the container\n\n\n* `docker ps` will print all the running containers\n\n\n* `docker kill {CONTAINER_ID}` will terminate the container\n\nThere are many more commands that are beyond the scope of this exercise, however, you can refer to this [Reference manual](https://docs.docker.com/engine/reference/commandline/docker/) anytime. **We will see the instructor using a few of these commands in the final consolidated demonstration on \"Bringing it all Together\" page.**\n",
              "instructor_notes": ""
            },
            {
              "id": 1136054,
              "key": "40067e78-55c0-4e4c-833d-bf060c0fb8f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "An important command is:\n```bash\ndocker container help\n```\nIt will show you all possible docker commands related to a container. ",
              "instructor_notes": ""
            },
            {
              "id": 1136055,
              "key": "c31e9e6d-685a-4073-8e87-ed8e6c5e1237",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60262bda_screenshot-2021-02-12-at-12.48.12-pm/screenshot-2021-02-12-at-12.48.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c31e9e6d-685a-4073-8e87-ed8e6c5e1237",
              "caption": "Output of `docker container help`",
              "alt": "",
              "width": 600,
              "height": 1550,
              "instructor_notes": null
            },
            {
              "id": 1029141,
              "key": "0286e4a4-c298-4278-9dd3-d93aa059c824",
              "title": "Matching Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0286e4a4-c298-4278-9dd3-d93aa059c824",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the term with its corresponding definition."
                },
                "concepts_label": "DESCRIPTION",
                "answers_label": "TERM",
                "concepts": [
                  {
                    "text": "An ephemeral application that is deployed as one unit",
                    "correct_answer": {
                      "id": "a1590756223542",
                      "text": "Docker Container"
                    }
                  },
                  {
                    "text": "Application and its dependencies grouped with execution instructions",
                    "correct_answer": {
                      "id": "a1590756338188",
                      "text": "Docker Image"
                    }
                  },
                  {
                    "text": "Centralized resource for storing images",
                    "correct_answer": {
                      "id": "a1590756353391",
                      "text": "Container Registry"
                    }
                  },
                  {
                    "text": "Instructions on how to translate application code into an image",
                    "correct_answer": {
                      "id": "a1590756367585",
                      "text": "Dockerfile"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1590756367585",
                    "text": "Dockerfile"
                  },
                  {
                    "id": "a1590756223542",
                    "text": "Docker Container"
                  },
                  {
                    "id": "a1590756353391",
                    "text": "Container Registry"
                  },
                  {
                    "id": "a1590756338188",
                    "text": "Docker Image"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1133617,
          "key": "ace92e2f-ef35-4065-8da5-10583228586c",
          "title": "Docker - II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ace92e2f-ef35-4065-8da5-10583228586c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "sample.html",
                "uri": "https://video.udacity-data.com/topher/2021/February/6024056c_sample/sample.html"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 1133618,
              "key": "6c6750f3-ccaf-4330-860f-0342eb6d5c4d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nIn our final demo, we will create and run a container in the EC2 instance. Therefore, let's practice a similar exercise to get acquainted. \n\n## ToDo: Run a Container in an EC2 Instance (Linux)\n<br>\n1. **Launch an EC2 instance** <br>\n * Use the following configuration, and leave the remaining values as the defaults:\n\n<center>\n\n|Stage|Configuration|Value|\n|:---:|---|---|\n|1.|Amazon Machine Image (AMI)|`Amazon Linux 2 AMI (HVM), SSD Volume Type`<br> Note: You have chosen a **Free Tier Eligible** AMI|\n|2.|Instance Type|`t2.micro`|\n|3.|Configure Instance Details||\n||a. Number of Instances|1|\n||b. Network|Select the default VPC |\n||c. Subnet|Default|\n||d. Auto-assign public IP|Enable|\n|4.|Storage ||\n||a. Root volume|Default |\n||a. Additional volume|EBS volume <br>(8GiB, General purpose SSD-gp2, deletes on termination)|\n|5.|Tags |Name:CloudServer|\n|6.|Security Group |New. <br>Allow TCP traffic on port 80, and 8080 from anywhere. <br>Allow SSH traffic on port 22 from anywhere.|\n</center>\n   * The Security group will look like this:\n\n<center>\n\n|Type|Protocol|Port|Source|\n|:---:|---|---|---|\n|SSH|TCP|22|`0.0.0.0/0`|\n|Custom TCP|TCP|80|`0.0.0.0/0`|\n|Custom TCP|TCP|8080|`0.0.0.0/0`|\n</center>\n* Generate and download a new key pair, at the last stage of the **Launch Instance** wizard. <br>\n   >**Important:** This key-pair will allow you to log into your instance, using SSH, from your local machine. Save the key-pair carefully, because the same private key cannot be re-generated. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1133620,
              "key": "9c692dff-cf7b-453f-af38-e23fae1359b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Connect to your EC2 instance using SSH.** \n * Open the terminal, go to the folder where you have downloaded the key-pair (say *AWS_EC2_DemoKey.pem*) and run:\n```\nchmod 400 AWS_EC2_DemoKey.pem\n```\nIf you are a Windows user, you will have to use the PuTTy utility to convert the *.pem* to *.ppk* and then SSH into your EC2 instance. \n\n * SSH into your EC2 instance:\n```\nssh -i \"AWS_EC2_DemoKey.pem\" ec2-user@ec2-18-224-137-188.us-east-2.compute.amazonaws.com\n```\nThe IP address and key filename will be different in your case. ",
              "instructor_notes": ""
            },
            {
              "id": 1133621,
              "key": "8c893b9c-0814-4e5e-9c3e-a380a416ff06",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023cdc4_screenshot-2021-02-10-at-5.39.36-pm/screenshot-2021-02-10-at-5.39.36-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c893b9c-0814-4e5e-9c3e-a380a416ff06",
              "caption": "SSH login steps",
              "alt": "",
              "width": 500,
              "height": 1474,
              "instructor_notes": null
            },
            {
              "id": 1133622,
              "key": "5d64eb09-fc5f-49b5-ac84-171e84f1ad87",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023ce2e_screenshot-2021-02-10-at-5.44.00-pm/screenshot-2021-02-10-at-5.44.00-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5d64eb09-fc5f-49b5-ac84-171e84f1ad87",
              "caption": "A successful login to EC2 instance. See the prompt.",
              "alt": "",
              "width": 500,
              "height": 848,
              "instructor_notes": null
            },
            {
              "id": 1133623,
              "key": "1f28c699-40f2-4d8a-901b-701d9a7e7468",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. **Install Docker**<br>\nRun the following commands to install Docker:\n```bash\n# update the existing packages\nsudo yum update\n# download and install Docker\nsudo yum install docker\n# Add the $USER user to the \"docker\" user group \n# The current $USER is ec2-user\nsudo usermod -a -G docker $USER\nsudo reboot\n```\nThe last command above will reboot the EC2 instance, and hence, your connection will be closed. **Reconnect to your EC2 instance after 2 minutes,** using the same SSH command:\n```bash\nssh -i \"AWS_EC2_DemoKey.pem\" ec2-user@ec2-18-224-137-188.us-east-2.compute.amazonaws.com\n```",
              "instructor_notes": ""
            },
            {
              "id": 1133624,
              "key": "72217cfb-a7f4-43bc-b82e-02f0efceb4fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "4. **Create and run your first Container**<br>\nJenkins community provides various (open-source) images that anyone can use to create and run containers. Using images bypasses the need to write a Dockerfile. \n\n We will take a pre-created Apache server image, `httpd `, available in the [Docker hub here](https://hub.docker.com/_/httpd?tab=description&page=1&ordering=last_updated), as shown in the snapshots below.  ",
              "instructor_notes": ""
            },
            {
              "id": 1133625,
              "key": "3e8a1eb4-ec13-4ba7-810d-459af8bfa92e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023f48b_screenshot-2021-02-10-at-8.26.07-pm/screenshot-2021-02-10-at-8.26.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3e8a1eb4-ec13-4ba7-810d-459af8bfa92e",
              "caption": "",
              "alt": "",
              "width": 600,
              "height": 1068,
              "instructor_notes": null
            },
            {
              "id": 1133629,
              "key": "9b3753b7-926e-45af-aa06-f1ab3ee90219",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023f4a7_screenshot-2021-02-10-at-8.26.51-pm/screenshot-2021-02-10-at-8.26.51-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9b3753b7-926e-45af-aa06-f1ab3ee90219",
              "caption": "We are using *Option 2* to use this image. Though, you can view the corresponding Dockerfile in *Option 1*. ",
              "alt": "",
              "width": 600,
              "height": 1234,
              "instructor_notes": null
            },
            {
              "id": 1133634,
              "key": "626332c8-1e3d-4b4f-8084-904c24d59f02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Run the following commands to start the Docker:\n```bash\n# start Docker service\nsudo service docker start\n# Check if the Docker engine is running\nsystemctl show --property ActiveState docker\n```",
              "instructor_notes": ""
            },
            {
              "id": 1133628,
              "key": "d763cd5b-45ef-4793-a61c-1cb2702ee478",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Create and run a container from an existing image. Run this command in in the EC2 instance's terminal:\n```bash\ndocker run -dit --name myApacheServer -p 8080:80 -v apacheData:/usr/local/apache2/htdocs/ -v myPages:/var/www/html httpd:2.4\n# Check the currently running containers\ndocker ps\n```\nThe command above will automatically `pull` the `httpd:2.4` image from the DockerHub to the EC2 instance, meaning it will perform the job of the following command:\n```bash\ndocker pull httpd:2.4\n```\nThe various options used in the command above are:\n  *  --name create a name for your container\n  * -p specifies port on which the Apache server will run\n  * -d detached mode, meaning run the container in the background\n  * -v will bind a volume to persist the data of the Apache server. This is important because when we will restart the container, we would want the Apache related data (configuration, user-data, plugins) to be present there. \n\n Then, check the output in your local browser, by copy-pasting the EC2 instance's public IP and appending with (Apache's) default port 8080. \n",
              "instructor_notes": ""
            },
            {
              "id": 1133632,
              "key": "2fafdea7-af4c-459e-a9db-0df6e6b8b026",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023f548_screenshot-2021-02-10-at-8.31.19-pm/screenshot-2021-02-10-at-8.31.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2fafdea7-af4c-459e-a9db-0df6e6b8b026",
              "caption": "Output at **http://18.224.137.188:8080/**",
              "alt": "",
              "width": 600,
              "height": 382,
              "instructor_notes": null
            },
            {
              "id": 1133630,
              "key": "e7ba7482-851a-4799-b10b-9a612a025d9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "5. **Serve a custom HTML page**<br>\nApache server can serve your custom HTML page. We have provided a **sample.html** file in the Resources section of the current page, that you can download and use along with the commands below. \n\n * Download the *sample.html* file from Udacity classroom page to your local machine. <br><br>\n\n * Copy the *sample.html* file from your local computer to the EC2 instance. **Run this command from your local terminal**:\n```\nscp -i AWS_EC2_DemoKey.pem sample.html ec2-user@18.224.137.188:/home/ec2-user/sample.html\n```\nOf course, replace the IP address, as applicable to you. <br><br>\n * Copy the *sample.html* from EC2 instance to the currently running container at the default path for Apache server. **Run this command from EC2 instance's terminal**:\n```bash\n# Check if you have the file in your root directory\nls\n# Check the currently running containers\ndocker ps\n# Copy the container ID and use it in the command below\ndocker cp sample.html 5b5b034f995c:/usr/local/apache2/htdocs/sample.html\n```\n * Check the output at `<Public IP of the EC2 instance>:8080/sample.html`",
              "instructor_notes": ""
            },
            {
              "id": 1133627,
              "key": "7525939d-6344-496e-adbe-efbc0363c096",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023fae8_screenshot-2021-02-10-at-8.54.21-pm/screenshot-2021-02-10-at-8.54.21-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7525939d-6344-496e-adbe-efbc0363c096",
              "caption": "Check if the container is running using `docker ps` command",
              "alt": "",
              "width": 700,
              "height": 272,
              "instructor_notes": null
            },
            {
              "id": 1133631,
              "key": "0448a315-2c97-463d-b50a-68970800a709",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023f516_screenshot-2021-02-10-at-8.30.07-pm/screenshot-2021-02-10-at-8.30.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0448a315-2c97-463d-b50a-68970800a709",
              "caption": "Output at **http://18.224.137.188:8080/sample.html**",
              "alt": "",
              "width": 600,
              "height": 1536,
              "instructor_notes": null
            },
            {
              "id": 1133635,
              "key": "7afc1dd9-9f10-438a-943a-48d09cf29f41",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "6. **Stop Container and Docker**<br>\nStop a particular container using its ID.\n```bash\n# Stop\ndocker stop <container_ID>\n# Remove\ndocker container rm <container_ID>\n``` \nStop the docker services using the commands:\n```bash\nsudo service docker stop\n``` \n",
              "instructor_notes": ""
            },
            {
              "id": 1133633,
              "key": "a9622560-c2e8-455f-8048-71766bfbd4fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Useful Tip\nBeyond this exercise, if you want to run any command in the container, then you have two options to do so:\n1. **Use bash shell into the container**<br>\nFind the container name/ID using `docker ps` command, and run:\n```bash\n# Use \"docker exec -it <container name> bash\"\ndocker exec -it myContainer bash\n# Install Maven dependency\napk add maven\n```\n<br><br>\n\n2. **User `docker exec` command**<br>\nFind the container ID using `docker ps` command, and run:\n```bash\ndocker exec -it 5b5b034f995c  <command> \n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901172,
          "key": "674b0c32-1d75-4781-ae6e-acd38a4d3448",
          "title": "Jenkins",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "674b0c32-1d75-4781-ae6e-acd38a4d3448",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1133615,
              "key": "edba7a83-45f4-4415-acea-84ce55ab8660",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Note**: In the final demo, **you will not require to install Jenkins manually on any machine**. Instead, Jenkins will come preinstalled in the Docker container that you will create from an already available Docker image. Recall that a Docker container is an isolated computing environment in the EC2 instance. \n\nHowever, if we were not using a Docker container, you would install Jenkins manually in the EC2 instance (a Linux machine). Therefore, let's learn Jenkins's basics and how we can install it on a Linux machine, in general. ",
              "instructor_notes": ""
            },
            {
              "id": 1029111,
              "key": "76b23e7f-59b5-4efa-ae97-5a8aac196f36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Jenkins - Introduction\n\nJenkins is an open-source automation server written in the Java programming language. Jenkins helps to automate a few aspects related to building, testing, and delivering or deploying software. There are many more other frameworks available in the market, as listed [here](https://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software).\n\nIn our case, we need to integrate Jenkins with AWS to trigger the CI/CD pipeline automatically whenever code changes pushed to our GitHub repository. This automation would require us to link our Git repository to Jenkins. \n\n\nMore information about Jenkins is available [here](https://jenkins.io/doc/pipeline/tour/getting-started/). Refer the diagram below to understand where does the Jenkins fit into the overall system.\n",
              "instructor_notes": ""
            },
            {
              "id": 1029110,
              "key": "9af56253-3943-44c5-9282-99f0e7a6fd66",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6023b157_ci-cd-pipeline/ci-cd-pipeline.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9af56253-3943-44c5-9282-99f0e7a6fd66",
              "caption": "A CI/CD Pipeline showing the role of Jenkins automation server building and deploying multiple environments on the server available in the Cloud",
              "alt": "",
              "width": 600,
              "height": 353,
              "instructor_notes": null
            },
            {
              "id": 1029136,
              "key": "845e4988-9743-4641-8feb-03f375208950",
              "title": "MCQ",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "845e4988-9743-4641-8feb-03f375208950",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are the CI/CD Pipeline tools?",
                "answers": [
                  {
                    "id": "a1590752991908",
                    "text": "Travis CI",
                    "is_correct": true
                  },
                  {
                    "id": "a1590753054451",
                    "text": "Jenkins",
                    "is_correct": true
                  },
                  {
                    "id": "a1590753088011",
                    "text": "GitHub",
                    "is_correct": false
                  },
                  {
                    "id": "a1590753116589",
                    "text": "AWS",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1029139,
              "key": "c83a7cd1-144c-4552-bd59-f642278c2308",
              "title": "MCQ",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c83a7cd1-144c-4552-bd59-f642278c2308",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Select all statements that are correct with regard to a CI/CD pipeline?",
                "answers": [
                  {
                    "id": "a1590754551344",
                    "text": "A pipeline helps you automate steps in your software delivery process, such as initiating automatic builds, tests and then deploying to the server (Amazon EC2 instances).",
                    "is_correct": true
                  },
                  {
                    "id": "a1590754563203",
                    "text": "A pipeline rebuilds, and deploys every time there is a change in code.",
                    "is_correct": true
                  },
                  {
                    "id": "a1590754573795",
                    "text": "The code must be available in a version control system such as GitHub or the cloud storage. ",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 901163,
              "key": "a43efbf6-d5a8-4df4-8cc4-3424bb3a4ae4",
              "title": "ND035 C04 L05 A05 Why Jenkins V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FINqfPE5C0E",
                "china_cdn_id": "FINqfPE5C0E.mp4"
              }
            },
            {
              "id": 1029112,
              "key": "d0d9ef48-5af3-4362-9d73-962237946130",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Jenkins Pipeline\nJenkins Pipeline is a set of plugins that assist in achieving continuous delivery. Jenkins is highly modular and supports a multitude of plugins. Plugins extend Jenkins with additional features to support various requirements. The Pipeline can be set up in either of the following two ways:\n\n\n1. [Using a Jenkinsfile](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/): A Jenkins Pipeline is defined using a text file called Jenkinsfile. This text file is stored in the application’s Source Control Repository e.g., Github. Storing the Jenkinsfile into a source control repository makes it possible to review and audit collaboratively. A Jenkinsfile can be written using either of the two types of syntax - Declarative and Scripted. The following is an example file:\n```\nJenkinsfile (Declarative Pipeline)\npipeline {\n    agent { docker { image 'maven:3.3.3' } }\n    stages {\n        stage('build') {\n            steps {\n                sh 'mvn --version'\n            }\n        }\n    }\n}\n```\n\n\n2. [Blue Ocean](https://www.jenkins.io/doc/book/blueocean/): It is a feature from Jenkins that automatically manages the Pipeline configurations. We will use this method for setting up our Pipeline.\n",
              "instructor_notes": ""
            },
            {
              "id": 1029123,
              "key": "972f5a90-0bcc-425e-a067-1a4b20f0ad03",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ToDo Exercise 1: Install Jenkins on a Linux machine \n>Recall that you will not require to install Jenkins manually on any machine. Instead, Jenkins will come preinstalled in the Docker container that we will create in the EC2 instance. \n\nHowever, for learning purposes, follow the steps below to install and configure Jenkins. \n\n1. Create an Amazon Linux 2 AMI based EC2 instance, that has **port 8080 open for TCP connections** (refer to the *Configure Security Groups* step while creating the EC2 instance). \n\n\n2. Connect to your EC2 instance via SSH and try the following commands. You can find the exact steps for your specific machine in the official [reference manual for installing Jenkins](https://www.jenkins.io/doc/book/installing/#linux). The commands are:\n```bash\n# Download Jenkins package locally\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\n# Import the key\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n# Update your local package index\nsudo yum upgrade\n# Install Jenkins and Java\nsudo yum install jenkins java-1.8.0-openjdk-devel\nsudo systemctl daemon-reload\n# Start the Jenkins server\nsudo systemctl start jenkins\n# Enable the service to load during boot\nsudo systemctl enable jenkins\nsudo systemctl status jenkins\n# Stop the service\nsudo systemctl stop jenkins\n```\nThe `sudo`keyword allows us to run the commands as root user. ",
              "instructor_notes": ""
            },
            {
              "id": 1029124,
              "key": "c79ea65d-3bc4-4344-8837-4dd6d2011a28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---\n\n## ToDo Exercise 2: Admin login to Jenkins console\n>These steps will also help you follow the consolidated video on the next page. \n\nAfter installing Jenkins on a given machine, you will need to **authenticate yourself as an admin user for the Jenkins server**. This can be done by going to the Jenkins console (browser).\n1. **Copy public IP address:** We are assuming that you have installed Jenkins on the *Amazon Linux 2 AMI based EC2 instance that has port 8080 open for TCP connections*. Go to the AWS dashboard to copy the public IP address of your Linux EC2 instance. \n\n<br>\n2. **Open the Jenkins console:** Paste the public IP address into your browser, and append with `:8080` port. If you have installed Jenkins locally, replace the ID address above with the `http://localhot:8080`. \n For the first time, it will open up the Jenkins GUI as shown in the snapshot below:",
              "instructor_notes": ""
            },
            {
              "id": 1029125,
              "key": "c11fb1c6-9a15-4ee2-b5ed-d59f00f94a53",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f0fb_screenshot-2020-03-14-at-6.04.20-pm/screenshot-2020-03-14-at-6.04.20-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c11fb1c6-9a15-4ee2-b5ed-d59f00f94a53",
              "caption": "Jenkins GUI saves the administrator password at the specified location on the machine it is installed.",
              "alt": "",
              "width": 500,
              "height": 350,
              "instructor_notes": null
            },
            {
              "id": 1029126,
              "key": "eb419d79-5ffd-4fdc-af16-9ac67618aa7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. **Copy-paste the admin password:** On the terminal, where you have connected to the Linux EC2 instance, view the content of the password file using the command \n```\nsudo cat <path copied in the previous step>\n```\nIt will show the default administrator password. You can copy and paste this password in the console (browser) to log in.\n\n\n\n4. **Install default plugins:** After successful login, you may choose to install default plugins. ",
              "instructor_notes": ""
            },
            {
              "id": 1029127,
              "key": "3502fd86-9cfd-44b7-b90e-1dc1ac8033df",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f190_screenshot-2020-03-14-at-6.26.15-pm/screenshot-2020-03-14-at-6.26.15-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3502fd86-9cfd-44b7-b90e-1dc1ac8033df",
              "caption": "Install suggested plugins",
              "alt": "",
              "width": 500,
              "height": 425,
              "instructor_notes": null
            },
            {
              "id": 1029129,
              "key": "1215ad50-741c-4ca8-abe2-c23a53eca44f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f1bf_screenshot-2020-03-14-at-6.29.34-pm/screenshot-2020-03-14-at-6.29.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1215ad50-741c-4ca8-abe2-c23a53eca44f",
              "caption": "Default plugins getting installed",
              "alt": "",
              "width": 500,
              "height": 244,
              "instructor_notes": null
            },
            {
              "id": 1029130,
              "key": "7b584282-3854-4e30-9ed2-a1050a59ca4d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "5. **Set up admin credentials:** Provide a username, password, and other details for yourself. You will have to use the same credentials when you'll come back to the current Jenkins console in the future. ",
              "instructor_notes": ""
            },
            {
              "id": 1029131,
              "key": "9e9c7001-c9c0-4b07-8351-e398d33c4b76",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f1fb_screenshot-2020-03-14-at-6.47.42-pm/screenshot-2020-03-14-at-6.47.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9e9c7001-c9c0-4b07-8351-e398d33c4b76",
              "caption": "",
              "alt": "",
              "width": 424,
              "height": 170,
              "instructor_notes": null
            },
            {
              "id": 1029132,
              "key": "830549b3-070e-4b21-958b-95cae86fe15d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "6. **Dashboard:** Next, it will show you a success message and take you to the Jenkins dashboard. ",
              "instructor_notes": ""
            },
            {
              "id": 1029133,
              "key": "08689705-ff45-41e5-894a-c26553f72797",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f21d_screenshot-2020-03-14-at-6.49.34-pm/screenshot-2020-03-14-at-6.49.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/08689705-ff45-41e5-894a-c26553f72797",
              "caption": "",
              "alt": "",
              "width": 470,
              "height": 125,
              "instructor_notes": null
            },
            {
              "id": 1029134,
              "key": "b67ba38f-0cb7-45d2-b3eb-dc07672943c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed0f232_screenshot-2020-03-14-at-6.53.29-pm/screenshot-2020-03-14-at-6.53.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b67ba38f-0cb7-45d2-b3eb-dc07672943c2",
              "caption": "Jenkins dashboard",
              "alt": "",
              "width": 600,
              "height": 323,
              "instructor_notes": null
            },
            {
              "id": 1133616,
              "key": "3b4b7281-9669-4221-82e1-a9b979b4bd80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "7. **Shut down:** Shut down the EC2 instance you have been using in the above tutorial steps because you will create a new EC2 instance for the upcoming demo. \n>**Reason:** In the current EC2 instance, the Jenkins service is running on port 8080. However, in the next demo, we want this port available for another purpose, running a container service. So, it may create a conflict and confusion for you. ",
              "instructor_notes": ""
            },
            {
              "id": 1029135,
              "key": "f4b128fa-c5ce-477b-890f-7052edfd9004",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### [Optional] Additional Tutorials\nMake yourself familiarized with the Jenkins pipeline implementation by following along below guided tutorials:\n* [Creating your first Pipeline](https://www.jenkins.io/doc/pipeline/tour/hello-world/)\n\n\n* [Build a Java app with Maven](https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/#stopping-and-restarting-jenkins)",
              "instructor_notes": ""
            },
            {
              "id": 1029137,
              "key": "9ca8ecb4-47ce-4795-8c5f-7d2a42ad4c94",
              "title": "Radio Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ca8ecb4-47ce-4795-8c5f-7d2a42ad4c94",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What language is Jenkins written in?",
                "answers": [
                  {
                    "id": "a1590753429587",
                    "text": "Python",
                    "is_correct": false
                  },
                  {
                    "id": "a1590753458648",
                    "text": "Ruby",
                    "is_correct": false
                  },
                  {
                    "id": "a1590753463646",
                    "text": "Scala",
                    "is_correct": false
                  },
                  {
                    "id": "a1590753520483",
                    "text": "Java",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1029138,
              "key": "e49ca468-1342-472b-814b-52c0bff648ad",
              "title": "MCQ",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e49ca468-1342-472b-814b-52c0bff648ad",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is `Jenkinsfile`?",
                "answers": [
                  {
                    "id": "a1590753836254",
                    "text": "A text file that contains the definition of a Jenkins Pipeline.",
                    "is_correct": true
                  },
                  {
                    "id": "a1590753943043",
                    "text": "A file that can be written in either of two types of syntax - Declarative or Scripted. ",
                    "is_correct": true
                  },
                  {
                    "id": "a1590753985017",
                    "text": "A configuration file that can define steps to be performed in different stages through the specified agent.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 901186,
          "key": "ad7c041c-e01f-4481-b5d6-a311803e064f",
          "title": "Bringing it all Together",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad7c041c-e01f-4481-b5d6-a311803e064f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 901187,
              "key": "df542bcc-dd76-4f09-ab2b-428bef0783a9",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Bringing it all together",
              "instructor_notes": ""
            },
            {
              "id": 901188,
              "key": "300e5c36-2919-4150-961f-135555c92ddf",
              "title": "ND035 C04 L05 A06 Product Development Phases Problem Set V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fNB2EFivAwY",
                "china_cdn_id": "fNB2EFivAwY.mp4"
              }
            },
            {
              "id": 1031957,
              "key": "b67380f4-e949-40dd-a8b4-c0680ff21f00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The following steps are demonstrated in the video above:\n1. **Launch an AWS EC2 instance**<br> \nUsing *Amazon Linux 2 AMI* and *t2.micro* instance type. This EC2 instance would already have the Docker package available on it. In addition, choose the following configuration:\n * Choose a default VPC, public subnet, and enable the auto-assign public IP\n * For the security group, allow TCP traffic on port 80 and 8080, and SSH traffic on port 22 from anywhere. Leave the remaining values as the defaults. \n * Download a new key-pair or use the existing one. \n\n\n2. **Connect to the EC2 instance**<br> \nUse SSH to connect to your Linux EC2 instance:\n```bash\n# Assuming the key name is AWS_EC2_DemoKey.pem available in the pwd\nchmod 400 AWS_EC2_DemoKey.pem\n# Assuming the public DNS is: ec2-18-221-37-196.us-east-2.compute.amazonaws.com\nssh -i \"AWS_EC2_DemoKey.pem\" ec2-user@ec2-18-221-37-196.us-east-2.compute.amazonaws.com\n```\n\n\n3. **Install Docker**<br> \nAfter successful connection, install the Docker, add the current user to the user-group, and reboot:\n```bash\n# update the existing packages\nsudo yum update\n# download and install Docker\nsudo yum install docker\n# Add the $USER user to the \"docker\" user group \n# The current $USER is ec2-user\nsudo usermod -a -G docker $USER\nsudo reboot\n```\nThe last command above will reboot the EC2 instance, and hence, your connection will be closed. Reconnect to your EC2 instance after 2 minutes, using the same SSH command as used in the previous step. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1133715,
              "key": "de4a7b0b-9b78-44b9-be1e-851396c324f6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024ddc0_screenshot-2021-02-11-at-12.46.59-pm/screenshot-2021-02-11-at-12.46.59-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/de4a7b0b-9b78-44b9-be1e-851396c324f6",
              "caption": "The [jenkinsci/blueocean](https://hub.docker.com/r/jenkinsci/blueocean/) Docker image in Docker hub",
              "alt": "",
              "width": 700,
              "height": 1586,
              "instructor_notes": null
            },
            {
              "id": 1133716,
              "key": "28abf517-691c-4a75-88b7-cbb8822f491d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n4. **Create and run your Container**<br>\nIn this final demo, we are using another Docker image, [jenkinsci/blueocean](https://hub.docker.com/r/jenkinsci/blueocean/), so that you do not have to write any Dockerfile. Let' start the Docker, create and run a container from this image. \n```bash\n# start Docker service\nsudo service docker start\n# Check if the Docker engine is running\nsystemctl show --property ActiveState docker\n# Create and run a new Container using the \"jenkinsci/blueocean\" image\ndocker run -u root -d --name myContainer -p 8080:8080 -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v \"$HOME\":/home jenkinsci/blueocean\n```\nIn the command above, the various options are:\n * --name create a name for your container, say **myContainer**. However, the demo has shown the **jenkins** as container name. \n * -p specifies a port on which the Jenkins server will run. Basically, `-p 8080:8080 ` mapping 8080 of the host (EC2 instance) to the 8080 of the container. \n * -d detached mode, meaning the container will run in the background\n * -v is binding a volume to persist the data of the Jenkins server. This is important because when we will restart the container, we would want the Jenkins related data (configuration, user-data, plugins) to be present there. We are binding three volumes.\n * `-v jenkins-data:/var/jenkins_home` is the first volume as the default home directory of Jenkins\n * `-v \"$HOME\":/home` is the second volume for user-specific data\n *  `-v /var/run/docker.sock:/var/run/docker.sock` is the third volume where we have defined a docker socket in the container. This one will help to execute docker commands from within the container. Have a look at this [discussion](https://stackoverflow.com/questions/35110146/can-anyone-explain-docker-sock#:~:text=137-,docker.,defaults%20to%20use%20UNIX%20socket.&text=There%20might%20be%20different%20reasons,Docker%20socket%20inside%20a%20container.) for more details. \n\n At this stage, the Jenkins console will come up on the 8080 port, say **http://18.221.37.196:8080** in your local browser. **But, we need to generate an additional RSA key-pair (public and private) to secure the pipeline. We will place the public key in the Github account, and private key in the Jenkins console.**",
              "instructor_notes": ""
            },
            {
              "id": 1133717,
              "key": "09c33cdb-e813-408e-9064-a8bd6347519c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024e08e_screenshot-2021-02-11-at-1.11.35-pm/screenshot-2021-02-11-at-1.11.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/09c33cdb-e813-408e-9064-a8bd6347519c",
              "caption": "Start Docker, and run a container",
              "alt": "",
              "width": 600,
              "height": 1556,
              "instructor_notes": null
            },
            {
              "id": 1133719,
              "key": "9dc65050-313c-4d8b-a9f8-31440fd00df0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "5. **Create an RSA key pair inside the container**<br>\nBefore login into the Jenkins console, let's create an RSA key pair inside the container. Recall that if you want to run any command inside of the container, then you first open a bash shell into the container, as shown below:\n```bash\n# Open a shell into myContainer. The container name may vary in your case\ndocker exec -it myContainer bash\n# Since our project is a Maven project, we need to install Maven in the container\napk add maven\n# Generate RSA key-pair. It will generate a public and private key. \n# We will place the public key in the Github account, and the private key in the Jenkins console\nssh-keygen -t rsa\n# View the private key\ncat /root/.ssh/id_rsa\n# View the pubic key \n cat /root/.ssh/id_rsa.pub\n```",
              "instructor_notes": ""
            },
            {
              "id": 1133718,
              "key": "aee5327b-188b-4c6c-a7c0-43b93d0cff88",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024e0c1_screenshot-2021-02-11-at-1.13.53-pm/screenshot-2021-02-11-at-1.13.53-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aee5327b-188b-4c6c-a7c0-43b93d0cff88",
              "caption": "First-time admin login to Jenkins console at EC2 instance's public IP appended with 8080 port. (Say, **http://18.221.37.196:8080**). The IP address will vary in your case. ",
              "alt": "",
              "width": 600,
              "height": 1024,
              "instructor_notes": null
            },
            {
              "id": 1133721,
              "key": "c3ba3050-5016-49ea-80a5-36fdd6ee5816",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "6. **Admin login to Jenkins console**<br>\n * Go to the AWS dashboard to copy the public IP address of your Linux EC2 instance. Paste the public IP address into your browser, and append with `:8080` port. For the first time, it will open up the Jenkins console GUI. It will ask you the admin password for the first-time.\n * The Jenkins admins password can be found at two places, in the host EC2 instance, and inside the container. \n```bash\n# Run the following commands in the host EC2 instance's terminal\ndocker ps\n# Use the container ID from the command above\ndocker logs <conatiner_id>\n```\nSince our Jenkins server is running inside of the container, therefore the admin password will also be stored there as well. \n```bash\n# Open the bash into the container\ndocker exec -it myContainer bash\n# View the file\ncat /var/jenkins_home/secrets/initialAdminPassword\n```\n * Paste the admin password into the Jenkins console, say http://18.221.37.196:8080 in your local browser, install the suggested plugins, and create the admin account. See the snapshots below. ",
              "instructor_notes": ""
            },
            {
              "id": 1133722,
              "key": "07d00c88-96ed-45fa-916e-1c11f3e4afd2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024eb11_screenshot-2021-02-11-at-1.51.38-pm/screenshot-2021-02-11-at-1.51.38-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/07d00c88-96ed-45fa-916e-1c11f3e4afd2",
              "caption": "",
              "alt": "",
              "width": 600,
              "height": 336,
              "instructor_notes": null
            },
            {
              "id": 1133723,
              "key": "cbedd278-05ee-41ee-81c5-2c2f95bb8156",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024eb2b_screenshot-2021-02-11-at-1.51.48-pm/screenshot-2021-02-11-at-1.51.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cbedd278-05ee-41ee-81c5-2c2f95bb8156",
              "caption": "Admin password in the logs of the host EC2 instance. ",
              "alt": "",
              "width": 600,
              "height": 706,
              "instructor_notes": null
            },
            {
              "id": 1133724,
              "key": "183bf3d8-0693-47db-bab5-aed708262a10",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024eb61_screenshot-2021-02-11-at-1.52.20-pm/screenshot-2021-02-11-at-1.52.20-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/183bf3d8-0693-47db-bab5-aed708262a10",
              "caption": "Admin password inside the container",
              "alt": "",
              "width": 600,
              "height": 308,
              "instructor_notes": null
            },
            {
              "id": 1133725,
              "key": "719b9167-1f05-45f5-8c35-5abeeecef195",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024ebfb_screenshot-2021-02-11-at-2.03.46-pm/screenshot-2021-02-11-at-2.03.46-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/719b9167-1f05-45f5-8c35-5abeeecef195",
              "caption": "Jenkins dashboard",
              "alt": "",
              "width": 600,
              "height": 1184,
              "instructor_notes": null
            },
            {
              "id": 1133714,
              "key": "68489d2e-eb3b-4947-a14f-14c5805b5b7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "7. **Add private key to Jenkins global credentials**<br>\nAt the Jenkins console, go to **Manage Jenkins** &#8594; **Manage Credentials** &#8594;\t**Global credentials** to create an SSH username and paste the private key. Recall that you can view the private key from the **bash into the container** as:\n```bash\n# Open the bash into the container, if you have exited from the bash\ndocker exec -it myContainer bash\n# View the private key\ncat /root/.ssh/id_rsa\n```\n\nSee the snapshots below. \n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1133728,
              "key": "57f4d5db-3c57-4cb8-b2c8-b459fa8c2f4e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024efa8_screenshot-2021-02-11-at-2.12.45-pm/screenshot-2021-02-11-at-2.12.45-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/57f4d5db-3c57-4cb8-b2c8-b459fa8c2f4e",
              "caption": "**Manage Jenkins** &#8594; **Manage Credentials**",
              "alt": "",
              "width": 600,
              "height": 1456,
              "instructor_notes": null
            },
            {
              "id": 1133729,
              "key": "b4b3a851-ce89-4418-af1b-c7c55a9e54b9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024efd5_screenshot-2021-02-11-at-2.13.23-pm/screenshot-2021-02-11-at-2.13.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b4b3a851-ce89-4418-af1b-c7c55a9e54b9",
              "caption": "Create a new **Global credential**",
              "alt": "",
              "width": 600,
              "height": 840,
              "instructor_notes": null
            },
            {
              "id": 1133730,
              "key": "60da6219-00e2-4951-ae22-220f12139464",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024f085_screenshot-2021-02-11-at-2.15.51-pm/screenshot-2021-02-11-at-2.15.51-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/60da6219-00e2-4951-ae22-220f12139464",
              "caption": "Paste the private key here. Note the **Kind** of credentials above. ",
              "alt": "",
              "width": 600,
              "height": 1254,
              "instructor_notes": null
            },
            {
              "id": 1133726,
              "key": "0a63845a-2b6e-48bd-bc08-f97f337fabfd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n8. **Add public key to Github repository**<br>\nLet's add the corresponding public key into the Github repository. Note that this is a good practice to use a pair of a public-private key. Go to the **repository in your Github account** &#8594; **Settings** &#8594; **Deploy keys** page. Paste the public key here. Recall that you can view the public key from the **bash into the container** as:\n```bash\n# View the pubic key \ncat /root/.ssh/id_rsa.pub\n```\n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1133738,
              "key": "b3088102-cec2-4b7a-8947-917eb66d328e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024f4a3_screenshot-2021-02-11-at-2.35.38-pm/screenshot-2021-02-11-at-2.35.38-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b3088102-cec2-4b7a-8947-917eb66d328e",
              "caption": "Go to Deploy keys settings",
              "alt": "",
              "width": 600,
              "height": 1374,
              "instructor_notes": null
            },
            {
              "id": 1133739,
              "key": "90551fa9-c10a-4dea-8702-d1460ee0e359",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6024f4d7_screenshot-2021-02-11-at-2.36.36-pm/screenshot-2021-02-11-at-2.36.36-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90551fa9-c10a-4dea-8702-d1460ee0e359",
              "caption": "Add the public key",
              "alt": "",
              "width": 600,
              "height": 1564,
              "instructor_notes": null
            },
            {
              "id": 1133727,
              "key": "9d9d6d7c-5790-4de6-973e-66b57203b36f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "9 ** Jenkins console: Create and build the first Job**\n * Create the **Freestyle project** type job, say **myFirstJob**, or choose any other name. Enter the details as mentioned below:\n\n<center>\n\n|**Tab**| **Field** | **Value**|\n|---|---|---|\n|General|Github project |Provide your Github repository URL|\n| Source Code Management| Git| Check |\n| |Repository URL |Provide your Github repository URL |\n| |Credentials |Choose the one you've created in the Global credentials |\n|Build | Add build step | Invoke top-level Maven targets | \n| | Goals |`package` |\n| |POM | Specify the POM file path relative to your repository home, such as <br> `starter_code/pom.xml`|\n</center>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Save the job, and click on the \"Build Now\" option. \n",
              "instructor_notes": ""
            },
            {
              "id": 1133741,
              "key": "6fcdbc4c-349d-402e-8f8a-cd97e8d07002",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602516ff_screenshot-2021-02-11-at-5.07.15-pm/screenshot-2021-02-11-at-5.07.15-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6fcdbc4c-349d-402e-8f8a-cd97e8d07002",
              "caption": "Build success",
              "alt": "",
              "width": 600,
              "height": 420,
              "instructor_notes": null
            },
            {
              "id": 901189,
              "key": "d28f3d66-6227-4221-928e-457f4a1e0150",
              "title": "ND035 C04 L05 A07 Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-4gG1POAdZA",
                "china_cdn_id": "-4gG1POAdZA.mp4"
              }
            }
          ]
        },
        {
          "id": 1136053,
          "key": "84d22d8f-3aa3-4ee0-bdc3-462734c2c861",
          "title": "Deployment - I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84d22d8f-3aa3-4ee0-bdc3-462734c2c861",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1136057,
              "key": "17e49804-1457-4c2c-8ab9-1753485ae42e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We have learned how to create the build using the Jenkins pipeline. The next crucial step is deploying the build generated from the Jenkins pipeline. In easy words, deployment refers to running the application on a machine with a (Tomcat) web server already running. \n\nConsidering that Jenkins generated a build (.war) file in a container residing on an EC2 host. Now, there are a **few options** to install and run the Tomcat web server:\n1. Install Tomcat on the same host EC2 instance\n\n\n2. **Install Tomcat in a new container residing on the same host EC2 instance**\n\n\n3. Install Tomcat on a new EC2 instance\n\n\n4. Install Tomcat in a new container residing on a *new* EC2 instance\n\nFor the current exercise, let's go with **option 2** above. Therefore the new system diagram will look like:",
              "instructor_notes": ""
            },
            {
              "id": 1136056,
              "key": "bb8073fc-cf35-4b6e-b114-1b2f9c019b14",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602638fb_copy-of-ci-cd-pipeline-1/copy-of-ci-cd-pipeline-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bb8073fc-cf35-4b6e-b114-1b2f9c019b14",
              "caption": "Refined overarching system diagram",
              "alt": "",
              "width": 681,
              "height": 235,
              "instructor_notes": null
            },
            {
              "id": 1163518,
              "key": "8142466b-7b1b-4746-91fa-a07369f79080",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overview and Initial Setup",
              "instructor_notes": ""
            },
            {
              "id": 1163515,
              "key": "13fc4049-2c06-4199-91c9-a932d0d0403a",
              "title": "ND035 C4 Security And DevOps Deploy 01a",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8M_vvo9V7_E",
                "china_cdn_id": "8M_vvo9V7_E.mp4"
              }
            },
            {
              "id": 1136058,
              "key": "f1b1f2ea-03f4-4a39-9cc3-9d64d0ce2368",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* **Why another container?**<br>\nIn addition to the portability of the application, another advantage of using a new container is:\n>A container has no resource constraints and can use as much of a given resource as the host's kernel scheduler allows. Source [here](https://docs.docker.com/config/containers/resource_constraints/#:~:text=By%20default%2C%20a%20container%20has,of%20the%20docker%20run%20command.).",
              "instructor_notes": ""
            },
            {
              "id": 1136059,
              "key": "2f9c06ea-b5a1-4afd-9a6e-0ec747fbaec1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nOn the same EC2 instance where you have created the Jenkins server container, we will create a new container using a pre-created [tomcat](https://hub.docker.com/_/tomcat) image available at Dockerhub. It will require a few configurations before running our application.  \n",
              "instructor_notes": ""
            },
            {
              "id": 1136060,
              "key": "6550630f-b4bb-44a6-9b06-2de8532d63c5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60264030_screenshot-2021-02-12-at-2.15.11-pm/screenshot-2021-02-12-at-2.15.11-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6550630f-b4bb-44a6-9b06-2de8532d63c5",
              "caption": "**tomcat** Docker image",
              "alt": "",
              "width": 600,
              "height": 1076,
              "instructor_notes": null
            },
            {
              "id": 1136061,
              "key": "a3eb014f-41d0-4833-bc85-20d61c889330",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Initial Setup\n1. **Firewall rules**<br>\nEnsure that you are working on the same EC2 instance where you have installed the Jenkins container.  Recall that Jenkins was accessible on port `8080` from your local browser, therefore we will run Tomcat on a different port, say `8888`.  For this, reason, you will have to **edit the security group of your EC2 instance to allow traffic on `8888`**. See the snapshots below.  ",
              "instructor_notes": ""
            },
            {
              "id": 1136063,
              "key": "90a293fd-7735-45db-b57e-c78e5b2db526",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026435d_screenshot-2021-02-12-at-2.22.33-pm/screenshot-2021-02-12-at-2.22.33-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90a293fd-7735-45db-b57e-c78e5b2db526",
              "caption": "Edit the security group",
              "alt": "",
              "width": 600,
              "height": 1278,
              "instructor_notes": null
            },
            {
              "id": 1136062,
              "key": "2d704e4b-1e4d-4991-8e3e-dc98f8df750d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026432b_screenshot-2021-02-12-at-2.23.31-pm/screenshot-2021-02-12-at-2.23.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2d704e4b-1e4d-4991-8e3e-dc98f8df750d",
              "caption": "Edit Inbound rules to allow traffic on port 8888 of the EC2 instance. ",
              "alt": "",
              "width": 600,
              "height": 540,
              "instructor_notes": null
            },
            {
              "id": 1136064,
              "key": "b27be8fc-d05a-4d3f-bb19-d09558758d28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Checking on the EC2 instance**<br> \nReconnect to your EC2 instance, and ensure that the docker services are running:\n```bash\n# Note that the Public IP addresses of an EC2 instance keep changing after every reboot\n# Replace the key file name and DNS as applicable to you\nssh -i \"AWS_EC2_DemoKey.pem\" ec2-user@ec2-18-222-193-10.us-east-2.compute.amazonaws.com\n# Start Docker service\nsudo service docker start\n# Check if the Docker engine is running\nsystemctl show --property ActiveState docker\n# Check the stopped containers\ndocker ps --filter \"status=exited\"\n# Check the running containers\ndocker ps\n```\nIf the previously created Jenkins container, `myContainer`, is stopped, you can restart it using:\n```bash\ndocker start <conatiner_name/ID>\n```\nVerify the Jenkins server is up and running in your local browser on port 8080, say http://18.222.193.10:8080/ . You could be prompted to provide admin credentials. \n",
              "instructor_notes": ""
            },
            {
              "id": 1136065,
              "key": "a7e6b1eb-fc62-4bbd-98ad-48938ba74abb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602646cd_screenshot-2021-02-12-at-2.43.02-pm/screenshot-2021-02-12-at-2.43.02-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a7e6b1eb-fc62-4bbd-98ad-48938ba74abb",
              "caption": "Provide the admin credentials you set up initially<br>\n(This is where the -v option comes into the picture)",
              "alt": "",
              "width": 250,
              "height": 950,
              "instructor_notes": null
            },
            {
              "id": 1163520,
              "key": "5e0029f4-7fa8-4168-8ca9-4b106c0c8b6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create and run a new container\n\n1. **Run the container**<br>\nUse the pre-created <a href=\"https://hub.docker.com/_/tomcat\" target=\"_blank\">tomcat</a> image to run a container. This image is built using the Tomcat version 9 and uses JDK8:\n```\ndocker run -dit --name myTomcatServer -p 8888:8080 tomcat:jdk8\n```\n\n In the command above:\n\n * The name of the container is *myTomcatServer*\n * -d will run it in detached mode\n * -i will keep the STDIN open \n * -t will allocate a pseudo-tty\n * `-p 8888:8080` is the host-conatiner port mapping. It will ensure that the tomcat server will be accessible from the port `8888` on the host, and it will run on the port `8080` of the container.",
              "instructor_notes": ""
            },
            {
              "id": 1163521,
              "key": "41267a52-b26e-44ba-8fcf-dee3e1edc156",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026b06c_screenshot-2021-02-12-at-10.13.17-pm/screenshot-2021-02-12-at-10.13.17-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/41267a52-b26e-44ba-8fcf-dee3e1edc156",
              "caption": "Port mapping between host and containers",
              "alt": "",
              "width": 500,
              "height": 1274,
              "instructor_notes": null
            },
            {
              "id": 1163522,
              "key": "a378d0b6-d8d4-4063-b003-ba7f6c7c82a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<center>\n*Move on to the next page for further steps.*\n</center>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1136066,
          "key": "646d6aa7-0f51-45b2-98b0-1a0fbc7e76fc",
          "title": "Deployment - II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "646d6aa7-0f51-45b2-98b0-1a0fbc7e76fc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1163519,
              "key": "c0b5c2ac-c578-4729-ac86-8e7f1920a9a1",
              "title": "ND035 C4 Security And DevOps Deploy 01b",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-rG6O9ZzGfI",
                "china_cdn_id": "-rG6O9ZzGfI.mp4"
              }
            },
            {
              "id": 1136151,
              "key": "39814d5e-f678-4374-87c7-ba5d89b83e2a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Copy files to the default folder**<br>\nView the container ID, and open a bash inside the *myTomcatServer* container:\n```bash\n# Verify running containers\ndocker ps\n# Open a bash into the container\ndocker exec -it myTomcatServer bash\n```\nYou will be taken to the default directory of Tomcat: `/usr/local/tomcat`. Note that the Tomcat serves the application residing in the **webapps** folder. By default, this folder does not contain the Welcome page of Tomcat. So, let's copy the contents of **webapps.dist** directory to **webapps** directory.\n```bash\n# View the files inside the /usr/local/tomcat folder. Notice the webapps folder\nls -l\n# Copy the files from webapps.dist to the webapps folder\ncp -r webapps.dist/* webapps\n# Come out of the bash, when needed\nexit\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 1136068,
              "key": "ffe6df53-b3e0-47ed-8cbf-4210fe39253c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602653f2_screenshot-2021-02-12-at-3.38.44-pm/screenshot-2021-02-12-at-3.38.44-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ffe6df53-b3e0-47ed-8cbf-4210fe39253c",
              "caption": "The same output of `docker ps` and `docker container ls` commands. <br> Notice that the Jenkins is accessible on port 8080, while Tomcat is accessible on port 8888",
              "alt": "",
              "width": 1000,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 1136069,
              "key": "68023906-f616-494d-b35b-fc70088b9d18",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602655ea_screenshot-2021-02-12-at-3.46.13-pm/screenshot-2021-02-12-at-3.46.13-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/68023906-f616-494d-b35b-fc70088b9d18",
              "caption": "Copy the contents of *webapps.dist* directory to *webapps* directory",
              "alt": "",
              "width": 600,
              "height": 1084,
              "instructor_notes": null
            },
            {
              "id": 1136070,
              "key": "592524d6-e635-42e7-8950-a5794e00d645",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. **Welcome page**<br>\nGo to the AWS dashboard to copy the public IP address of your Linux EC2 instance. Paste the public IP address into your browser, and append with `:8888` port, say http://18.222.193.10:8888/ . It will show you the welcome page.",
              "instructor_notes": ""
            },
            {
              "id": 1136071,
              "key": "e61f9406-f1d3-41c7-af71-4e10ea61b13b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602659dc_screenshot-2021-02-12-at-3.58.46-pm/screenshot-2021-02-12-at-3.58.46-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e61f9406-f1d3-41c7-af71-4e10ea61b13b",
              "caption": "Tomcat welcome page at http://18.222.193.10:8888/ <br>\nFeel free to navigate the directories inside the *webapps* folder, such as  http://18.222.193.10:8888/examples/ ",
              "alt": "",
              "width": 600,
              "height": 892,
              "instructor_notes": null
            },
            {
              "id": 1136072,
              "key": "8c64f2dd-3dbd-4efd-8237-cd231544d664",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60265b41_screenshot-2021-02-12-at-4.10.55-pm/screenshot-2021-02-12-at-4.10.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c64f2dd-3dbd-4efd-8237-cd231544d664",
              "caption": "At the same time, the Jenkins server is running at port 8080",
              "alt": "",
              "width": 600,
              "height": 642,
              "instructor_notes": null
            },
            {
              "id": 1136073,
              "key": "17c3725f-b177-457f-b728-3fad2ca0f8a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Configure the Tomcat | Add user and roles\nIf you try to access the **Manager App** link on the Tomcat welcome page (http://18.222.193.10:8888/), you will be denied access to resources. This is a role-based access control feature of the Tomcat web server. Let's see how we can edit the necessary configuration. ",
              "instructor_notes": ""
            },
            {
              "id": 1136074,
              "key": "64de9e21-41e0-480c-a6f5-c3e478d86b61",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60265cad_screenshot-2021-02-12-at-4.16.17-pm/screenshot-2021-02-12-at-4.16.17-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/64de9e21-41e0-480c-a6f5-c3e478d86b61",
              "caption": "Tomcat denying access to privileged resources, and <br>pointing us to edit the **context.xml** or **tomcat-users.xml** file.",
              "alt": "",
              "width": 700,
              "height": 490,
              "instructor_notes": null
            },
            {
              "id": 1136075,
              "key": "b5c4f925-1ca5-4f02-8c7d-accbc463eaf9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. **Install a text editor in container**<br>\nRun the following commands from within the bash into the * myTomcatServer* container: \n```bash\n# Install VIM editor because we need to edit a few files\napt-get update\napt-get install vim\n```\nNow, you can open any file to edit by using `vi file_name` command. Open the first file to edit:\n```bash\n# Open the file with an editor\nvi conf/tomcat-users.xml \n```",
              "instructor_notes": ""
            },
            {
              "id": 1136076,
              "key": "14dca169-5976-45a2-a947-9ecc766ad400",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268bf1_screenshot-2021-02-12-at-4.40.04-pm/screenshot-2021-02-12-at-4.40.04-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/14dca169-5976-45a2-a947-9ecc766ad400",
              "caption": "Add the highlighted lines of code in the`conf/tomcat-users.xml` file. This file is opened in VIM editor",
              "alt": "",
              "width": 600,
              "height": 1710,
              "instructor_notes": null
            },
            {
              "id": 1136077,
              "key": "de24dc8a-7c9a-42c0-b2a5-e5a5f00a5f20",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Edit the `tomcat-users.xml ` file**<br>\nIn the XML file above, the `<!--` shows the beginning of a multi-line comment, and `-->` shows the end of a comment. Add two new roles, and assign them to a new user, *admin*, just above the `</tomcat-users>` tag.\n```xml\n<role rolename=\"admin-gui\"/>\n<role rolename=\"manager-gui\"/>\n<role rolename=\"manager-script\"/>\n<user username=\"admin\" password=\"admin\" roles=\"admin-gui, manager-gui, manager-script\"/>\n```\nA sample code is already available in the XML file above. You may need a little help with VIM editor keys: \n * Press **ESC** + **i** key to enter into the Insert mode. This is the mode where you can scroll/edit in the file. Another useful mode is Visual mode, **ESC** + **v**.\n * When you are done, press **ESC** + **:wq** to Save and quit.\n * Press **ESC** + **:q!** to quit without saving anything. Have look at this [cheat sheet](https://vim.rtorr.com/) for more VIM commands. \n * To copy here is called Yank, which works only in Visual mode, **ESC** + **v**.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1136080,
              "key": "4a522acb-64e4-4bc6-93eb-677053a96c3e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. **Edit the `context.xml` file**<br>\n```bash\n# Find the context.xml files\nfind . -name context.xml\n# Open the manager context file in VIM editor\nvi ./webapps/manager/META-INF/context.xml\n```\nComment the following line of code by append it with `<--` and putting a `-->` at the end.\n```xml\n <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n\t\t  allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" />\n```\nUse the arrow keys to navigate in the file, and VIM commands to add `<--` and `-->` at suitable places. See the snapshot below:",
              "instructor_notes": ""
            },
            {
              "id": 1136098,
              "key": "5bc789b5-70dc-4f15-a765-3dd6b535a0f8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268bb0_screenshot-2021-02-12-at-5.10.42-pm/screenshot-2021-02-12-at-5.10.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5bc789b5-70dc-4f15-a765-3dd6b535a0f8",
              "caption": "Find the `context.xml` files",
              "alt": "",
              "width": 600,
              "height": 550,
              "instructor_notes": null
            },
            {
              "id": 1136097,
              "key": "3b06ade8-6dad-480f-9ee4-b4d18ab242ef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268ab5_screenshot-2021-02-12-at-5.12.29-pm/screenshot-2021-02-12-at-5.12.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3b06ade8-6dad-480f-9ee4-b4d18ab242ef",
              "caption": "Comment out the highlighted code in the `context.xml` file",
              "alt": "",
              "width": 600,
              "height": 1332,
              "instructor_notes": null
            },
            {
              "id": 1136083,
              "key": "f8bbdffb-53df-41d4-91c7-089ca1b89cf0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Note**: A new user is required in our deployment because Jenkins (from another container) will attempt to push the application build to the Tomcat server (current container). We will see a way to share these credentials with Jenkins to allow pushing the build here. ",
              "instructor_notes": ""
            },
            {
              "id": 1163524,
              "key": "cc35402a-9951-4b95-a904-5225ef050da4",
              "title": "ND035 C4 Security And DevOps Deploy 01c (Online-Video-Cutter.Com)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OezyvFtcxO0",
                "china_cdn_id": "OezyvFtcxO0.mp4"
              }
            },
            {
              "id": 1136079,
              "key": "f2e54bd3-4d74-4d55-9791-2b44c9e5b9c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "4. **Restart the Tomcat server**<br>\nRun the following commands from within the bash into the *myTomcatServer* container: \n```bash\n# Shutdown the server\n ./bin/shutdown.sh \n```\nIt will stop the container as well. Restart the *myTomcatServer* container:\n```bash\ndocker start myTomcatServer\n```\nNow, the http://18.222.193.10:8888/manager/html will ask you for manager-gui credentials before showing the manager page. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1136082,
              "key": "0d22cea1-2f86-4a70-8283-ca9b378159ae",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60266ad3_screenshot-2021-02-12-at-5.14.17-pm/screenshot-2021-02-12-at-5.14.17-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0d22cea1-2f86-4a70-8283-ca9b378159ae",
              "caption": "Prompt asking for Tomcat manager-gui password",
              "alt": "",
              "width": 600,
              "height": 566,
              "instructor_notes": null
            },
            {
              "id": 1136081,
              "key": "75a05367-3534-40d0-b1ee-df53a32bc161",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60266a90_screenshot-2021-02-12-at-5.14.42-pm/screenshot-2021-02-12-at-5.14.42-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/75a05367-3534-40d0-b1ee-df53a32bc161",
              "caption": "Output at http://18.222.193.10:8888/manager/html ",
              "alt": "",
              "width": 600,
              "height": 1512,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1136084,
          "key": "fe0851c3-345f-4bda-9e70-8d82d9dda45d",
          "title": "Deployment - III",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe0851c3-345f-4bda-9e70-8d82d9dda45d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "sample.war",
                "uri": "https://video.udacity-data.com/topher/2021/March/605c8afd_sample/sample.war"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 1136085,
              "key": "6cfdc7ce-7e46-4b13-a75a-30dfcfd276aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Jenkins | Add Plugins | Configure Tools\nIn this step, we will configure the Jenkins console to connect the other end of *pipeline* to Tomcat container. You can visualize that the first end of the *pipeline* is already connected with your Github repository. ",
              "instructor_notes": ""
            },
            {
              "id": 1163528,
              "key": "90f75521-1f50-4a01-a8e8-5450e04013f8",
              "title": "ND035 C4 Security And DevOps Deploy 01c (Online-Video-Cutter.Com) (1)",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MmR4Rm1_lIo",
                "china_cdn_id": "MmR4Rm1_lIo.mp4"
              }
            },
            {
              "id": 1136086,
              "key": "52e5909f-5870-4fd8-9995-f6750bb23a89",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. **Add Plugins**<br>\nOn the Jenkins console, go to the Manage Jenkins &#8594; Manage Plugins section. Here you can add new ones, or update the existing plugins. For our deployment, we need to add the following two plugins:\n\n * **Deploy to container plugin**: This plugin takes a war/ear file and deploys that to a running remote application server at the end of a build. \n * **Maven Integration plugin**: This plugin is used for building Maven jobs. \n \n The snapshots below show that we have already installed them on our Jenkins. In your case, search with name on the **Available** tab, and install. ",
              "instructor_notes": ""
            },
            {
              "id": 1136096,
              "key": "483c6652-55a0-4cc6-9138-ec2cd55696c0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268a2b_screenshot-2021-02-12-at-5.36.05-pm/screenshot-2021-02-12-at-5.36.05-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/483c6652-55a0-4cc6-9138-ec2cd55696c0",
              "caption": "Manage Plugins",
              "alt": "",
              "width": 600,
              "height": 860,
              "instructor_notes": null
            },
            {
              "id": 1136095,
              "key": "b7a63b3c-7abf-41de-9f60-5f09a5f0c5c7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602689ee_screenshot-2021-02-12-at-5.36.50-pm/screenshot-2021-02-12-at-5.36.50-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b7a63b3c-7abf-41de-9f60-5f09a5f0c5c7",
              "caption": "Deploy to container plugin",
              "alt": "",
              "width": 500,
              "height": 916,
              "instructor_notes": null
            },
            {
              "id": 1136094,
              "key": "211bc70d-6e13-4f3f-b7e2-0d8d46bb99d6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602689d2_screenshot-2021-02-12-at-5.38.23-pm/screenshot-2021-02-12-at-5.38.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/211bc70d-6e13-4f3f-b7e2-0d8d46bb99d6",
              "caption": "Maven Integration plugin",
              "alt": "",
              "width": 500,
              "height": 590,
              "instructor_notes": null
            },
            {
              "id": 1136087,
              "key": "4fcac0c8-356f-45c4-b8a1-0dc34f05583d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Configure Java and Maven on Jenkins**<br>\nWhile building and deploying the application, the right compatible version of Java Maven should be present on the Jenkins server. You can check the version of Java and Maven from inside of the Jenkins container:\n```bash\n# Open a shell into the Jenkins container\ndocker exec -it myContainer bash\njava -version\necho $JAVA_HOME\n# We already installed Maven using the command \"apk add maven\" earlier\nmvn -version\n```\n\n Go to the Jenkins console, and open the Manage Jenkins &#8594; Global Tool Configuration settings. \n\n<center>\n\n|**Section**|**Field**|**Value**|\n|---|---|---|\n|JDK|JDK Name|`JDK1.8`|\t\n| |JAVA_HOME|The output of `echo $JAVA_HOME`, <br>such as `/opt/java/openjdk`|\n| Maven | Maven Name | Check the version using `mvn -version` <br>in your container, such as Maven 3.6.3|\n||Install automatically|Check|\n</center>\n---",
              "instructor_notes": ""
            },
            {
              "id": 1136092,
              "key": "f4fe5494-0e66-4480-a2a8-c0500cb87494",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268931_screenshot-2021-02-12-at-5.40.40-pm/screenshot-2021-02-12-at-5.40.40-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f4fe5494-0e66-4480-a2a8-c0500cb87494",
              "caption": "JDK section in Global Tool Configuration",
              "alt": "",
              "width": 500,
              "height": 766,
              "instructor_notes": null
            },
            {
              "id": 1136088,
              "key": "c8765a11-c5e4-467a-ba9b-35fbf73e4394",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026724a_screenshot-2021-02-12-at-5.48.33-pm/screenshot-2021-02-12-at-5.48.33-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c8765a11-c5e4-467a-ba9b-35fbf73e4394",
              "caption": "Check Java and Maven version in Jenkins container",
              "alt": "",
              "width": 600,
              "height": 1038,
              "instructor_notes": null
            },
            {
              "id": 1136093,
              "key": "813e78fe-27d3-4fc7-b776-fa6b1f800f71",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/60268943_screenshot-2021-02-12-at-5.39.50-pm/screenshot-2021-02-12-at-5.39.50-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/813e78fe-27d3-4fc7-b776-fa6b1f800f71",
              "caption": "Maven section in Global Tool Configuration",
              "alt": "",
              "width": 500,
              "height": 1006,
              "instructor_notes": null
            },
            {
              "id": 1163529,
              "key": "9e312772-5bac-4916-9af5-b99e0b39d9e8",
              "title": "ND035 C4 Security And DevOps Deploy 01d",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SEP7LZRWN3M",
                "china_cdn_id": "SEP7LZRWN3M.mp4"
              }
            },
            {
              "id": 1136100,
              "key": "5889bbf7-7227-4ccd-8ac3-d5eeab86d4de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. **Configure the Job**<br>\nIf you already have a **Job** created from the earlier demo, go ahead and configure it again. Else, create a new **Freestyle project** type job, say *myFirstJob*. (Feel free to check the Pipeline project type, next time). \n * Use the following configuration details, and leave the remaining as default:\n\n<center>\n\n|**Section**| **Field** | **Value**|\n|---|---|---|\n|General| Description |Text of your choice|\n||Github project |Provide your Github repository URL|\n| Source Code Management| Git| Check |\n| |Repository URL |Provide your Github repository URL |\n| |Credentials |Choose the one you've created in the Global credentials |\n|Build Triggers|Poll SCM &#8594; Schedule |`* * * * *`<br> It means poll the code every minute. <br> Youcan also use `H * * * *` to poll once per hour|\n|Build Environment|Delete workspace before build starts|Check<br>Jenkins creates a workspace where it stores <br> the build file, such as WAR. In our case, this workspace <br> will be available in the Jenkins container|\n|Build | Add build step | Invoke top-level Maven targets | \n| | Goals |`clean compile package` <br> *clean* - delete the existing target folder<br>*compile* - compile source code<br>*package* - package the application to WAR file. <br>Note that the package type in POM.xml is WAR|\n| |POM | Specify the POM file path relative to your repository home, <br>such as  `starter_code/pom.xml`|\n",
              "instructor_notes": ""
            },
            {
              "id": 1136106,
              "key": "f571c756-c751-488f-80a5-3096a6e70085",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Above configuration might seem familiar to you. The section responsible for deployment to the target container is **Post-build Actions**. In this section, choose the **Deploy war/ear to a container** option, and use the following configuration details:\n\n<center>\n\n| **Field** | **Value**|\n|---|---|\n|WAR/EAR files|`**/*.war`|\n|Context path|`myApp`<br>Context represents a single web application running within a given instance of Tomcat. |\n| Containers |Choose Tomcat 9 <br>*(Because our Tomcat container is having v9)*|\n| Credentials |Add a new credentials<br> Add Global credentials with username/password as admin/admin .<br> Recall that we created these credentials in the Tomcat container, `tomcat-users.xml` file|\n|Tomcat URL|<**Private IP** of **host** EC2 instance>:8888<br>Recall that we had mapped 8888 port of host with the 8080 port of Tomcat container|\n</center>\n&nbsp; &nbsp; &nbsp; &nbsp; The reason we are using the **Private IP** of **host** EC2 instance is because the public one keeps changing with time. \n",
              "instructor_notes": ""
            },
            {
              "id": 1136126,
              "key": "c219fe8a-b936-4382-a452-b506baf49559",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026a4f7_screenshot-2021-02-12-at-9.14.05-pm/screenshot-2021-02-12-at-9.14.05-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c219fe8a-b936-4382-a452-b506baf49559",
              "caption": "Post-build Actions &#8594; Deploy war/ear to a container settings",
              "alt": "",
              "width": 500,
              "height": 1374,
              "instructor_notes": null
            },
            {
              "id": 1136122,
              "key": "1bf27fb1-8aef-48a7-85eb-1dd772f4e5f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "4. **Build and Verify**<br>\n * Save the job, and click on the \"Build Now\" option.",
              "instructor_notes": ""
            },
            {
              "id": 1136125,
              "key": "97ddd470-b47c-4dac-ae92-fc8b5b6487eb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026a4c2_screenshot-2021-02-12-at-9.21.54-pm/screenshot-2021-02-12-at-9.21.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/97ddd470-b47c-4dac-ae92-fc8b5b6487eb",
              "caption": "Successful deployment",
              "alt": "",
              "width": 700,
              "height": 1336,
              "instructor_notes": null
            },
            {
              "id": 1136137,
              "key": "2974ab87-c3d6-44ac-8479-ff77b9de55ab",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026a9d9_screenshot-2021-02-12-at-9.45.00-pm/screenshot-2021-02-12-at-9.45.00-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2974ab87-c3d6-44ac-8479-ff77b9de55ab",
              "caption": "Jenkins dashboard showing the SUCCESS status of the *myFirstJob*",
              "alt": "",
              "width": 500,
              "height": 564,
              "instructor_notes": null
            },
            {
              "id": 1136134,
              "key": "138f990d-8074-4cb5-bddc-92794bf00bd5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Verify the deployment in the running Tomcat container. If you are logged out of the SSH connection, then reconnect to the host EC2 instance. Open a shell into the Tomcat container, and check the contents of the **webapps** folder. You must notice the newly created **myApp** folder there.",
              "instructor_notes": ""
            },
            {
              "id": 1136136,
              "key": "a2da71de-6a9f-40d0-a95e-1ac85b0aeda5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/6026a896_screenshot-2021-02-12-at-9.35.32-pm/screenshot-2021-02-12-at-9.35.32-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a2da71de-6a9f-40d0-a95e-1ac85b0aeda5",
              "caption": "The deployed WAR file and the correponding extracted folder",
              "alt": "",
              "width": 500,
              "height": 928,
              "instructor_notes": null
            },
            {
              "id": 1136135,
              "key": "01668bf7-f8c0-41ff-862d-158e99920819",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* The Jenkins deployed the WAR file, and the Tomcat server automatically extracts it to a folder. \n\n<br>\n**Congratulations! You have finished your first pipeline deployment on the cloud.**",
              "instructor_notes": ""
            },
            {
              "id": 1136455,
              "key": "27900b59-f70f-471f-8733-750d263223d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---\n### Optional Step\n#### Verify if Tomcat can automatically extract the WAR file present inside the *webapps* folder\nLet's copy a [Sample Application](https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/) \n1. Download the **sample.war** file from the link above. We have also attached the same file at the bottom of this page.\n\n\n2. Copy the **sample.war** file from the local computer to the host EC2 instance:\n```\nscp -i AWS_EC2_DemoKey.pem ../Desktop/sample.war ec2-user@3.141.40.172:/home/ec2-user/sample.war\n```\nIn the command above:\n * The key file is present inside the current folder.\n * The sample.war file is downloaded from the link mentioned above, and present in the`../Desktop/` folder. \n * The `3.141.40.172` is the public IP address of the EC2 instance\n * The target folder is `home/ec2-user/`\nYou can tweak the command above as applicable to you. \n\n\n3. Once the **sample.war** file is transferred to the host EC2 instance, copy the same file to the container. \n```\n# The sample.war file must be present in the home directory of the logged-in user\nls\n# Copy the file to the \"myTomcatServer\" container\ndocker cp sample.war myTomcatServer:/usr/local/tomcat/webapps/\n```\n\n\n4. Tomcat will automatically extract the sample.war file present inside the *webapps* folder. You can check the output at http://18.222.193.10:8888/sample URL. ",
              "instructor_notes": ""
            },
            {
              "id": 1163534,
              "key": "451dcf96-6e6d-4852-9631-f71944d5afd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">To download the supporting material below, right-click on the file name and select the \"*Save Link As...*\"  (Chrome or Firefox) / \"*Download Linked File As...*\"  (Safari) / \"*Save As...*\" (Windows Edge) option.  ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1136142,
          "key": "60c57968-3095-40a2-983d-5a05bd1cf348",
          "title": "Another Deployment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60c57968-3095-40a2-983d-5a05bd1cf348",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1163551,
              "key": "a8808c79-4360-475f-8d6e-466096276e97",
              "title": "ND035 C4 Security And DevOps Deploy 02a",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6ywkbl8eNvY",
                "china_cdn_id": "6ywkbl8eNvY.mp4"
              }
            },
            {
              "id": 1136445,
              "key": "81b2f652-1741-4bc8-a1a7-85c2fef72a6b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Recall that there were a few options to decide where to run the target Tomcat server. We have already seen how to run a Tomcat server in a new container residing on the **same host EC2 instance**, and deploy our application to it. ",
              "instructor_notes": ""
            },
            {
              "id": 1136448,
              "key": "e30f77aa-6647-4e19-a332-1b3359c592ba",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a2ead_screenshot-2021-02-15-at-1.45.43-pm/screenshot-2021-02-15-at-1.45.43-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e30f77aa-6647-4e19-a332-1b3359c592ba",
              "caption": "System overarching diagram - I",
              "alt": "",
              "width": 700,
              "height": 356,
              "instructor_notes": null
            },
            {
              "id": 1136446,
              "key": "4a65abd2-e64b-426e-b7d3-4b84359218c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, let's consider one more possibility: Run the Tomcat in a new container residing on a **new EC2 instance**, and deploy our application to it. See the diagram below to understand the system-flow:",
              "instructor_notes": ""
            },
            {
              "id": 1136447,
              "key": "376fb42d-e24f-43ef-b0df-53eb11c2d0f0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a351e_screenshot-2021-02-15-at-2.17.04-pm/screenshot-2021-02-15-at-2.17.04-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/376fb42d-e24f-43ef-b0df-53eb11c2d0f0",
              "caption": "System overarching diagram - II",
              "alt": "",
              "width": 700,
              "height": 366,
              "instructor_notes": null
            },
            {
              "id": 1136449,
              "key": "01791667-1193-498c-b14a-d26b6fde5221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ToDo: Deploy to a new container residing on a NEW EC2 instance",
              "instructor_notes": ""
            },
            {
              "id": 1136144,
              "key": "c62e1902-b8d5-4c0c-9501-cea0865d909d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### 1. Launch a new host EC2 instance \nLaunch a new EC2 instance, based on `Amazon Linux 2 AMI` and `t2.small`/`t2.micro`. Let's name it **Host_2**, assuming we already have Jenkins running inside a container on *Host_1*. \n\n#### 2. Install docker on EC2 instance \nConnect to Host_2 using SSH, and install docker:\n```bash\n# update the existing packages\nsudo yum update\nsudo  yum install docker\n```\n\n#### 3. Create a new user for Docker management, and add that user to Docker (default) group. \n```bash\nsudo useradd host2admin\nsudo passwd host2admin\n# Add the host2admin user to the \"docker\" user group \nsudo usermod -aG docker host2admin\n# Add the $USER user to the \"docker\" user group. The current $USER is ec2-user\nsudo usermod -a -G docker $USER\nsudo reboot\n```\n\n#### 4. Start services \n```bash\n# Reconnect using SSH. The public IP will change after reboot\nsudo service docker start\n# Verify that you can run docker commands without sudo.\ndocker run hello-world\n```\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1163558,
              "key": "c4a623d8-f667-4b51-a579-96de2093fadd",
              "title": "ND035 C4 Security And DevOps Deploy 02b",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nQIAgI9ycLY",
                "china_cdn_id": "nQIAgI9ycLY.mp4"
              }
            },
            {
              "id": 1136436,
              "key": "7c46139f-42c7-4343-ae23-112bd43b1788",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### 5. Write a Dockerfile under /opt/docker/ directory\n* Create the /opt/docker/ directory\n```bash\nsudo su -\ncd /opt\nmkdir docker\ncd docker\nvi Dockerfile\n```\n* Add the following to the new Dockerfile\n```bash\n# Pull base image \nFrom tomcat:8-jre8 \n# Maintainer\nMAINTAINER \"Udacity\" \n# copy war file on to container \nCOPY ./*.war /usr/local/tomcat/webapps\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 1136437,
              "key": "b5918e25-2a6c-4709-aa36-4c899589003e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### 6. Allow Jenkins' access to the Docker \nJenkins will attempt to write files in the Docker as the newly created user \"host2admin\". Therefore, enable the password-based authentication\n```bash\nvi /etc/ssh/sshd_config\n# Comment the passwordauthentication line\nsudo service sshd restart\n```\nChange ownership permissions, allowing the new user \"host2admin\" to write here\n```bash\n chown -R host2admin:host2admin /opt/docker/\n sudo service docker restart\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1163560,
              "key": "45e8c269-6189-4082-a1d3-2237a4ee3759",
              "title": "ND035 C4 Security And DevOps Deploy 02c",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pKGj7WkAd2I",
                "china_cdn_id": "pKGj7WkAd2I.mp4"
              }
            },
            {
              "id": 1163559,
              "key": "af24cc00-6c27-4442-94ad-f25fe960574b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n#### 7. Login to Jenkins console and add Docker server to execute commands from Jenkins  \n* Manage Jenkins &#8594; Manager plugins &#8594; Install \"*Publish over SSH*\" plugin\n* Manage Jenkins &#8594; Configure system &#8594;  Publish over SSH &#8594; Add the new host IP address and credentials of the newly created user\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1136451,
              "key": "2a45a9a7-d09e-4afe-a45a-d752001f4b76",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a63d1_screenshot-2021-02-15-at-5.36.24-pm/screenshot-2021-02-15-at-5.36.24-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2a45a9a7-d09e-4afe-a45a-d752001f4b76",
              "caption": "Go to *Configure system**, and provide details to publish over SSH",
              "alt": "",
              "width": 500,
              "height": 1328,
              "instructor_notes": null
            },
            {
              "id": 1136450,
              "key": "fe098dfb-fad4-4ab1-9533-1c672b006f5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### 8. Create Jenkins job \nCreate a new job, **mySecondJob** (Type: Maven project), and configure with the following details (leaving remaining details as default):\n\n* **Source Code Management**<br>\n Repository : https://github.com/YOUR_USERNAME/nd035-c4-Security-and-DevOps <br>\n Branches to build : */master  \n\n\n\n* **Build**<br>\n Root POM: pom.xml  \n Goals and options: clean install package  \n",
              "instructor_notes": ""
            },
            {
              "id": 1136438,
              "key": "c15c5eca-e0a0-443c-8fb1-b7d5b5efd00a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " \n* **Post Steps**<br>\nAdd post-build steps: Choose **Send files or execute commands over SSH**<br>\n Name: Host_2 (Choose Verbose mode)<br>\n Source files: `webapp/target/*.war`<br>\n Remove prefix: `webapp/target`<br>\n Remote directory: `//opt//docker` <br> \n Exec command[s]: \n```bash\ndocker stop demo_container;  \ndocker rm -f demo_container;\ndocker stop demo_image;  \ndocker rm -f demo_image; \ndocker image rm -f demo_image; \ncd /opt/docker; \ndocker build -t demo_image .\n```\nThe commands above will remove any existing container/image with the given name, and create a fresh new image, `demo_image`, inside the current `/opt/docker/` directory. Add another **Transfer Set**, and use the following execution command:\n  ```bash\n  docker run -d --name demo_container -p 8888:8080 demo_image\n  ```  \nThe command above will create a new container, `demo_container` using the `demo_image` created in the previous command. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1136452,
              "key": "39a6d0dd-bd55-41a0-832a-2745892122f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a6524_screenshot-2021-02-15-at-5.41.49-pm/screenshot-2021-02-15-at-5.41.49-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/39a6d0dd-bd55-41a0-832a-2745892122f4",
              "caption": "",
              "alt": "",
              "width": 600,
              "height": 778,
              "instructor_notes": null
            },
            {
              "id": 1136453,
              "key": "e8303f04-f4bf-4520-b8d0-b84308ca4c2a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a6539_screenshot-2021-02-15-at-5.41.20-pm/screenshot-2021-02-15-at-5.41.20-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e8303f04-f4bf-4520-b8d0-b84308ca4c2a",
              "caption": "Transfer set - I",
              "alt": "",
              "width": 500,
              "height": 1340,
              "instructor_notes": null
            },
            {
              "id": 1136454,
              "key": "90c83940-c731-40df-91b5-941decd9f33f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/February/602a6565_screenshot-2021-02-15-at-5.41.31-pm/screenshot-2021-02-15-at-5.41.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90c83940-c731-40df-91b5-941decd9f33f",
              "caption": "Transfer set - II",
              "alt": "",
              "width": 500,
              "height": 1114,
              "instructor_notes": null
            },
            {
              "id": 1163563,
              "key": "65a7545a-f6e7-4559-836f-fd672af05307",
              "title": "ND035 C4 Security And DevOps Deploy 02d",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "I7dPatnsG6c",
                "china_cdn_id": "I7dPatnsG6c.mp4"
              }
            },
            {
              "id": 1136439,
              "key": "33ca9169-defe-4e1a-aa4c-fd4b106b3859",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### 9. Execute Jenkins job\nCheck images and containers again on the *Host_2*. A new *demo_image* and *demo_container* will get created through the Jenkins job. \n\n\n#### 10. Access web application from the browser \n```\n<Host_2_Public_IP>:8888/myApp\n```\n\nThere is nothing to display in the */usr/local/tomcat/webapps/myApp* folder on Tomcat; therefore it will show you a **404 error**. But, if you use a wholly developed application, it will display the content accordingly. \n\n\n>Congratulations! You have set up your second DevOps pipeline. That's great!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 901170,
          "key": "1827fd5f-d326-45e6-9ff6-467e2e23092a",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1827fd5f-d326-45e6-9ff6-467e2e23092a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1136140,
              "key": "8ca60376-2187-4265-bc11-7e602f1e2de9",
              "title": "Conclusion",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*Congratulations on getting to the end of the course! *\n\nIf you're interested in going further and having your build deployed to an environment, you can find a great description of how to do so in this <a href=\"https://d1.awsstatic.com/whitepapers/AWS_Blue_Green_Deployments.pdf\" target=\"_blank\">white paper</a> from AWS.\n\n## Lesson Recap\n\nIn this lesson, you have learned the various technologies that support the process of CI/CD. We have covered the following objectives:\n\n* Create a Git repository on GitHub\n* Create and run Docker containers using pre-built Docker images\n* Create EC2 instances on AWS\n* Install and configure Jenkins to **build** and **deploy** a pipeline",
              "instructor_notes": ""
            },
            {
              "id": 901153,
              "key": "a8b3a55f-2d9f-4899-b804-a0f19543ace4",
              "title": "Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Course Recap\n\nIn making it this far, you've covered a *lot* of new skills, including:\n\n* How to secure enterprise applications using proper hashing and salting\n* How to use JWTs for authorization and authentication\n* The importance of different types of testing\n* How to use unit testing via JUnit \n* The importance and usefulness of mocking with Mockito\n* How to log effectively\n* How to use logging information to create dashboards and visualizations in Splunk to analyze, debug, and diagnose your application\n* And finally, you've tied this together by learning how to create a CI/CD pipeline with Jenkins, and then deploy the result using AWS and Docker\n\nThese are key skills for modern Java application development. Next, you'll have the opportunity to demonstrate these new skills by completing the *eCommerce* application and submitting it as your final project in the course.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}