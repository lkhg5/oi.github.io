WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:06.045
Hi. This is an addendum to the JWT implementation on your Spring Boot application.

00:00:06.045 --> 00:00:07.470
In order to implement this,

00:00:07.470 --> 00:00:09.645
we would need two dependencies.

00:00:09.645 --> 00:00:12.480
The dependencies are, Spring Boot starter security,

00:00:12.480 --> 00:00:14.715
as well as Java JWT.

00:00:14.715 --> 00:00:17.520
Why don't you go ahead and give it a try and look for

00:00:17.520 --> 00:00:20.370
the Maven dependencies and add them to your POM file.

00:00:20.370 --> 00:00:24.720
In the meantime, I'm going to do the same for my application.

00:00:24.720 --> 00:00:28.305
So here I have my POM file and here,

00:00:28.305 --> 00:00:31.635
I'm going to add the spring security test dependency,

00:00:31.635 --> 00:00:35.205
which is an extra dependency that I wanted to add for my test classes.

00:00:35.205 --> 00:00:40.575
The next one is the spring-boot-starter-security.

00:00:40.575 --> 00:00:45.695
The last dependency that I want to add is the Java JWT dependency.

00:00:45.695 --> 00:00:51.225
Now the version will depend on when you are trying to add this project.

00:00:51.225 --> 00:00:54.785
Please go with the latest version that is available.

00:00:54.785 --> 00:00:56.750
For a spring-boot-security, it takes

00:00:56.750 --> 00:01:00.410
a default spring-boot version that I'm using for this application.

00:01:00.410 --> 00:01:05.110
At this point in time, it is 2.1.5 Release version.

00:01:05.110 --> 00:01:06.990
The next thing that I'm going to do is,

00:01:06.990 --> 00:01:08.775
I'm going to make a few model changes,

00:01:08.775 --> 00:01:11.030
and my model change will be on the user class,

00:01:11.030 --> 00:01:14.240
which is under repositories under persistence.

00:01:14.240 --> 00:01:17.330
The second one would be the CreateUserRequest,

00:01:17.330 --> 00:01:19.310
which is under requests class.

00:01:19.310 --> 00:01:21.935
So in terms of CreateUserRequest,

00:01:21.935 --> 00:01:24.445
there are two things that I need to add.

00:01:24.445 --> 00:01:26.150
First is a password,

00:01:26.150 --> 00:01:29.435
and the second one is the confirmPassword field,

00:01:29.435 --> 00:01:31.865
and then add getters and setters for them.

00:01:31.865 --> 00:01:35.650
So here's my code.

00:01:35.650 --> 00:01:40.130
If you do not want to spend time writing getters and setters,

00:01:40.130 --> 00:01:42.275
please use intelligent in order to do that.

00:01:42.275 --> 00:01:44.380
I can quickly show you how to do that.

00:01:44.380 --> 00:01:47.714
I have removed this and I'm going to just right-click,

00:01:47.714 --> 00:01:49.980
click "Generate" and "Getter and Setter."

00:01:49.980 --> 00:01:51.870
It gives me "password" and "confirm

00:01:51.870 --> 00:01:56.715
password" for generating getters and setters, and here we go.

00:01:56.715 --> 00:01:59.530
In the user's model, what I'm going to do is,

00:01:59.530 --> 00:02:03.305
I'm going to add a password field with the write only access,

00:02:03.305 --> 00:02:06.750
and please use intelligent or your ID in order

00:02:06.750 --> 00:02:10.970
to create the getters and setters for this as well.

00:02:10.970 --> 00:02:16.740
Let's go to make some changes now to the main application file.

00:02:16.740 --> 00:02:19.070
So in the main application class,

00:02:19.070 --> 00:02:20.600
the first thing you need to do is,

00:02:20.600 --> 00:02:23.120
you need to add this exclusion of

00:02:23.120 --> 00:02:29.055
the default security auto configuration class that is provided by Spring Boot,

00:02:29.055 --> 00:02:31.830
because we are doing a JWT implementation.

00:02:31.830 --> 00:02:33.690
The second thing that I would do is,

00:02:33.690 --> 00:02:37.185
I would add the BCryptPasswordEncoder.

00:02:37.185 --> 00:02:39.000
I import a file,

00:02:39.000 --> 00:02:44.580
add that bean into this class.

00:02:44.580 --> 00:02:47.650
The next thing that I'm going to do is,

00:02:47.650 --> 00:02:50.525
I'm going to make changes to my UserController,

00:02:50.525 --> 00:02:53.230
which exists under my controllers.

00:02:53.230 --> 00:02:55.710
So what I'm trying to do next is,

00:02:55.710 --> 00:02:59.655
I'm trying to add some basic password validations,

00:02:59.655 --> 00:03:03.980
and then I would do the encoding on my password.

00:03:03.980 --> 00:03:10.750
How I would do this is by getting the createUserRequest and the getPassword.

00:03:10.750 --> 00:03:12.530
I have some basic validation,

00:03:12.530 --> 00:03:15.935
which is the password length is greater than seven,

00:03:15.935 --> 00:03:19.060
and the confirm password and the password field match.

00:03:19.060 --> 00:03:22.730
If they don't, then there is an error that we throw.

00:03:22.730 --> 00:03:26.330
It says, an "Error with user password.

00:03:26.330 --> 00:03:27.965
Cannot create user {}".

00:03:27.965 --> 00:03:30.125
The next thing is here.

00:03:30.125 --> 00:03:34.245
This is a very important line that is at line 64.

00:03:34.245 --> 00:03:37.635
What I'm trying to do here is, I'm calling setPassword,

00:03:37.635 --> 00:03:43.580
and inside of it I called the bCryptPasswordEncoder and encode the password.

00:03:43.580 --> 00:03:45.230
So as you see,

00:03:45.230 --> 00:03:49.305
this is the method that I call,

00:03:49.305 --> 00:03:51.590
and as per the previous explanation,

00:03:51.590 --> 00:03:54.380
you already understand how the hashing works,

00:03:54.380 --> 00:03:56.180
how the salt works,

00:03:56.180 --> 00:03:57.515
and what they mean,

00:03:57.515 --> 00:04:03.275
and you can also go into the details of these methods.

00:04:03.275 --> 00:04:08.515
The link that is provided in the video will also give you more details about it.

00:04:08.515 --> 00:04:13.665
The next line is just to userRepository.save(user).

00:04:13.665 --> 00:04:21.140
This pretty much is all that you need to add a part from the filter files.

00:04:21.140 --> 00:04:27.500
The link below is going to provide you these filter files.

00:04:27.500 --> 00:04:31.995
You need to add them into your project under a security folder.

00:04:31.995 --> 00:04:33.470
So I have my security folder,

00:04:33.470 --> 00:04:36.620
and I have these files added here.

00:04:36.620 --> 00:04:40.110
Let's just quickly go over these files.

00:04:40.110 --> 00:04:42.050
But before I go over these files,

00:04:42.050 --> 00:04:45.365
let me make you understand as to what these files are doing.

00:04:45.365 --> 00:04:47.090
So these files will be,

00:04:47.090 --> 00:04:49.355
by default, picked by Spring Boot.

00:04:49.355 --> 00:04:52.670
Spring Boot is going to look for them to place them under

00:04:52.670 --> 00:04:57.050
filters and how it would be chained in order to do the validation.

00:04:57.050 --> 00:05:01.985
So these are required for Spring Boot as to scan these filters

00:05:01.985 --> 00:05:07.245
and have the methods available for the JWT implementation.

00:05:07.245 --> 00:05:12.200
As you see, this authentication filter provides two methods,

00:05:12.200 --> 00:05:15.305
which is successfulAuthentication and attemptAuthentication,

00:05:15.305 --> 00:05:18.325
which are internally used by Spring Boot again.

00:05:18.325 --> 00:05:23.240
The pseudo-class, which is JWT Authentication Verification Filter extends

00:05:23.240 --> 00:05:31.430
the basic authentication filter which has the overridden method of doFilterInternal.

00:05:31.430 --> 00:05:34.525
Then there is another getAuthentication filter.

00:05:34.525 --> 00:05:40.925
I have a few security constants that I've added that are needed for this application.

00:05:40.925 --> 00:05:44.470
I have the expiration which is configurable.

00:05:44.470 --> 00:05:46.995
Secret is, "yoursecret."

00:05:46.995 --> 00:05:52.100
I have a TOKEN_PREFIX which is going to be used by the user

00:05:52.100 --> 00:05:57.180
when they make the call after the user is logged in successfully.

00:05:57.180 --> 00:06:01.395
So "Bearer" will be a prefix for your JWT token,

00:06:01.395 --> 00:06:06.645
and then we have the HEADER_STRING, and the SIGN_UP_URL.

00:06:06.645 --> 00:06:12.945
In the next video, you will see how this TOKEN_PREFIX is being used.

00:06:12.945 --> 00:06:18.065
The next file that I would go over is web security configuration.

00:06:18.065 --> 00:06:21.005
Here you have this configure method,

00:06:21.005 --> 00:06:26.220
and the authenticationManagerBean, and configure method again over here.

00:06:26.220 --> 00:06:31.500
This is a good time for you to understand what these methods really mean.

00:06:31.500 --> 00:06:35.105
If you don't know what CORS or CSRF means,

00:06:35.105 --> 00:06:39.995
you can do a quick research and understand what these terminologies mean,

00:06:39.995 --> 00:06:47.134
or you could also go over these methods to understand how this is configured.

00:06:47.134 --> 00:06:50.720
You can go ahead and go through the details and

00:06:50.720 --> 00:06:55.120
understand how the filter chaining is done and how the session management is done,

00:06:55.120 --> 00:06:56.870
and what does it mean to have

00:06:56.870 --> 00:07:02.040
a stateless sessionCreationPolicy or stateful, and other details.

00:07:02.040 --> 00:07:06.530
So this is a place where you can go ahead and do as much research as you want,

00:07:06.530 --> 00:07:09.335
if you're interested in learning more about authentication.

00:07:09.335 --> 00:07:13.835
The last file that we are taking care of is loadUserByUsername.

00:07:13.835 --> 00:07:15.110
Here what I do is,

00:07:15.110 --> 00:07:17.930
I'm going to return a userdetails object.

00:07:17.930 --> 00:07:24.180
That is done by using security.core.userdetails class.

00:07:24.180 --> 00:07:27.755
Here, what I'm passing is a username and password,

00:07:27.755 --> 00:07:31.835
which is our user object and user password.

00:07:31.835 --> 00:07:35.105
In terms of the authorities,

00:07:35.105 --> 00:07:38.960
which is more like the permissions that this user has,

00:07:38.960 --> 00:07:41.960
I'm passing null or an empty

00:07:41.960 --> 00:07:46.370
collections list because I do not want to give any special permissions to this user.

00:07:46.370 --> 00:07:48.110
I want to give them all access.

00:07:48.110 --> 00:07:51.480
These are the files that Spring Boot is going to use.

00:07:51.480 --> 00:07:56.120
In the next video you will see how the implementation that we just did is going to be

00:07:56.120 --> 00:08:01.475
used for logging the user and successfully using password and confirm password,

00:08:01.475 --> 00:08:05.330
and what the JWT token looks like and how you can use

00:08:05.330 --> 00:08:11.610
the JWT token in order to create a session for a successful authenticator session.

