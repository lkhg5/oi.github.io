{
  "data": {
    "lesson": {
      "id": 875467,
      "key": "a4f74a2a-5cec-414f-8966-24753ce48bd3",
      "title": "Security",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Security is key to keeping your information safe - here, you'll learn how to add security to your APIs to keep out unwanted eyes and avoid undesired changes.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/a4f74a2a-5cec-414f-8966-24753ce48bd3/875467/1564506559825/Security+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/a4f74a2a-5cec-414f-8966-24753ce48bd3/875467/1564506556636/Security+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 877484,
          "key": "783e3bd7-1ba0-4e26-bdfa-945eeffa7ac0",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "783e3bd7-1ba0-4e26-bdfa-945eeffa7ac0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899546,
              "key": "075af557-590d-4b03-b143-ce2a8606f13d",
              "title": "JAVA C2 L5 01 Security Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xlceysbunI8",
                "china_cdn_id": "xlceysbunI8.mp4"
              }
            }
          ]
        },
        {
          "id": 883762,
          "key": "ff7fc9f0-2a93-454b-902e-773803903532",
          "title": "Security Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ff7fc9f0-2a93-454b-902e-773803903532",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899547,
              "key": "4c10ad01-c43d-4d07-868e-c31351def5f2",
              "title": "JAVA C2 L5 02 Security Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s3QU5kbUtes",
                "china_cdn_id": "s3QU5kbUtes.mp4"
              }
            },
            {
              "id": 883810,
              "key": "f2d012a1-8dcc-42be-8572-a0a26353167b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When allowing access to data via web services, security is very important. We want to limit who can view or even update data; only trusted individuals should have access. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 883763,
          "key": "c075f002-eb31-4d11-a60b-8d1f0e71450d",
          "title": "Authentication vs Authorization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c075f002-eb31-4d11-a60b-8d1f0e71450d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899548,
              "key": "362daed0-373f-46ff-ba95-7657db31443d",
              "title": "JAVA C2 L5 03 Authentication Vs Authorization",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yCVRQgBPwqQ",
                "china_cdn_id": "yCVRQgBPwqQ.mp4"
              }
            },
            {
              "id": 883811,
              "key": "a22b3f64-6f19-4584-97dc-a100fbb6512c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h5>Authentication</h5>\nAuthentication is about validating the identity of a client attempting to call a web service. Typically, identity is validated with user credentials, such as a user name and password. \n\n<h5>Authorization</h5>\nAuthorization is the next step after authentication. So once a client is authenticated (they have proven who they are), what do they have access to? For example, what data can they view, are they allowed to change that data, etc. \n",
              "instructor_notes": ""
            },
            {
              "id": 898245,
              "key": "e1fba2c6-dce9-4817-b682-faabedcfc6fe",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e1fba2c6-dce9-4817-b682-faabedcfc6fe",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify TWO ways to authenticate with a web service.",
                "answers": [
                  {
                    "id": "a1562410836127",
                    "text": "Authorization key",
                    "is_correct": false
                  },
                  {
                    "id": "a1562410874415",
                    "text": "API Key",
                    "is_correct": true
                  },
                  {
                    "id": "a1562410875169",
                    "text": "User name and password",
                    "is_correct": true
                  },
                  {
                    "id": "a1562410875968",
                    "text": "Base-64 encoded password only",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883764,
          "key": "d3eae520-4c69-4bab-bea5-5b11d74bfa7b",
          "title": "Basic Authentication",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d3eae520-4c69-4bab-bea5-5b11d74bfa7b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899549,
              "key": "bf4d4bf1-7e41-4113-8ce3-84210926adab",
              "title": "JAVA C2 L5 04 Basic Authentication",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AFqFZS-6NW8",
                "china_cdn_id": "AFqFZS-6NW8.mp4"
              }
            },
            {
              "id": 883812,
              "key": "0e79bf85-0f6f-4e4c-b9a6-02ac5f9363cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Basic Authentication (also referred to as Basic Auth) is the simplest protocol available for performing web service authentication over HTTP protocol.  Basic Auth requires a username and password. The client calling the web service takes these two credentials, converts them to a single <a href=\"https://en.wikipedia.org/wiki/Base64\">Base 64–encoded value</a> and passes it along in the Authentication HTTP header.\n\nThe server compares the credentials passed to those stored. If it matches, the server fulfills the request and provides access to the data. If the Authentication HTTP header is missing or the password doesn’t match the user name, the server denies access and returns a <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">401 status code</a>, which means the request is Unauthorized.\n",
              "instructor_notes": ""
            },
            {
              "id": 898247,
              "key": "1793ea6d-ccf5-4897-95c8-f91f8ef3b721",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1793ea6d-ccf5-4897-95c8-f91f8ef3b721",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which status code is returned when a request to a web service is unauthorized?",
                "answers": [
                  {
                    "id": "a1562413242053",
                    "text": "404 - Not Found",
                    "is_correct": false
                  },
                  {
                    "id": "a1562413280931",
                    "text": "400 - Bad Request",
                    "is_correct": false
                  },
                  {
                    "id": "a1562413281666",
                    "text": "401 - Unauthorized ",
                    "is_correct": true
                  },
                  {
                    "id": "a1562413282300",
                    "text": "403 - Forbidden ",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883765,
          "key": "b094fe02-2a1d-4788-946f-5da4f7b24a2a",
          "title": "Spring Security",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b094fe02-2a1d-4788-946f-5da4f7b24a2a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899550,
              "key": "2272d978-e24c-4f08-995f-7a93f4cbdd6c",
              "title": "JAVA C2 L5 05 Spring Security",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5U6qpTtV7vo",
                "china_cdn_id": "5U6qpTtV7vo.mp4"
              }
            },
            {
              "id": 883814,
              "key": "1fe92444-ae46-46c4-bee7-25ce42494453",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Spring Security](https://spring.io/projects/spring-security) is a part of the Spring Framework and provides authentication, authorization and other security features for Spring-based applications.\n\n| **Item**                    | **Description**                                    |\n|------------------------------|----------------------------------------------------|\n| spring-boot-starter-security | Maven dependency that adds security module.        |\n| @EnableWebSecurity           | Annotation that enables Spring Security’s support. |\n",
              "instructor_notes": ""
            },
            {
              "id": 898248,
              "key": "883df43d-f3e8-419b-aadb-b12e57b10b29",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "883df43d-f3e8-419b-aadb-b12e57b10b29",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How do you override the default security and provide your own configuration?",
                "answers": [
                  {
                    "id": "a1562413852334",
                    "text": "Add the Spring Security starter dependency to the Maven POM file",
                    "is_correct": false
                  },
                  {
                    "id": "a1562413929916",
                    "text": "Extend WebSecurityConfigurerAdapter ",
                    "is_correct": true
                  },
                  {
                    "id": "a1562413930519",
                    "text": "Omit the @EnableWebSecurity annotation",
                    "is_correct": false
                  },
                  {
                    "id": "a1562413931119",
                    "text": "Remove the Spring Security starter dependency in the Maven POM file",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883761,
          "key": "464da02c-7de9-4619-86ec-8b4d95c0a63f",
          "title": "Case Study",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "464da02c-7de9-4619-86ec-8b4d95c0a63f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899551,
              "key": "15fc2fc1-930d-45d1-8918-e9870082b6bb",
              "title": "JAVA C2 L5 06 Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qvIKMTcramM",
                "china_cdn_id": "qvIKMTcramM.mp4"
              }
            },
            {
              "id": 883813,
              "key": "fe6fbd40-a2e4-4379-9f41-32a05cd8450f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The Security case study retrieves a list of locations from a database in <strong>a secure fashion</strong>. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson5-security\">GitLab</a>. \n\nThe API has the following components:\n\n<ul>\n <li><strong>Controller </strong>- LocationController.java</li>\n <li><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li>\n <li><strong>CRUD Repository </strong>- LocationRepository.java</li>\n <li><strong>Domain Entity/Model </strong>- Location.java</li>\n<li><strong>Security Configuration </strong>- SpringSecurityConfig.java </li>\n <li><strong>H2 Database </strong> accessible via <a href=\"http://localhost:8080/h2/\">http://localhost:8080/h2/</a></li>\n<li><strong>Tomcat Server </strong> accessible via <a href=\"http://localhost:8080\">http://localhost:8080</a></li>\n\n</ul>",
              "instructor_notes": ""
            },
            {
              "id": 899853,
              "key": "129909ed-65a6-49b3-814a-5fbf0cef4212",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### CSRF\n\nRead more about Cross Site Request Forgery [here](https://en.m.wikipedia.org/wiki/Cross-site_request_forgery).",
              "instructor_notes": ""
            },
            {
              "id": 899854,
              "key": "6c586890-404c-48c9-8ec7-6d50e484903b",
              "title": "CSRF Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6c586890-404c-48c9-8ec7-6d50e484903b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Using the link above, select which of the following are true regarding CSRF:",
                "answers": [
                  {
                    "id": "a1562862681564",
                    "text": "CSRF involves sites that rely on a user's identity",
                    "is_correct": true
                  },
                  {
                    "id": "a1562862754827",
                    "text": "A CSRF attack involving uTorrent allowed the attacker to force a torrent download",
                    "is_correct": true
                  },
                  {
                    "id": "a1562862755418",
                    "text": "A CSRF vulnerability on Netflix's site would have allowed an attacker to change the shipping address for DVDs",
                    "is_correct": true
                  },
                  {
                    "id": "a1562862756237",
                    "text": "For a CSRF to succeed, the attacker must lure the victim to a site with malicious code while the victim is logged into the target site",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 899682,
          "key": "e641be86-5178-4233-99d7-4648177fb13b",
          "title": "Lab: Secure Your Dog API",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e641be86-5178-4233-99d7-4648177fb13b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899683,
              "key": "b2f89db8-44f0-4dc7-9e97-288903a8d7f8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab: Secure Your Dog API\n\nReuse your Dog REST API code from Lesson 2 and secure it using Basic Authentication.\n\n- **Step 1:** Add the necessary dependencies for Spring Security in the Maven POM file.\n\n- **Step 2:** Create the necessary security configuration class that extends `WebSecurityConfigurerAdapter` to secure your API with Basic Authentication.\n\n- **Step 3:** Test that your API is now secured with basic authentication and still operates appropriately for an authenticated user.",
              "instructor_notes": ""
            },
            {
              "id": 899694,
              "key": "ebf27441-8368-4182-9177-f43950154140",
              "title": "Secure Your Dog API Lab",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ebf27441-8368-4182-9177-f43950154140",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the \"Secure Your Dog API\" lab."
              ],
              "positive_feedback": "Securing an API is extremely important to keep your information private and avoid undesired changes. Great work!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 906359,
          "key": "2816761c-72de-4367-9301-abf418369e1a",
          "title": "Lab Solution: Secure Your Dog API",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2816761c-72de-4367-9301-abf418369e1a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "SecureDogApi",
                "uri": "https://video.udacity-data.com/topher/2019/August/5d4c7179_securedogapi/securedogapi.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 907332,
              "key": "f4c43b25-dae1-4d5d-a2c2-78b5f5ac0812",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Secure Your Dog API\n\nBelow, we'll walk through each step of the lab and look at *one potential way* to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 907333,
              "key": "008e7985-0942-4532-a279-284873624fd5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1:** Add the necessary dependencies for Spring Security.\n\nGiven your code for the REST API from before, you just need to add the following two dependencies to the Maven POM file:\n\n```\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t<artifactId>spring-security-test</artifactId>\n\t\t</dependency>\n```",
              "instructor_notes": ""
            },
            {
              "id": 907334,
              "key": "e4a4e21b-6161-4797-af6d-80c57c2d5e25",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2:** Create the necessary security configuration class.\n- the class should extend `WebSecurityConfigurerAdapter` to secure your API with Basic Authentication\n\nFirst, add a `config` package to your Dog REST API code, and then add a `SpringSecurityConfig` class within it that extends `WebSecurityConfigurerAdapter` from Spring Security.\n\nFrom there, the code follows similarly to how the Location API was secured in the earlier Case Study video, although welcome to update the username and password used below (and required to do so in any more in-depth implementation, of course). Note that the class uses both the `@Configuration` and `@EnableWebSecurity` annotations.\n\n```java\npackage com.udacity.DogRestApi.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\n@EnableWebSecurity\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .csrf().disable()\n                .authorizeRequests()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .httpBasic();\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth)\n        throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\")\n                .password(encoder().encode(\"password\"))\n                .roles(\"USER\");\n    }\n\n    @Bean\n    public PasswordEncoder encoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n\n```\n\nNote in the above that all of the `.` functions are actually chain together, but are on separate lines so that someone reading the code can more easily understand it.",
              "instructor_notes": ""
            },
            {
              "id": 907335,
              "key": "c43590b5-0721-40fe-a7e4-8c0fa48162ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 3:** Test that your API is now secured.\n- It should use basic authentication\n- The API should still operate appropriately for an authenticated user\n\nYou can test this out in multiple ways. First, I tried to access [localhost:8080/dogs](localhost:8080/dogs) in the browser, and got a \"Sign in\" window. If I click cancel, I get a 401 error - Unauthorized. If I enter in my basic authentication information, I can access the page.",
              "instructor_notes": ""
            },
            {
              "id": 907339,
              "key": "83f1858e-4e88-49c6-8dda-5563e1ee8330",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d48b14c_java-basic-auth/java-basic-auth.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/83f1858e-4e88-49c6-8dda-5563e1ee8330",
              "caption": "Needing to sign in to our Dog API",
              "alt": "Needing to sign in to our Dog API",
              "width": 742,
              "height": 317,
              "instructor_notes": null
            },
            {
              "id": 907340,
              "key": "383a543c-509a-464f-b51d-cc425b469ed1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d48b16e_java-401/java-401.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/383a543c-509a-464f-b51d-cc425b469ed1",
              "caption": "The (uncustomized) 401 status - Unauthroized",
              "alt": "The (uncustomized) 401 status - Unauthroized",
              "width": 576,
              "height": 240,
              "instructor_notes": null
            },
            {
              "id": 907341,
              "key": "574ee93c-348f-442a-a92d-e438a35ce186",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "I can also test this in Postman instead, where I change the \"Authorization\" tab to use \"Basic Auth\", make sure I am using a `GET request`, and then first attempt without a username and password. I will again get a status code of 401 meaning I am unauthorized. If I add the correct username and password, I can access the API.",
              "instructor_notes": ""
            },
            {
              "id": 907342,
              "key": "2c94992c-b2c8-45bb-ab50-e9a4888cb409",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d48b2cc_postman-unauthorized/postman-unauthorized.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2c94992c-b2c8-45bb-ab50-e9a4888cb409",
              "caption": "An unauthorized request through Postman (see status 401 in bottom right)",
              "alt": "An unauthorized request through Postman (see status 401 in bottom right)",
              "width": 850,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 907343,
              "key": "02e9f2cd-3549-43f4-ba50-ab69a6044c4e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d48b2fb_postman-authorized/postman-authorized.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/02e9f2cd-3549-43f4-ba50-ab69a6044c4e",
              "caption": "The authorized user can access the API",
              "alt": "The authorized user can access the API",
              "width": 850,
              "height": 660,
              "instructor_notes": null
            },
            {
              "id": 908240,
              "key": "303142bc-7dd6-4b4c-b5ff-a18445aa830c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Full Solution\n\nIf you'd like the full solution code all in one place, you can download it through the link below.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 877485,
          "key": "98345d6f-3b8f-4cec-80a6-741ba79da12a",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "98345d6f-3b8f-4cec-80a6-741ba79da12a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899552,
              "key": "fbdb15eb-1749-4c1f-b34f-6602f4d61598",
              "title": "JAVA C2 L5 07 Security Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D-lGnr7VQEg",
                "china_cdn_id": "D-lGnr7VQEg.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}