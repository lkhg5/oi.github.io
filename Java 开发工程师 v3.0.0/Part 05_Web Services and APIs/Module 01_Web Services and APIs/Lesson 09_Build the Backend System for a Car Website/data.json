{
  "data": {
    "lesson": {
      "id": 883736,
      "key": "a0848480-ee01-4e03-b5bc-54e1c1e22faa",
      "title": "Build the Backend System for a Car Website",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this project, you'll create a REST API to store vehicle data, while consuming information regarding location and pricing data from external resources. Also, you'll document and test your API!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "b22fa96d-7564-4215-b8af-944099f27ae6",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Build the Backend System for a Car Website",
        "description": "# Build the Backend System for a Car Website\nIn this project you will have the opportunity to create a REST-based Vehicles API that communicates with a location and pricing service using Spring Boot, along with converting the existing Pricing Service API to a microservice registered on a Eureka server.\n\nFollow the [README and code instructions](https://github.com/udacity/JDND/tree/master/projects/P02-VehiclesAPI) and make sure to check the [rubric](https://review.udacity.com/#!/rubrics/2649/view) to ensure you have completed all items.\n\n## Instructions\n\n### Convert the Pricing Service\nConvert the Pricing Service to a microservice, registered on a Eureka server. Also, add an additional test for the microservice.\n\n### Implement the Vehicles API\nImplement all TODOs for the CarService and CarController.\n\n### Test and Document the Vehicles API\nAdd tests for the CarController class. Use Swagger to implement API documentation for the Vehicles API\n\n### Run the applications \nNote that the Boogle Maps, Pricing Service and Vehicles API applications must all be running for all operations to perform correctly, although they should be able to launch on their own.\n\nYou can either use these in separate windows in your favorite IDE, or use the below commands:\n\n1. `$ mvn clean package` (run this in each directory containing the separate applications)\n2. Boogle Maps: `$ java -jar target/boogle-maps-0.0.1-SNAPSHOT.jar`\n  - The service is available by default on port 9191. You can check it on the command line by using `$ curl http://localhost:9191/maps\\?lat\\=20.0\\&lon\\=30.0`\n3. Pricing Service: `$ java -jar target/pricing-service-0.0.1-SNAPSHOT.jar`\n4. Vehicles API: `$ java -jar target/vehicles-api-0.0.1-SNAPSHOT.jar`\n  - When the Swagger API documentation is implemented, it should be available at: http://localhost:8080/swagger-ui.html\n\n### Double-check the rubric\nMake sure you have completed all the rubric items [here](https://review.udacity.com/#!/rubrics/2649/view).\n\n### Submit your project\n\nYou can submit your project as either a zip file or a Github repository link.\n\n## Project Submission Checklist\n\n**Before submitting your project, please review and confirm the following items.** \n<input type=\"checkbox\"> I am confident all rubric items have been met and my project will pass as submitted.\n<input type=\"checkbox\"> Project builds correctly without errors and runs.\n<input type=\"checkbox\"> All required functionality exists and my project behaves as expected per the project's specifications.\n\n**Once you have checked all these items, you are ready to submit!**\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2649",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 883738,
          "key": "c050bea6-9475-43cf-b3b4-a8c8b0db4170",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c050bea6-9475-43cf-b3b4-a8c8b0db4170",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 883780,
              "key": "f270de2d-d196-460e-b215-b2fdca6f9be4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Introduction\n\nIn this project, you'll use your skills with Spring Boot, APIs, documentation, and testing to implement a Vehicles API that serves as an endpoint to track vehicle inventory. While the primary Vehicles API will perform [CRUD operations](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) (Create, Read, Update and Delete) related to vehicle details like make, model, color, etc., it will need to consume data from other APIs as well regarding location and pricing data. You will implement a RESTful API for the Vehicles API, as well as converting a Pricing Service API to a microservice.\n\nBy the end of this project, you'll have an application that can communicate with other services and be able to be viewed and used through Swagger-based API documentation. \n\nOver the next several pages, we'll do a brief overview of the code for each application involved in the project, and then the instructions for the project itself. You are welcome to skip the code overview sections if you want to dive straight into the project instructions. You can download the project code from the [Github repo](https://github.com/udacity/nd035-C2-Web-Services-and-APIs-Exercises-and-Project-Starter), and go to the `P02-VehiclesAPI` folder.",
              "instructor_notes": ""
            },
            {
              "id": 883781,
              "key": "848574bb-d771-42da-b61d-230c1892aff3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598b5e9b_2-5-managing-app-location-with-react-router-2x/2-5-managing-app-location-with-react-router-2x.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/848574bb-d771-42da-b61d-230c1892aff3",
              "caption": "",
              "alt": "",
              "width": 400,
              "height": 420,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 883748,
          "key": "ef4c5ce3-8568-4fc7-8ccf-526f18e89ca9",
          "title": "Location Service Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ef4c5ce3-8568-4fc7-8ccf-526f18e89ca9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 883798,
              "key": "7b94239e-2306-4f4f-a796-91d19c537e69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Location Service Code (Boogle Maps)\n\nYou'll find the code related to our location service in the `boogle-maps` folder. It serves as a Mock to simulate a Maps WebService where, given a latitude and longitude, will return a random address.\n\nYou won't have to implement anything as part of this application, but let's take a quick look through the included files. Note that every package is within `com.udacity`, so we won't include that part of the package name below.",
              "instructor_notes": ""
            },
            {
              "id": 883799,
              "key": "fa54becd-2e22-468e-bca0-723ef6f03ca7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b73532b_2-9-introduction-to-localization2x/2-9-introduction-to-localization2x.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fa54becd-2e22-468e-bca0-723ef6f03ca7",
              "caption": "",
              "alt": "",
              "width": 250,
              "height": 250,
              "instructor_notes": null
            },
            {
              "id": 883786,
              "key": "1b58951d-eb84-44ee-b86e-738da199664f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `boogle.maps`\n\n#### Address\n\nThis declares the Address class, primarily just made of the private variables address, city, state and zip. Note that the latitude and longitude *are not* stored here - they come from the Vehicles API.\n\n#### BoogleMapsApplication\n\nThis launches Boogle Maps as a Spring Boot application.\n\n#### MapsController\n\nThis is our actual REST controller for the application. This implements what a `GET` request will respond with - in our case, since it is a Mock of a WebService, we are just responding with a random address from the repository.\n\n#### MockAddressRepository\n\nRepositories normally provide some type of data persistence while the web service runs. In this case, this Mock is simply choosing a random address from the `ADDRESSES` array defined in the file.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 883749,
          "key": "423538b9-989c-4138-8afe-f5e814cfda51",
          "title": "Pricing Service Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "423538b9-989c-4138-8afe-f5e814cfda51",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 883796,
              "key": "3334f798-f3ad-4258-9551-7faac5651071",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Pricing Service Code\n\nYou'll find the code related to our oricing service in the `pricing-service` folder. It serves as a REST WebService that simulates a backend to store and retrieve the price of a given vehicle. In the project, you will convert it to be a microservice registered through a Eureka server.\n\nLet's take a quick look through the included files, only certain files of which you will need to implement. Note that every package is within `com.udacity`, so we won't include that part of the package name below.",
              "instructor_notes": ""
            },
            {
              "id": 883797,
              "key": "0288e716-1a88-44b2-9922-2b3ca608f213",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b50d889_1-2-stock-prices/1-2-stock-prices.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0288e716-1a88-44b2-9922-2b3ca608f213",
              "caption": "",
              "alt": "",
              "width": 250,
              "height": 250,
              "instructor_notes": null
            },
            {
              "id": 883787,
              "key": "5178f9b9-7056-4010-ab8e-5481e09ebb1c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `pricing`\n\n#### PricingServiceApplication\n\nThis launches the Pricing Service as a Spring Boot application.\n\n## `pricing.api`\n\n#### PricingController\n\nThis is our actual REST controller for the application. This implements what a GET request will respond with - in this case, a randomly generated price gathered from the `PricingService`. Once converted to a microservice, the Controller should not be explicitly necessary.\n\n## `pricing.domain.price`\n\n#### Price\n\nThis declares the Price class, primarily just made of the private variables currency, price and vehicleId.\n\n#### PriceRepository\n\nThis repository provide a type of data persistence while the web service runs, namely the ID->price pairing generated by the `PricingService`.\n\n## `pricing.service`\n\n#### PriceException\n\nThis creates a `PriceException` that can be thrown when an issue arises in the `PricingService`.\n\n#### PricingService\n\nThe Pricing Service does most of the legwork of the code. Here, it creates a mapping of random prices to IDs, as well as the method (in our mock service here) to generate the random prices. Once converted to a microservice, the Service should not be explicitly necessary.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 883750,
          "key": "372654ef-d2a4-4508-9b47-e5c01f2812b9",
          "title": "Vehicles API Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "372654ef-d2a4-4508-9b47-e5c01f2812b9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 883800,
              "key": "81b34131-3adf-49ed-a25a-cebdaca575e0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Vehicles API\n\nYou'll find the code related to our Vehicles API in the `vehicles-api` folder. It serves as a REST API to maintain vehicle data and to provide a complete view of vehicle details including price and address (obtained from the location and pricing services).\n\nLet's take a quick look through the included files - and don't worry, you won't need to implement every single one of these! Note that every package is within `com.udacity`, so we won't include that part of the package name below.",
              "instructor_notes": ""
            },
            {
              "id": 883802,
              "key": "4aec702f-fff0-4630-bcfe-cd3387fa3034",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d1be0f1_architecture-automobile-cars-63294/architecture-automobile-cars-63294.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4aec702f-fff0-4630-bcfe-cd3387fa3034",
              "caption": "",
              "alt": "",
              "width": 320,
              "height": 240,
              "instructor_notes": null
            },
            {
              "id": 883788,
              "key": "1b0c2808-5535-4483-8dbc-fc37f660f46b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `vehicles`\n\n#### VehiclesApiApplication\n\nThis launches the Vehicles API as a Spring Boot application. Additionally, it initializes a few car manufacturers to place in the `ManufacturerRepository`, as well as creating the web clients to connect to the Maps and Pricing services.\n\n## `vehicles.api`\n\n#### API Error\n\nDeclares a few quick methods to return errors and other messages from the Vehicles API.\n\n#### CarController\n\nThis is our actual REST controller for the application. This implements what happens when GET, POST, PUT and DELETE requests are received (using methods in the `CarService`), and how they are responded to (including formatting with `CarResourceAssembler`). You will implement these methods in your code.\n\n#### CarResourceAssembler\n\nThis helps mapping the `CarController` to the `Car` class to help return the API response.\n\n#### ErrorController\n\nThis helps to handle any invalid arguments fed to the API.\n\n## `vehicles.client.maps`\n\n#### Address\n\nVery similar to the `Address` file for `boogle-maps`, this declares a class for use with the `MapsClient`.\n\n#### MapsClient\n\nHandles the format of a GET request to the `boogle-maps` WebClient to get location data.\n\n## `vehicles.client.prices`\n\n#### Price\n\nVery similar to the `Price` file for `pricing-service`, this declares a class for use with the `PriceClient`.\n\n#### PriceClient\n\nHandles the format of a GET request to the `pricing-service` WebClient to get pricing data.\n\n## `vehicles.domain`\n\n#### Condition\n\nThis enumerates the available values for the condition of a car (New or Used).\n\n#### Location\n\nThis declares information about the location of a vehicle. This is **not** the exact same as the `Address` class used by `boogle-maps` - it's primary use is related to the storage of latitude and longitude values. Because the data, such as `address`, gathered from `boogle-maps` is annotated as `@Transient`, this data is not stored until the next time `boogle-maps` is called.\n\n## `vehicles.domain.car`\n\n#### Car\n\nThis declares _certain_ information about a given vehicle, mostly that more about the car entry itself (such as `CreatedAt`). Note that a separate class, `Details`, also stores additional details about the car that is more specific to things like make, color and model. Note that similar to `Location` with data like `address`, this uses a `@Transient` tag with `price`, meaning the Pricing Service must be called each time a price is desired.\n\n#### CarRepository\n\nThis repository provide a type of data persistence while the web service runs, primarily related to vehicle information received in the `CarService`.\n\n#### Details\n\nDeclares additional vehicle details, primarily about the car build itself, such as `fuelType` and `mileage`.\n\n## `vehicles.domain.manufacturer`\n\n#### Manufacturer\n\nThis declares the Manufacturer class, primarily just made of a ID code and name of manufacturer.\n\n#### ManufacturerRepository\n\nThis repository provide a type of data persistence while the web service runs, primarily to store manufacturer information like that initialized in `VehiclesApiApplication`.\n\n## `vehicles.domain`\n\n#### CarNotFoundException\n\nThis creates a `CarNotFoundException` that can be thrown when an issue arises in the `CarService`.\n\n#### CarService\n\nThe Car Service does a lot of the legwork of the code. It can gather either the entire list of vehicles or just a single vehicle by ID (including calls to the maps and pricing web clients). It can also save updated vehicle information. Lastly, it can delete an existing car. All of these are called by the `CarController` based on queries to the REST API. You will implement most of these methods yourself.\n \n## `test/../vehicles.api`\n\n#### CarControllerTest\n\nHere, the various methods performed by the CarController are performed by creating mock calls to the Vehicles API. You will implement some of these methods yourself for great practice in building your own tests.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 883739,
          "key": "82a09607-31ea-458c-b266-a88949797f27",
          "title": "Instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "82a09607-31ea-458c-b266-a88949797f27",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 883783,
              "key": "5092ba6d-cd92-4ab3-abb3-f8534e0b57a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Vehicles API Instructions\nIn this project you will have the opportunity to create a REST-based Vehicles API that communicates with a location and pricing service using Spring Boot, along with converting the existing Pricing Service API to a microservice registered on a Eureka server.\nFollow the [README and code instructions](https://github.com/udacity/JDND/tree/master/projects/P02-VehiclesAPI) and make sure to check the [rubric](https://review.udacity.com/#!/rubrics/2649/view) to ensure you have completed all items.\n\n### Convert the Pricing Service\nConvert the Pricing Service to a microservice, registered on a Eureka server. Also, add an additional test for the microservice.\n\n### Implement the Vehicles API\nImplement all TODOs for the CarService and CarController.\n\n### Test and Document the Vehicles API\n- Add tests for the CarController class\n- Use Swagger to implement API documentation for the Vehicles API\n\n### Run the applications \nNote that the Boogle Maps, Pricing Service and Vehicles API applications must all be running for all operations to perform correctly, although they should be able to launch on their own.\n\nYou can either use these in separate windows in your favorite IDE, or use the below commands:\n\n1. `$ mvn clean package` (run this in each directory containing the separate applications)\n2. Boogle Maps: `$ java -jar target/boogle-maps-0.0.1-SNAPSHOT.jar`\n  - The service is available by default on port 9191. You can check it on the command line by using `$ curl http://localhost:9191/maps\\?lat\\=20.0\\&lon\\=30.0`\n3. Pricing Service: `$ java -jar target/pricing-service-0.0.1-SNAPSHOT.jar`\n4. Vehicles API: `$ java -jar target/vehicles-api-0.0.1-SNAPSHOT.jar`\n  - When the Swagger API documentation is implemented, it should be available at: http://localhost:8080/swagger-ui.html\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}