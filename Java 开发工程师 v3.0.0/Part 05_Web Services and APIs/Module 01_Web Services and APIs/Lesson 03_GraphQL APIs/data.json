{
  "data": {
    "lesson": {
      "id": 875465,
      "key": "98f095f4-eebf-4f9c-841c-9f0cda0539aa",
      "title": "GraphQL APIs",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Dive into GraphQL, a query language for APIs. GraphQL lets calling clients limit the data response to just what is needed.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/98f095f4-eebf-4f9c-841c-9f0cda0539aa/875465/1564506531584/GraphQL+APIs+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/98f095f4-eebf-4f9c-841c-9f0cda0539aa/875465/1564506528407/GraphQL+APIs+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 877480,
          "key": "e2fc8e80-308f-46ff-a952-b5062e206942",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e2fc8e80-308f-46ff-a952-b5062e206942",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899434,
              "key": "3e6ac81c-406a-4e92-b519-b04943452728",
              "title": "JAVA C2 L3 01 GraphQL Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gQnVdnCWBeU",
                "china_cdn_id": "gQnVdnCWBeU.mp4"
              }
            }
          ]
        },
        {
          "id": 883751,
          "key": "7f1216d4-bbce-47e7-b80b-f6aa29ff7977",
          "title": "Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f1216d4-bbce-47e7-b80b-f6aa29ff7977",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899435,
              "key": "1a658c76-f146-4329-9b7c-b9918dfc5288",
              "title": "JAVA C2 L3 02 Overview",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HTTnP0Kgcrg",
                "china_cdn_id": "HTTnP0Kgcrg.mp4"
              }
            },
            {
              "id": 883790,
              "key": "a0ecc3cc-22a2-469c-9121-7a613ae22a0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<a href=\"https://graphql.org/\">GraphQL</a> is a query language for APIs or a syntax that describes how to ask for data and is generally used to load data from a server to a client. GraphQL offers maximum efficiency and flexibility because it allows the calling client to specify exactly what data it needs.\n",
              "instructor_notes": ""
            },
            {
              "id": 899436,
              "key": "4afdbd05-9f6a-415a-804b-437675c92f67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To include GraphQL in your project, a couple of dependencies are needed: \n\n<ul>\n<li>\n<strong>graphql-spring-boot-starter </strong> - This starter is very helpful because it will add and automatically configure a GraphQL Servlet that you can access at /graphql . This starter will also use a GraphQL schema library to parse all schema files found on the classpath. The starter will also set up an endpoint that can access POST requests.\n</li>\n<li>\n<strong>graphql-java-tools</strong> - A helper library to parse the GraphQL schema.\n</li>\n</il>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 883752,
          "key": "0c361067-eafa-4db0-8e07-9b3b9b3df6f1",
          "title": "Schemas",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0c361067-eafa-4db0-8e07-9b3b9b3df6f1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899437,
              "key": "c5d67ea3-8951-42d3-aeb3-07769f8c34c3",
              "title": "JAVA C2 L3 03 Schemas",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "C-TtBoSBOMM",
                "china_cdn_id": "C-TtBoSBOMM.mp4"
              }
            },
            {
              "id": 883793,
              "key": "9ef1942f-67cd-4f99-b27d-5874a60b3d2d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The GraphQL schema defines the data points offered via an API. The schema contains the data types and relationships between them and the set of operations available, things like queries for retrieving data and mutations for creating, updating, and deleting data.\n\nThe schema from the Case Study is shown below.\n\n<pre>\ntype Location {\n id: ID!\n name: String!\n address: String!\n}\n\ntype Query {\n findAllLocations: [Location]!\n}\n\ntype Mutation {\n newLocation(name: String!, address: String) : Location!\n deleteLocation(id:ID!) : Boolean\n updateLocationName(newName: String!, id:ID!) : Location!\n}\n</pre>",
              "instructor_notes": ""
            },
            {
              "id": 898204,
              "key": "245c667c-17d4-40b9-a6e3-5481efafab2d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "245c667c-17d4-40b9-a6e3-5481efafab2d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "There can be multiple root Query and Mutation types in a single schema. ",
                "answers": [
                  {
                    "id": "a1562302831463",
                    "text": "False",
                    "is_correct": true
                  },
                  {
                    "id": "a1562302834926",
                    "text": "True",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 898205,
              "key": "2316c252-b4dd-4d10-af41-72cd05782480",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2316c252-b4dd-4d10-af41-72cd05782480",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the file extension for a GraphQL schema file?",
                "answers": [
                  {
                    "id": "a1562302991276",
                    "text": ".graphs",
                    "is_correct": false
                  },
                  {
                    "id": "a1562303031450",
                    "text": ".graphql",
                    "is_correct": false
                  },
                  {
                    "id": "a1562303032797",
                    "text": ".graphqls",
                    "is_correct": true
                  },
                  {
                    "id": "a1562303033651",
                    "text": ".graphical",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883753,
          "key": "233e7b3d-43e3-44e0-b6b8-47b2424a9f06",
          "title": "Operations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "233e7b3d-43e3-44e0-b6b8-47b2424a9f06",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899438,
              "key": "312edc2f-c408-479a-baa8-51aa4393d5db",
              "title": "JAVA C2 L3 04 Operations",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "iAQOimeLzfg",
                "china_cdn_id": "iAQOimeLzfg.mp4"
              }
            },
            {
              "id": 883794,
              "key": "c9348d68-5b72-4682-9e05-0fcb54dfb894",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "GraphQL offers operations on data like queries and mutations.\n\n<h4>Queries</h4>\nA query allows for the retrieving of data. Each query will have a specific object that it returns and based on the object returned, you can add or remove fields to match the exact data you need to fit your specific use case.\n\n<h4>Mutations</h4>\nGraphQL has the ability to update the data stored on the server, by means of mutations. Mutations, such as, create, update, or delete will change the data, unlike a query.\n",
              "instructor_notes": ""
            },
            {
              "id": 898232,
              "key": "b108aa31-31dc-4cc0-91ac-ec64d8bee07b",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b108aa31-31dc-4cc0-91ac-ec64d8bee07b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify THREE operations that mutate data.",
                "answers": [
                  {
                    "id": "a1562374173774",
                    "text": "Deleting",
                    "is_correct": true
                  },
                  {
                    "id": "a1562374217035",
                    "text": "Creating",
                    "is_correct": true
                  },
                  {
                    "id": "a1562374226528",
                    "text": "Reading",
                    "is_correct": false
                  },
                  {
                    "id": "a1562374232005",
                    "text": "Updating",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883754,
          "key": "06e10595-f989-452a-9d6e-578f03ccfea0",
          "title": "GraphiQL",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06e10595-f989-452a-9d6e-578f03ccfea0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899439,
              "key": "57de9bed-7f5c-4f48-9cbe-42407bae4b06",
              "title": "JAVA C2 L3 05 GraphiQL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BsPwClpJl9U",
                "china_cdn_id": "BsPwClpJl9U.mp4"
              }
            },
            {
              "id": 883795,
              "key": "5427914a-a2d2-43ef-839a-eecddf62b33e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A tool called GraphiQL is a simple web app that is able to communicate with any GraphQL Server and execute queries and mutations against it. We'll go much more in-depth on how to use GraphiQL in the Case Study later in this lesson.\n",
              "instructor_notes": ""
            },
            {
              "id": 898233,
              "key": "caed1402-dbaf-41ec-af07-86e4fec75881",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "caed1402-dbaf-41ec-af07-86e4fec75881",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify TWO ways to test a GraphQL API.",
                "answers": [
                  {
                    "id": "a1562374414803",
                    "text": "Postman",
                    "is_correct": true
                  },
                  {
                    "id": "a1562374462185",
                    "text": "GraphiQL",
                    "is_correct": true
                  },
                  {
                    "id": "a1562374471931",
                    "text": "Servlet",
                    "is_correct": false
                  },
                  {
                    "id": "a1562374473234",
                    "text": "SoapUI",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 883756,
          "key": "5c56e0b4-afb8-44e5-914f-584251fa7906",
          "title": "Case Study: Steps",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5c56e0b4-afb8-44e5-914f-584251fa7906",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899441,
              "key": "8fc86914-a70b-4583-942a-ced59d8690e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# GraphQL Case Study Steps",
              "instructor_notes": ""
            },
            {
              "id": 899440,
              "key": "7d02ab63-6a7c-40d6-9d3d-ae2f67a8bd2c",
              "title": "JAVA C2 L3 06 Demo Steps",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5oJZRnbJpe8",
                "china_cdn_id": "5oJZRnbJpe8.mp4"
              }
            },
            {
              "id": 883801,
              "key": "35dfbb93-459c-4352-b1a5-19f2c0e553f5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. \n\nThe REST API has the following components:\n\n<ul>\n <li><strong>Controller </strong>- LocationController.java</li>\n <li><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li>\n <li><strong>CRUD Repository </strong>- LocationRepository.java</li>\n <li><strong>Domain Entity/Model </strong>- Location.java</li>\n<li><strong>Schema </strong>- location.graphqls and via the <a href=\"http://localhost:8080/graphql/schema.json\">GraphiQL console</a> at <a href=\"http://localhost:8080/graphql/schema.json\">http://localhost:8080/graphql/schema.json</a>.</li>\n<li><strong>Mutator </strong>- Mutation.java</li>\n<li><strong>Query </strong>- Query.java</li>\n <li><strong>H2 Database </strong> accessible via <a href=\"http://localhost:8080/h2/\">http://localhost:8080/h2/</a></li>\n<li><strong>Tomcat Server </strong> accessible via <a href=\"http://localhost:8080\">http://localhost:8080</a></li>\n<li><strong>GraphiQL console </strong> accessible via <a href=\"http://localhost:8080/graphiql\">http://localhost:8080/graphiql</a></li>\n</ul>\n\n<h5>Sample Queries/Mutations</h5>\n<pre>\n{\n  findAllApplications {\n    id\n    owner\n    address\n  }\n}\n</pre>\n<pre>\nmutation {\n  newLocation(\n    name: \"MBJ Airport\",\n    address: \"Montego Bay, Jamaica airport location\") {\n      id \n      name\n      address\n    }\n}\n</pre>\n<pre>\nmutation {\n  deleteLocation(id:1)\n}\n</pre>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899442,
          "key": "a4057da1-9e76-467e-8ec4-9abc4dc7246a",
          "title": "Case Study: Bootstrap & Configure",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a4057da1-9e76-467e-8ec4-9abc4dc7246a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899443,
              "key": "c6588c24-2b9a-4ee0-935c-c2c5af39c41f",
              "title": "JAVA C2 L3 07 Demo - Bootstrap And Configure Application",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UOWLDm2FjdA",
                "china_cdn_id": "UOWLDm2FjdA.mp4"
              }
            },
            {
              "id": 906860,
              "key": "7a40801c-832c-4da0-9bac-b17756eaef8f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906872,
          "key": "3eaa5c38-853a-4d33-9efc-a010f773ef2b",
          "title": "Lab I: Build a Dog GraphQL API (Set Up)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3eaa5c38-853a-4d33-9efc-a010f773ef2b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906878,
              "key": "5601fefc-9e97-470e-b146-755beca88053",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab I: Build a Dog GraphQL API\n\nSimilarly to last lesson, but this time with GraphQL, you will work to create a GraphQL API that returns a list of dogs from an embedded H2 in memory database. You'll be able to re-use certain parts of your code from before, although note that you will want to work in a separate project for this lab. As before, you will build on this code throughout each of the lesson's labs, so while it starts with just a small piece, it will get bigger as we go.\n\n## Set Up\n\n- **Step 1:** Use [Spring Initializr](https://start.spring.io/) to bootstrap a simple project. \n  - Add the H2 Database, Spring Web Starter, and the Spring Data JPA dependencies before generating the project.\n\n- **Step 2:** Add the necessary GraphQL dependencies manually in your Maven POM file.\n  - Go ahead and set up the necessary H2 and GraphQL properties to `application.properties` at this time as well.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906874,
          "key": "bbab4b1b-6723-47fd-a25d-67a6ff89a875",
          "title": "Lab I: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bbab4b1b-6723-47fd-a25d-67a6ff89a875",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906893,
              "key": "7add7c01-5ce4-4a76-8f50-eb783725bc74",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog GraphQL API - Set Up\n\nBelow, we'll walk through each step of the lab and look at one potential way to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 906897,
              "key": "fce349e2-27da-43a5-bd7c-583eaf47cd78",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1:** Use [Spring Initializr](https://start.spring.io/) to bootstrap a simple project. \n- Add the H2 Database, Spring Web Starter, and the Spring Data JPA dependencies before generating the project.",
              "instructor_notes": ""
            },
            {
              "id": 907045,
              "key": "a8135dd2-b20d-4340-9613-c2562d0f3009",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d431f96_java-dog-graphql-spring/java-dog-graphql-spring.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a8135dd2-b20d-4340-9613-c2562d0f3009",
              "caption": "Select the correct dependencies for the project",
              "alt": "Select the correct dependencies for the project",
              "width": 600,
              "height": 500,
              "instructor_notes": null
            },
            {
              "id": 906898,
              "key": "b943dd37-253d-4093-9eb8-3f1db1ddb783",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2:** Add the necessary GraphQL dependencies.\n- You will need to manually enter these in your Maven POM file.\n- Set up the necessary H2 and GraphQL properties to `application.properties` at this time as well.\n\nFirst, add the following dependencies in the `pom.xml` file:\n\n```\n\t\t<dependency>\n\t\t\t<groupId>com.graphql-java</groupId>\n\t\t\t<artifactId>graphql-spring-boot-starter</artifactId>\n\t\t\t<version>5.0.2</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.graphql-java</groupId>\n\t\t\t<artifactId>graphql-java-tools</artifactId>\n\t\t\t<version>5.2.4</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.graphql-java</groupId>\n\t\t\t<artifactId>graphiql-spring-boot-starter</artifactId>\n\t\t\t<version>5.0.2</version>\n\t\t</dependency>\n```\n\nThen, head over to your `application.properties` and add the following:\n\n```java\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2\nspring.datasource.url=jdbc:h2:mem:dogdata\n\ngraphql.servlet.mapping=/graphql\ngraphql.servlet.enabled=true\ngraphql.servlet.corsEnabled=true\n\ngraphiql.enabled=true\ngraphiql.endpoint=/graphql\ngraphiql.mapping=graphiql\n```\n\nNote that you don't necessarily have to use the exact same `spring.datasource.url`, `graphql.servlet.mapping`, `graphiql.endpoint`, or `graphiql.mapping`, but that will affect where you go down the road. However, `graphql.servlet.mapping` and `graphiql.endpoint` do need to match, as that is how GraphQL and GraphiQL will interact.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899444,
          "key": "d256c959-8317-4392-9093-ba382bf0b8b3",
          "title": "Case Study: Schema Creation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d256c959-8317-4392-9093-ba382bf0b8b3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899445,
              "key": "4db457d6-aa9a-4494-bf38-8eda88609d48",
              "title": "JAVA C2 L3 08 Demo - Create A Schema",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1lySj-AOyVg",
                "china_cdn_id": "1lySj-AOyVg.mp4"
              }
            },
            {
              "id": 906861,
              "key": "b35f758e-f2f6-4a6d-a844-1a6021c46576",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906879,
          "key": "29ed473a-e607-4b80-a2a1-ebbbf4d2e524",
          "title": "Lab II: Build a Dog GraphQL API (Schema)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "29ed473a-e607-4b80-a2a1-ebbbf4d2e524",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906883,
              "key": "1592b2ac-33f2-4183-9c0b-56a056ee19c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab II: Build a Dog GraphQL API\n\nLet's build more onto our Dog GraphQL API we set up earlier, by adding an entity, GraphQL schema, basic CRUD repository, web service and controller.\n\n## Schema\n\nNote that you can re-use your code from the REST API you built before for Step 1, as well as most of Step 3 depending on your implementation - just make sure you resolve the naming of packages and imports for your new project.\n- **Step 1**: Create an entity called Dog. The dog should have three attributes:\n  - Name\n  - Breed\n  - Origin\n- **Step 2**: Create a GraphQL schema that matches the fields found in the Dog entity.\n  - Add the following query operations:\n    - findDogBreeds\n    - findDogBreedById\n    - findAllDogNames\n  - Add the following mutators:\n    - deleteDogBreed\n    - updateDogName\n\nMake sure to really think the query operations through here - would a user be able to use an otherwise broader query along with the specific fields they want to accomplish the same thing as some of these?\n\n- **Step 3**: Create a repository that extends CrudRepository for creating, reading, updating, and deleting Dog objects.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906884,
          "key": "def35dfa-feee-4412-8b0f-3dbd9453c257",
          "title": "Lab II: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "def35dfa-feee-4412-8b0f-3dbd9453c257",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906894,
              "key": "f01db9e0-ac26-4da0-bb98-dbe08ed41403",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog GraphQL API - Schema\n\nBelow, we'll walk through each step of the lab and look at one potential way to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 906899,
              "key": "4f12913f-f5a5-4e0e-85aa-1fb63075d759",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1**: Create an entity called Dog. \n- The dog should have three attributes:\n  - Name\n  - Breed\n  - Origin\n\nYou can re-use your code from the REST API for the `Dog` entity, just make sure to update the package name accordingly!",
              "instructor_notes": ""
            },
            {
              "id": 906900,
              "key": "eda146b5-87d6-418e-b65d-bd43ac1615ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2**: Create a GraphQL schema.\n- The schema should match the fields found in the Dog entity.\n- Add the following query operations:\n  - findDogBreeds\n  - findDogBreedById\n  - findAllDogNames\n- Add the following mutators:\n  - deleteDogBreed\n  - updateDogName\n\nFollowing the video, create a `graphql` package within the `resources` directory of the project. Within that package, add a `dog.graphqls` file (you can add as a text file in IntelliJ if you do not have the GraphQL plug-in yet). \n\n```\ntype Dog {\n    id: ID!\n    name: String!\n    breed: String!\n    origin: String!\n}\n\ntype Query {\n    findAllDogs: [Dog]!\n    findDogById(id:ID!): Dog!\n}\n\ntype Mutation {\n    deleteDogBreed(breed:String!) : Boolean\n    updateDogName(newName: String!, id:ID!) : Dog!\n}\n```\n\nNow, you may be thinking I did not actually implement the query operations that were requested. But wait - using GraphQL, the user will be able to specify which fields they want from a query. So, simply by adding the queries for find all dogs (where they can request only breed, or only names), and finding a dog by id (where they can request just the breed), these operations actually exist.",
              "instructor_notes": ""
            },
            {
              "id": 906901,
              "key": "928232eb-613d-45d7-a2c9-e4f11fc60276",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 3**: Create a repository that extends CrudRepository.\n- This repository is for creating, reading, updating, and deleting Dog objects.\n\nDepending on how you implemented your `DogRepository` for the REST API, you may be able to completely re-use your code here. I actually chose to completely remove any queries from within the `DogRepository`, as there are already built-in methods for a `CrudRepository` that `findAll` and `findById`.\n\n```java\npackage com.udacity.DogGraphQL.repository;\n\nimport com.udacity.DogGraphQL.entity.Dog;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface DogRepository extends CrudRepository<Dog, Long> {\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 907050,
              "key": "60ecb904-4da0-43ee-b8aa-d2b67a4350a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What about the service and controller?\n\nWe don't need these to implement a GraphQL API. If you still want to have a REST API available, you can add those files to the application as well, and the same endpoints as before will be available.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899446,
          "key": "ce3bc121-899e-42d5-afd8-252368f1f4ae",
          "title": "Case Study: Queries & Mutations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce3bc121-899e-42d5-afd8-252368f1f4ae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899447,
              "key": "73009201-d44f-453f-86bf-a474b3ca8302",
              "title": "JAVA C2 L3 09 Demo - Queries And Mutations",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HK1eis29n-I",
                "china_cdn_id": "HK1eis29n-I.mp4"
              }
            },
            {
              "id": 906862,
              "key": "a3f10f2e-3ebe-40b2-8a91-c0ac847894b1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899448,
          "key": "9da9e63e-a592-4e5a-bb3e-4a582d70dbb2",
          "title": "Case Study: Exception Handling",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9da9e63e-a592-4e5a-bb3e-4a582d70dbb2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899449,
              "key": "59276ca3-0d4e-46a6-9c42-72afbdee16f2",
              "title": "JAVA C2 L3 10 Demo - Exception Handling",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6RiCb4vMAm8",
                "china_cdn_id": "6RiCb4vMAm8.mp4"
              }
            },
            {
              "id": 906863,
              "key": "7446bb77-8e9e-467e-87dd-c8171e364948",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906888,
          "key": "ec2cc8ac-a48a-432c-8809-339789b01a17",
          "title": "Lab III: Build a Dog GraphQL API (Queries & Exceptions)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ec2cc8ac-a48a-432c-8809-339789b01a17",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906890,
              "key": "47a36da0-b273-42ff-b0b1-e50fd59f7182",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab III: Build a Dog GraphQL API\n\nLet's go further with your Dog GraphQL API (and further distinguish it from the earlier REST API) by adding the functionality for queries, mutations and exception handling.\n\n## Queries & Exceptions\n\n- **Step 1**: Create resolvers that implement `GraphQLQueryResolver` matching the operations in the GraphQL schema.\n  - Query\n    - findDogBreeds\n    - findDogBreedById\n    - findAllDogNames\n  - Mutation\n    - deleteDogBreed\n    - updateDogName\n- **Step 2**: Make sure errors are handled appropriately.\n  - If an id is requested that doesn’t exist, appropriately handle the error",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906889,
          "key": "66913752-54fc-4b4e-840c-26da1b297acc",
          "title": "Lab III: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "66913752-54fc-4b4e-840c-26da1b297acc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906895,
              "key": "b8ff04a9-b786-49ab-9e05-961ed2ccd171",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog GraphQL API - Queries & Exceptions\n\nBelow, we'll walk through each step of the lab and look at one potential way to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 906905,
              "key": "5664f31f-718d-4547-ab0a-9eb6ef149fc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1**: Create resolvers that implement `GraphQLQueryResolver`.\n- The query resolver should match the operations in the GraphQL schema.\n  - Query\n    - findDogBreeds\n    - findDogBreedById\n    - findAllDogNames\n  - Mutation\n    - deleteDogBreed\n    - updateDogName\n\nFirst, create a `resolver` package and then add a new class `Query` that implements `GraphQLQueryResolver`. We just need to add the queries we put in `dog.graphqls` earlier.\n\nI already added some of the necessary error handling in `findDogById` for Step 2 here, but it's essentially the same for this file as what you saw for the REST API.\n\n```java\npackage com.udacity.DogGraphQL.resolver;\n\nimport com.coxautodev.graphql.tools.GraphQLQueryResolver;\nimport com.udacity.DogGraphQL.entity.Dog;\nimport com.udacity.DogGraphQL.exception.DogNotFoundException;\nimport com.udacity.DogGraphQL.repository.DogRepository;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Optional;\n\n@Component\npublic class Query implements GraphQLQueryResolver {\n    private DogRepository dogRepository;\n\n    public Query(DogRepository dogRepository) {\n        this.dogRepository = dogRepository;\n    }\n\n    public Iterable<Dog> findAllDogs() {\n        return dogRepository.findAll();\n    }\n\n    public Dog findDogById(Long id) {\n        Optional<Dog> optionalDog = dogRepository.findById(id);\n        if (optionalDog.isPresent()) {\n            return optionalDog.get();\n        } else {\n            throw new DogNotFoundException(\"Dog Not Found\", id);\n        }\n    }\n}\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 907062,
              "key": "88656d4d-65df-42a7-a84f-499fa48cd1d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next up are the mutators. Create a `mutator` package and then add a new class `Mutation` that implements `GraphQLMutationResolver`.\n\nIn these mutations, I am first using the `findAll()` query from the `DogRepository`, then processing to get the relevant entry (if available), and perform the requested operation. There are lots of ways to do this - you could instead add some additional queries to `DogRepository` to help, querying for just a single `Dog` by ID, for instance.\n\nAs with the queries, I've gone ahead and added the exception handling for Step 2 already for simplicity. The one for `deleteDogBreed` is not required in this exercise, but probably helpful for a user.\n\n```java\npackage com.udacity.DogGraphQL.mutator;\n\nimport com.coxautodev.graphql.tools.GraphQLMutationResolver;\nimport com.udacity.DogGraphQL.entity.Dog;\nimport com.udacity.DogGraphQL.exception.BreedNotFoundException;\nimport com.udacity.DogGraphQL.exception.DogNotFoundException;\nimport com.udacity.DogGraphQL.repository.DogRepository;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Optional;\n\n@Component\npublic class Mutation implements GraphQLMutationResolver {\n    private DogRepository dogRepository;\n\n    public Mutation(DogRepository dogRepository) {\n        this.dogRepository = dogRepository;\n    }\n\n    public boolean deleteDogBreed(String breed) {\n        boolean deleted = false;\n        Iterable<Dog> allDogs = dogRepository.findAll();\n        // Loop through all dogs to check their breed\n        for (Dog d:allDogs) {\n           if (d.getBreed().equals(breed)) {\n               // Delete if the breed is found\n               dogRepository.delete(d);\n               deleted = true;\n           }\n        }\n        // Throw an exception if the breed doesn't exist\n        if (!deleted) {\n            throw new BreedNotFoundException(\"Breed Not Found\", breed);\n        }\n        return deleted;\n    }\n\n    public Dog updateDogName(String newName, Long id) {\n        Optional<Dog> optionalDog = dogRepository.findById(id);\n\n        if (optionalDog.isPresent()) {\n            Dog dog = optionalDog.get();\n            // Set the new name and save the updated dog\n            dog.setName(newName);\n            dogRepository.save(dog);\n            return dog;\n        } else {\n            throw new DogNotFoundException(\"Dog Not Found\", id);\n        }\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 906906,
              "key": "d846bd5f-a93c-4473-ad1d-aeb928a8bb9a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2**: Make sure errors are handled appropriately.\n  - If an id is requested that doesn’t exist, appropriately handle the error\n\nSome of this has been handled in the above for the `Query` and `Mutation`. You might be tempted to fully re-use your code for `DogNotFoundException` from earlier, but we need a few changes for it to work properly with GraphQL (note that if you were also adding on a separate REST API using a service and controller, you may want to use separate exception handling for it). This time, you'll want to have it `implement` a `GraphQLError`, and no longer use the `@ResponseStatus` annotation we used with the REST API.\n\n```java\npackage com.udacity.DogGraphQL.exception;\n\nimport graphql.ErrorType;\nimport graphql.GraphQLError;\nimport graphql.language.SourceLocation;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DogNotFoundException extends RuntimeException implements GraphQLError {\n\n    private Map<String, Object> extensions = new HashMap<>();\n\n    public DogNotFoundException(String message, Long invalidDogId) {\n        super(message);\n        extensions.put(\"invalidDogId\", invalidDogId);\n    }\n\n    @Override\n    public List<SourceLocation> getLocations() {\n        return null;\n    }\n\n    @Override\n    public Map<String, Object> getExtensions() {\n        return extensions;\n    }\n\n    @Override\n    public ErrorType getErrorType() {\n        return ErrorType.DataFetchingException;\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 907066,
              "key": "062abbf9-aab9-4007-a2ee-3edc5771d8b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you are also wanting to implement the `BreedNotFoundException`, you can essentially just slightly alter the `DogNotFoundException` to do so. You could of course also potentially combine these into one exception file if you get a little more creative with the `Exception` itself.\n\n```java\npackage com.udacity.DogGraphQL.exception;\n\nimport graphql.ErrorType;\nimport graphql.GraphQLError;\nimport graphql.language.SourceLocation;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BreedNotFoundException extends RuntimeException implements GraphQLError {\n\n    private Map<String, Object> extensions = new HashMap<>();\n\n    public BreedNotFoundException(String message, String invalidBreed) {\n        super(message);\n        extensions.put(\"invalidBreedId\", invalidBreed);\n    }\n\n    @Override\n    public List<SourceLocation> getLocations() {\n        return null;\n    }\n\n    @Override\n    public Map<String, Object> getExtensions() {\n        return extensions;\n    }\n\n    @Override\n    public ErrorType getErrorType() {\n        return ErrorType.DataFetchingException;\n    }\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899450,
          "key": "50ac49f3-bf15-471c-9ae2-bc7187827932",
          "title": "Case Study: Testing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "50ac49f3-bf15-471c-9ae2-bc7187827932",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899451,
              "key": "08c8f17d-436e-40e3-b300-dd9a0707f02e",
              "title": "JAVA C2 L3 11 Demo - Testing",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NQsnZAGRJ2Q",
                "china_cdn_id": "NQsnZAGRJ2Q.mp4"
              }
            },
            {
              "id": 906864,
              "key": "141c3b10-0583-4f39-9187-3fc2050c159a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899452,
          "key": "9ee8848a-d83b-4266-ab5c-b3c475f2e2df",
          "title": "Case Study: GraphiQL",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9ee8848a-d83b-4266-ab5c-b3c475f2e2df",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899453,
              "key": "48790b7c-08ba-49dc-87b4-19b6cfed4c41",
              "title": "JAVA C2 L3 12 Demo - GraphiQL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ZEJOP4OeIBs",
                "china_cdn_id": "ZEJOP4OeIBs.mp4"
              }
            },
            {
              "id": 906865,
              "key": "a41b9830-1025-4cfe-8b39-c0d99b7e2e7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a GraphQL API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson3-graphql\">GitLab</a>. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899678,
          "key": "53494ca0-c742-400d-9d67-48de5ab28272",
          "title": "Lab IV: Build a Dog GraphQL API (Testing)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "53494ca0-c742-400d-9d67-48de5ab28272",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899679,
              "key": "614e2fdd-4f34-419a-91a5-80f61fe738e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab: Build a Dog GraphQL API\n\nHere, we'll finish off this lesson's lab, creating a GraphQL API that returns a list of dogs from an embedded H2 in memory database. This time, you'll create a `.sql` file for some example dog data, and then test that everything with the API is working correctly.\n\n## Testing\n\nYou can re-use your previous `data.sql` file from the last lesson for Step 1, or you can create a new one.\n- **Step 1:** Create a `data.sql` file to create sample dog data in the database.\n\n- **Step 2:** Check that you are able to access your API, and that GraphQL queries work appropriately.\n  - If you have been following the solutions so far, note that `@SpringBootTest` might not play well with your application by default, but that the application should be able to boot on its own still.",
              "instructor_notes": ""
            },
            {
              "id": 899692,
              "key": "5c3c7312-f859-4888-af1e-10b2861e58c6",
              "title": "Build a Dog GraphQL API Lab",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5c3c7312-f859-4888-af1e-10b2861e58c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the \"Build a Dog GraphQL API\" lab."
              ],
              "positive_feedback": "Amazing! You've now built both a REST API and a GraphQL API for a dog database. In the next lesson, you'll also build a similar microservice.",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 906357,
          "key": "f12a32dd-3b50-412c-aa62-554b72b58901",
          "title": "Lab IV: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f12a32dd-3b50-412c-aa62-554b72b58901",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "DogGraphQLSolution",
                "uri": "https://video.udacity-data.com/topher/2019/August/5d4374af_doggraphql/doggraphql.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 906896,
              "key": "330aa3a7-76c0-4a15-abf8-b9453f6e1b93",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog GraphQL API - Testing\n\nBelow, we'll walk through each step of the lab and look at one potential way to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 906907,
              "key": "fb122efe-486a-4ccb-944f-726fee3a005f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1:** Create a `data.sql` file.\n-  The file should create sample dog data in the database.\n\nYou can re-use your previous `data.sql` file or make a new one.",
              "instructor_notes": ""
            },
            {
              "id": 906908,
              "key": "594c9fd6-e83e-4285-945b-0b8ac66420e1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2:** Check that the GraphQL API works appropriately.\n\nFirst, check that your schema shows appropriately at http://localhost:8080/graphql/schema.json. You might consider getting a browser extension or another tool to show formatted json as well, otherwise this will look like a large wall of text.",
              "instructor_notes": ""
            },
            {
              "id": 907070,
              "key": "58c579c9-37ea-4404-b5f9-530083998802",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d43636d_graphql-schema-updated/graphql-schema-updated.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/58c579c9-37ea-4404-b5f9-530083998802",
              "caption": "Example JSON from a schema",
              "alt": "Example JSON from a schema",
              "width": 230,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 907073,
              "key": "37593d5a-854c-4ed8-881f-593e68dd543e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, let's go to [Postman](https://www.getpostman.com/downloads/) to test out whether the queries and mutators we want actually work.\n\nFirst, make sure you are using a `POST` request, then add our graphQL URL http://localhost:8080/graphql to the app. Then, Make sure to add a Header with `Content-Type` as `application/json`.",
              "instructor_notes": ""
            },
            {
              "id": 907074,
              "key": "f82d7c96-b54d-4ab2-b80c-337da16ef525",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4369b0_java-graphql-postman/java-graphql-postman.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f82d7c96-b54d-4ab2-b80c-337da16ef525",
              "caption": "Adding a POST request to our GraphQL API",
              "alt": "Adding a POST request to our GraphQL API",
              "width": 500,
              "height": 250,
              "instructor_notes": null
            },
            {
              "id": 907075,
              "key": "61774243-d7d1-4c10-bd2d-b8d5605670b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, we can test out our queries. Let's look at an example for how a user would accomplish their needs based on the lab query operations. I also added `id` below to know which belongs to each dog, but they could just as easily skip that and only return the specific data they want (you need at least one item selected with GraphQL, and can do multiple at once - but you cannot grab all data without specifying each individual field).\n\nFor each of these below, enter them into \"Body\" in Postman and then \"Send\" the request.\n\n#### findDogBreeds\n```\n{\n\t\"query\":\"{findAllDogs { id breed } }\"\n}\n```\nwhich returns:\n\n```\n{\n    \"data\": {\n        \"findAllDogs\": [\n            {\n                \"id\": \"1\",\n                \"breed\": \"Pomeranian\"\n            },\n            {\n                \"id\": \"2\",\n                \"breed\": \"Pit Bull\"\n            },\n            {\n                \"id\": \"3\",\n                \"breed\": \"Cocker Spaniel\"\n            },\n            {\n                \"id\": \"4\",\n                \"breed\": \"Direwolf\"\n            },\n            {\n                \"id\": \"5\",\n                \"breed\": \"Husky\"\n            }\n        ]\n    }\n}\n```\n\n\n#### findDogBreedById\n```\n{\n\t\"query\":\"{findAllDogs { id breed } }\"\n}\n```\nwhich returns:\n\n```\n{\n    \"data\": {\n        \"findDogById\": {\n            \"id\": \"1\",\n            \"breed\": \"Pomeranian\"\n        }\n    }\n}\n```\n\nYou should also try out an invalid ID with this to check your error handling. As part of the returned JSON, I got `Exception while fetching data (/findDogById) : Dog Not Found`.\n\n#### findAllDogNames\n\n```\n{\n\t\"query\":\"{findAllDogs { id name } }\"\n}\n```\nwhich returns:\n```\n{\n    \"data\": {\n        \"findAllDogs\": [\n            {\n                \"id\": \"1\",\n                \"name\": \"Fluffy\"\n            },\n            {\n                \"id\": \"2\",\n                \"name\": \"Spot\"\n            },\n            {\n                \"id\": \"3\",\n                \"name\": \"Ginger\"\n            },\n            {\n                \"id\": \"4\",\n                \"name\": \"Lady\"\n            },\n            {\n                \"id\": \"5\",\n                \"name\": \"Sasha\"\n            }\n        ]\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 907081,
              "key": "dc4baa99-d267-4ea4-b4e2-8df075a36f7d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Mutations\n\nLet's say we want to change the name of dog four to \"Ghost\". There's a slightly different syntax, that needs `mutation` included in the query as well. Also, make sure to use the escape character `\\` to include quotation marks for strings.\n\n#### updateDogName\n```\n{\n\t\"query\":\"mutation {updateDogName(newName:\\\"Ghost\\\", id:4) { id name breed } }\"\n}\n```\nwhich returns:\n```\n{\n    \"data\": {\n        \"updateDogName\": {\n            \"id\": \"4\",\n            \"name\": \"Ghost\",\n            \"breed\": \"Direwolf\"\n        }\n    }\n}\n```\n\nMake sure to test out an invalid ID here too!\n\n#### deleteDogBreed\n\nFor this, you do not need to add the field specifications afterward.\n\n```\n{\n\t\"query\":\"mutation {deleteDogBreed(breed:\\\"Pomeranian\\\")}\"\n}\n```\n\nwhich returns:\n\n```\n{\n    \"data\": {\n        \"deleteDogBreed\": true\n    }\n}\n```\n\nIf you added an `Exception` for a missing breed, make sure to test that here too!\n\n",
              "instructor_notes": ""
            },
            {
              "id": 907082,
              "key": "314480fc-ddd5-4dd6-ba15-97f17a67c2e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Full Solution\n\nIf you'd like the full solution code all in one place, you can download it through the link below.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 877481,
          "key": "9157a60d-40b4-4a73-9bd9-4c382a2e28e0",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9157a60d-40b4-4a73-9bd9-4c382a2e28e0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899476,
              "key": "bde81ccc-1d1d-48b6-9439-507b6c8ada61",
              "title": "JAVA C2 L3 13 GraphQL Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "zk6uPym8eXc",
                "china_cdn_id": "zk6uPym8eXc.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}