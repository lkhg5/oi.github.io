{
  "data": {
    "lesson": {
      "id": 875461,
      "key": "f9a4fae6-81e6-4871-95df-dcd5ba7536a2",
      "title": "REST APIs",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn how to build RESTful APIs with Spring Boot, first by learning about the REST architecture, then how to use annotations with REST controllers in Spring Boot.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f9a4fae6-81e6-4871-95df-dcd5ba7536a2/875461/1564506512923/REST+APIs+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f9a4fae6-81e6-4871-95df-dcd5ba7536a2/875461/1564506508244/REST+APIs+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 877478,
          "key": "238c7db5-0196-42cc-8a30-6972cffd4500",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "238c7db5-0196-42cc-8a30-6972cffd4500",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899431,
              "key": "701a0948-6151-49e2-acd1-a5c9f8c47979",
              "title": "JAVA C2 L2 01 RestAPIs Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kzV3_EJM5TQ",
                "china_cdn_id": "kzV3_EJM5TQ.mp4"
              }
            }
          ]
        },
        {
          "id": 877492,
          "key": "c82f126e-043a-4388-a4a3-0a502c16b5fd",
          "title": "Architecture Style",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c82f126e-043a-4388-a4a3-0a502c16b5fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899432,
              "key": "d13fe10b-a8d8-47b2-a4d7-2662c1c7b2c3",
              "title": "JAVA C2 L2 02 REST Architecture Style",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "672a5lB093o",
                "china_cdn_id": "672a5lB093o.mp4"
              }
            },
            {
              "id": 883782,
              "key": "eab45042-8260-4a7a-bb91-b76aa3874591",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "REST stands for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer. It’s a set of guidelines application developers use to design APIs.  \n\nThere are four principles that APIs follow:\n\n<ol>\n<li>Data and functionality in the API are considered “resources” and identified through something called the URI, or Uniform Resource Identifier. These are accessed by web links.</li>\n<li>Resources are manipulated using a fixed set of operations.  GET retrieves a resource. POST creates one. Use PUT to update the resource, and of course, DELETE will remove it. </li>\n<li>Resources can be represented in multiple formats, such as HTML, XML, plain text, and other formats defined by a media type. \n</li>\n<li>Communication between the client and server (i.e. endpoint) is stateless. This means the server will not remember or store any state about the client that made the call.</li>\n</ol>\n\n",
              "instructor_notes": ""
            },
            {
              "id": 898203,
              "key": "b345e407-e5a2-4cde-9905-01030fe90c60",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b345e407-e5a2-4cde-9905-01030fe90c60",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify TWO principles that REST APIs must follow.",
                "answers": [
                  {
                    "id": "a1562302398206",
                    "text": "Resources are manipulated through a fixed set of operations.",
                    "is_correct": true
                  },
                  {
                    "id": "a1562302456269",
                    "text": "Resources must be represented in a single format, like XML.",
                    "is_correct": false
                  },
                  {
                    "id": "a1562302457141",
                    "text": "Communication between the client and server must be cached for efficiency.",
                    "is_correct": false
                  },
                  {
                    "id": "a1562302458023",
                    "text": "Resources are identified through a URI and are accessible via web links.",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 877494,
          "key": "035ea642-16c6-45f1-bf56-c9adf3cbcf62",
          "title": "Case Study: Intro & Maven Dependencies",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "035ea642-16c6-45f1-bf56-c9adf3cbcf62",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899862,
              "key": "c3f5c8c1-06c3-4172-8da9-211be1f9e1c3",
              "title": "JAVA C2 L2 03 Demo Pt 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Br5M86T4zek",
                "china_cdn_id": "Br5M86T4zek.mp4"
              }
            },
            {
              "id": 883784,
              "key": "448778d4-daef-49d7-86c2-1f1cd7e71a83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis\">GitLab</a>. \n\n<ul>\n<li>spring-boot-starter-web - This starter pack is used for web application development and automatically adds libraries like Spring MVC, REST, Tomcat, and Jackson.</li>\n<li>com.h2database - This starter pack is used for the H2 in-memory database. </li>\n<li>spring-boot-starter-data-jpa - This starter pack includes JDBC, Hibernate, Transactions API, JPA, and Aspects.</li>\n</ul>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906698,
          "key": "cfe4d2ef-59c7-4aed-a524-9e517a1466fb",
          "title": "Lab I: Build a Dog REST API (Set Up)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cfe4d2ef-59c7-4aed-a524-9e517a1466fb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906699,
              "key": "39b6b6ca-7e9a-4ab1-ae4e-8ed86308aa3b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab I: Build a Dog REST API\n\nThroughout this lesson, you will work to create a REST API that returns a list of dogs from an embedded H2 in memory database. Note that you will build on this code throughout each of the lesson's labs, so while it starts with just a small piece, it will get bigger as we go.\n\n## Set Up\n\n- **Step 1**: Use [Spring Initializr](https://start.spring.io/) to bootstrap a simple project. \n  - Add the H2 Database, Spring Web Starter, and the Spring Data JPA dependencies before generating the project.\n- **Step 2**: Set-up the H2 in-memory database.\n  - Enable the console, add a path for the console, and create a url for the datasource using H2.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906700,
          "key": "7fa1f4f9-8924-4df9-8513-ff8d3053010a",
          "title": "Lab I: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7fa1f4f9-8924-4df9-8513-ff8d3053010a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906701,
              "key": "ee9fb51a-de0f-49b5-865d-6fb8d6f77274",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog REST API - Set Up\n\nBelow, we'll walk through each step of the lab and look at *one potential way* to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.\n\n## **Step 1**: Use [Spring Initializr](https://start.spring.io/) to bootstrap a simple project.\n\n- Add the H2 Database, Spring Web Starter, and the Spring Data JPA dependencies before generating the project.",
              "instructor_notes": ""
            },
            {
              "id": 906702,
              "key": "c14a5e29-8f51-4e09-8842-5d60d732d2d9",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d40cc80_java-dog-rest-spring/java-dog-rest-spring.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c14a5e29-8f51-4e09-8842-5d60d732d2d9",
              "caption": "Select the correct dependencies for the project",
              "alt": "Select the correct dependencies for the project",
              "width": 600,
              "height": 450,
              "instructor_notes": null
            },
            {
              "id": 906703,
              "key": "ebcb29ab-9307-445d-a4df-dcda03f78e0a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2**: Set-up the H2 in-memory database.\n\n- Enable the console, add a path for the console, and create a url for the datasource using H2.\n\nWithin `application.properties` (found within `/src/main/resources/`), you could add the following code:\n\n```pseudo\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2\n\nspring.datasource.url=jdbc:h2:mem:dogdata\n```\n\nNote that `dogdata` is just what I chose as the name - yours does not need to match this.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 877498,
          "key": "41d62737-f1f1-4643-bdaa-4b391e0ca8e7",
          "title": "Case Study: Annotations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "41d62737-f1f1-4643-bdaa-4b391e0ca8e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899863,
              "key": "2ec9d00a-0298-4261-b1df-240982a77238",
              "title": "JAVA C2 L2 03 Demo Pt 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis\">GitLab</a>. ",
              "video": {
                "youtube_id": "kW6jWuxtCfE",
                "china_cdn_id": "kW6jWuxtCfE.mp4"
              }
            },
            {
              "id": 883789,
              "key": "ff80e2ee-3232-4158-9311-618ac903592d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<table border=\"1\">\n<tr>\n<th>Annotation</th><th>Description</th>\n</tr>\n<tr>\n<td>@Entity</td><td>This marks a Java class as an entity, which means it will be persisted to the database.  Typically, an entity maps to a database table and the table contains rows that represent that given entity.</td>\n</tr>\n<tr>\n<td>@RestController</td><td>This marks a class as a REST API. @RestController is a convenience annotation that combines @Controller and @ResponseBody.</td>\n</tr>\n<tr>\n<td>@GetMapping</td><td>This annotation handles HTTP GET requests and acts as a shortcut for @RequestMapping (method = RequestMethod.GET).</td>\n</tr>\n</table>\n",
              "instructor_notes": ""
            },
            {
              "id": 898176,
              "key": "01aedddc-f0f4-46c9-9172-099c6806c1ed",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "01aedddc-f0f4-46c9-9172-099c6806c1ed",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which annotation simplifies creating RESTful web services?",
                "answers": [
                  {
                    "id": "a1562211303677",
                    "text": "@Controller",
                    "is_correct": false
                  },
                  {
                    "id": "a1562211327267",
                    "text": "@API",
                    "is_correct": false
                  },
                  {
                    "id": "a1562211328313",
                    "text": "@RestController",
                    "is_correct": true
                  },
                  {
                    "id": "a1562211329431",
                    "text": "@WebService",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 898177,
              "key": "a2ddf20a-9c1e-45f2-bfe2-bd0db2f71717",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a2ddf20a-9c1e-45f2-bfe2-bd0db2f71717",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which is the MOST common term for an object that lives in a database that has the ability to be mapped to a database?",
                "answers": [
                  {
                    "id": "a1562211921624",
                    "text": "Domain",
                    "is_correct": false
                  },
                  {
                    "id": "a1562211935755",
                    "text": "Entity",
                    "is_correct": true
                  },
                  {
                    "id": "a1562211936677",
                    "text": "Row",
                    "is_correct": false
                  },
                  {
                    "id": "a1562211937532",
                    "text": "Model",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 906704,
          "key": "d2da4dbd-6291-449b-9212-9f5ca5557937",
          "title": "Lab II: Build a Dog REST API (Annotations I)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d2da4dbd-6291-449b-9212-9f5ca5557937",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906707,
              "key": "bd349227-cefc-4fc1-a031-5a695b6754c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab II: Build a Dog REST API\n\nLet's build more onto our Dog REST API we set up earlier, by adding an entity and a controller.\n\n## Annotations Part I\n\n- **Step 1**: Create an entity called Dog. The dog should have three attributes:\n  - Name\n  - Breed\n  - Origin\n- **Step 2**: Create a web controller using `@RestController`.\n  - You just need to create the structure of the controller for now. You'll add more to it once we discuss services next.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906705,
          "key": "a15f36e5-4874-4ace-a561-de9bcea3ae04",
          "title": "Lab II: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a15f36e5-4874-4ace-a561-de9bcea3ae04",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 906708,
              "key": "2f16f070-3005-4190-b741-18c8ac32f474",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog REST API - Annotations Part I\n\nBelow, we'll walk through each step of the lab and look at *one potential way* to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.",
              "instructor_notes": ""
            },
            {
              "id": 906709,
              "key": "f23a7cc1-740b-4fcc-97c2-ef619d2b83b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1**: Create an entity called Dog. \n\n- The dog should have three attributes:\n  - Name\n  - Breed\n  - Origin\n\nFirst, create a new package in the same directory that holds your main application, called `entity`. Then, create a new Java class called `Dog`.\n\nThe below code could be used to implement such an entity with the required attributes. Note that you should also include constructors for the class, as well as accessors and mutators for the three attributes. **Important**: The package name may differ depending on what you used during the set up of your project - make sure to adjust it to apply to your own project structure!\n\n```java\npackage com.udacity.DogRestApi.entity;\n\nimport javax.persistence.*;\n\n@Entity\npublic class Dog {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String name;\n    private String breed;\n    private String origin;\n\n    public Dog(Long id, String name, String breed, String origin) {\n        this.id = id;\n        this.name = name;\n        this.breed = breed;\n        this.origin = origin;\n    }\n\n    public Dog(String name, String breed) {\n        this.name = name;\n        this.breed = breed;\n    }\n\n    public Dog() {}\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getBreed() {\n        return breed;\n    }\n\n    public void setBreed(String breed) {\n        this.breed = breed;\n    }\n\n    public String getOrigin() {\n        return origin;\n    }\n\n    public void setOrigin(String origin) {\n        this.origin = origin;\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 906710,
              "key": "d4492ee9-77ea-421a-b55c-8e35e8d8f85c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2**: Create a web controller using `@RestController`.\n- You just need to create the structure of the controller for now. You'll add more to it once we discuss services next.\n\nFirst, create a new package in the same directory that holds your main application, called `web`. Then, create a new Java class called `DogController`.\n\nThe below code contains the first steps for this controller, which we will complete in the final lab of this lesson after implementing the related `DogService`.\n\n```java\npackage com.udacity.DogRestApi.web;\n\nimport org.springframework.web.bind.annotation.RestController;\n// Note - we will eventually also import additional packages later on\n\n@RestController\npublic class DogController {\n\n}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 877496,
          "key": "48d68a4d-2bf9-43b6-818c-e4732dfc289b",
          "title": "Case Study Continued",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48d68a4d-2bf9-43b6-818c-e4732dfc289b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899864,
              "key": "a6614b7d-cb14-4606-a2cb-fb743b710250",
              "title": "JAVA C2 L2 03 Demo Pt 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7h28NrYZ1RU",
                "china_cdn_id": "7h28NrYZ1RU.mp4"
              }
            },
            {
              "id": 877497,
              "key": "525223b3-9a64-421f-ab86-d6e557fcca7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The case study is a REST API that retrieves a list of locations from a database. The code can be cloned from <a href=\"https://gitlab.com/videolearning/udacity-java/tree/master/Lesson2-restapis\">GitLab</a>. \n\nThe REST API has the following components:\n\n<ul>\n <li><strong>Controller </strong>- LocationController.java</li>\n <li><strong>Service </strong>- LocationService.java and LocationServiceImpl.java</li>\n <li><strong>CRUD Repository </strong>- LocationRepository.java</li>\n <li><strong>Domain Entity/Model </strong>- Location.java</li>\n <li><strong>H2 Database </strong> accessible via <a href=\"http://localhost:8080/h2/\">http://localhost:8080/h2/</a></li>\n<li><strong>Tomcat Server </strong> accessible via <a href=\"http://localhost:8080\">http://localhost:8080</a></li>\n</ul>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899674,
          "key": "6c483d51-ee85-4aad-ae3a-fded61a2994b",
          "title": "Lab III: Build a Dog REST API (Annotations II)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6c483d51-ee85-4aad-ae3a-fded61a2994b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899675,
              "key": "74d7f2bb-3859-420d-83dc-a98dc3378187",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lab III: Build a Dog REST API\n\nHere, we'll finish off this lesson's lab, creating a REST API that returns a list of dogs from an embedded H2 in memory database. This time, you'll add a repository & service, complete the `DogController` you started earlier, make sure errors are handled, and then create a `.sql` file for some example dog data.\n\n## Annotations Part II\n\n- **Step 1**: Create a repository that extends CrudRepository for creating, reading, updating, and deleting Dog objects.\n\n- **Step 2**: Create a dog service that performs the following operations:\n  - retrieveDogBreed\n  - retrieveDogBreedById\n  - retrieveDogNames\n\nYou may want to check out [this Stack Overflow post](https://stackoverflow.com/questions/22007341/spring-jpa-selecting-specific-columns) for one possible way you might help implement these operations by adjusting the repository created in Step 1.\n\n- **Step 3**: Update the web controller using `@RestController` that handles requests for retrieving:\n  - a list of Dog breeds\n  - a list of Dog breeds by Id\n  - a list of Dog names\n\n- **Step 4**: Make sure errors are handled appropriately.\n  - if an id is requested that doesn’t exist, appropriately handle the error\n\n- **Step 5**: Create a `data.sql` file to create sample dog data in the database.\n\nIf you aren't familiar with SQL, take a look back at [Kesha's file](https://gitlab.com/videolearning/udacity-java/blob/master/Lesson2-restapis/bootstrap/src/main/resources/data.sql) from the Location API case study.\n- **Step 6**: Check that you are able to access your API.",
              "instructor_notes": ""
            },
            {
              "id": 899691,
              "key": "fa28ca45-7acd-4223-9293-ed24166bfb44",
              "title": "Build a Dog REST API Lab",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fa28ca45-7acd-4223-9293-ed24166bfb44",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "I completed the \"Build a Dog REST API\" lab."
              ],
              "positive_feedback": "Great! You've now built your own functioning REST API. Soon, you'll develop a similar GraphQL API and microservice!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 906356,
          "key": "ff7698b0-5bca-4c12-bced-4aaa6f5621cd",
          "title": "Lab III: Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ff7698b0-5bca-4c12-bced-4aaa6f5621cd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "DogRestApiSolution",
                "uri": "https://video.udacity-data.com/topher/2019/July/5d41e2fa_dogrestapi/dogrestapi.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 906693,
              "key": "05de7c63-857c-4d86-a7d2-9576d3eba425",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Build a Dog REST API - Annotations Part II\n\nBelow, we'll walk through each step of the lab and look at *one potential way* to implement the lab. Even if you get stuck, you should always first try to work through the lab without the solution before coming here, so that you can best learn the related skills and be ready for the project at the end of the course.\n",
              "instructor_notes": ""
            },
            {
              "id": 906711,
              "key": "fbc93c8c-1766-4008-b53b-ec810b3946d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 1**: Create a repository that extends CrudRepository.\n- This repository is for creating, reading, updating, and deleting Dog objects.\n\nFirst, create a new package in the same directory that holds your main application, called `repository`. Then, create a new Java **interface** called `DogRepository` (note that you can create a new `interface` in IntelliJ first by adding a new Java class, and then selecting `interface` on the menu that comes up).\n\nHere, you'll need to import both your `Dog` entity as well as `CrudRepository` from the Spring framework, which will extend your `DogRepository` interface. While Spring implements a lot of the `repository` for you, I have added a few helpful queries to be able to obtain some of the necessary information for our `DogService` later. When I use an `id` as input to `findBreedById`, I needed to add a `:` into the query line to feed in from my method.\n\nNote that instead of taking this approach, you could alternatively use the built-in queries from `CrudRepository` within the `DogService` to get all dogs or get a dog by ID, then process the resulting object as well.\n\n```java\npackage com.udacity.DogRestApi.repository;\n\nimport com.udacity.DogRestApi.entity.Dog;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.List;\n\npublic interface DogRepository extends CrudRepository<Dog, Long> {\n    @Query(\"select d.id, d.breed from Dog d where d.id=:id\")\n    String findBreedById(Long id);\n\n    @Query(\"select d.id, d.breed from Dog d\")\n    List<String> findAllBreed();\n\n    @Query(\"select d.id, d.name from Dog d\")\n    List<String> findAllName();\n}\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 906712,
              "key": "dbcec60a-c560-4196-a311-f3b2809d6439",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 2**: Create a dog service.\n- The service should perform the following operations:\n  - retrieveDogBreed\n  - retrieveDogBreedById\n  - retrieveDogNames\n\nFirst, create a new package in the same directory that holds your main application, called `service`. Then, we'll create two files - one for an `interface` called `DogService`, and the other a `class` called `DogServiceImpl` that will actually `implement` the `DogService`. Splitting them like this is not necessarily required, but is good practice.\n\nFirst, let's look at `DogService`, which can pretty simply add the method names noted for this step. Note that I also added a `retrieveDogs` method that can get all of the dogs' information, but that's not required.\n\n```\npackage com.udacity.DogRestApi.service;\n\nimport com.udacity.DogRestApi.entity.Dog;\n\nimport java.util.List;\n\npublic interface DogService {\n    List<Dog> retrieveDogs();\n    List<String> retrieveDogBreed();\n    String retrieveDogBreedById(Long id);\n    List<String> retrieveDogNames();\n}\n```\n\nNow, we can look at the implementation of the `DogService` within `DogServiceImpl`. Note that while the `repository` already has `findAll()` (and `findById(id)`, not used here) implemented, the other methods used here were implemented above within the `DogRepository`, or else they would not work. You'll want to use the `@Service` and `@AutoWired` annotations here as well.\n\n```java\npackage com.udacity.DogRestApi.service;\n\nimport com.udacity.DogRestApi.entity.Dog;\nimport com.udacity.DogRestApi.repository.DogRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class DogServiceImpl implements DogService {\n    @Autowired\n    DogRepository dogRepository;\n\n    public List<Dog> retrieveDogs() {\n        return (List<Dog>) dogRepository.findAll();\n    }\n\n    public List<String> retrieveDogBreed() {\n        return (List<String>) dogRepository.findAllBreed();\n    }\n\n    public String retrieveDogBreedById(Long id) {\n        return (String) dogRepository.findBreedById(id);\n    }\n\n    public List<String> retrieveDogNames() {\n        return (List<String>) dogRepository.findAllName();\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 906713,
              "key": "618f3eee-9076-4068-90d8-eca7083b5183",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 3**: Update the web controller.\n- The updated controller should handle requests for retrieving:\n  - a list of Dog breeds\n  - a list of Dog breeds by Id \n  - a list of Dog names\n\nBelow, I have updated the `DogController` to now use functions from the `DogService`, along with `@GetMapping`, to configure the different paths where a user could `GET` information from the Dog API. Note the use of `ResponseEntity` and `HttpStatus` to help formulate the API response. The paths **do not** need to match what I used - theoretically, if you wanted to return the information about your dogs from a path `/cats` you could, although that would clearly be confusing to the end user. I also added the extra mapping just for getting all dogs (`/dogs`), although it wasn't specified in the lab.\n\nWhile I use `@PathVariable` along with the dog ID below, note that you could also use `@RequestParam` with a few minor changes to achieve the same result (see more [here](https://javarevisited.blogspot.com/2017/10/differences-between-requestparam-and-pathvariable-annotations-spring-mvc.html)).\n\n```java\npackage com.udacity.DogRestApi.web;\n\n// Don't forget the new imports!\nimport com.udacity.DogRestApi.entity.Dog;\nimport com.udacity.DogRestApi.service.DogService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class DogController {\n    private DogService dogService;\n\n    @Autowired\n    public void setDogService(DogService dogService) {\n        this.dogService = dogService;\n    }\n\n    @GetMapping(\"/dogs\")\n    public ResponseEntity<List<Dog>> getAllDogs() {\n        List<Dog> list = dogService.retrieveDogs();\n        return new ResponseEntity<List<Dog>>(list, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/dogs/breed\")\n    public ResponseEntity<List<String>> getDogBreeds() {\n        List<String> list = dogService.retrieveDogBreed();\n        return new ResponseEntity<List<String>>(list, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/{id}/breed\")\n    public ResponseEntity<String> getBreedByID(@PathVariable Long id) {\n        String breed = dogService.retrieveDogBreedById(id);\n        return new ResponseEntity<String>(breed, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/dogs/name\")\n    public ResponseEntity<List<String>> getDogNames() {\n        List<String> list = dogService.retrieveDogNames();\n        return new ResponseEntity<List<String>>(list, HttpStatus.OK);\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 906714,
              "key": "b856fe44-4a2f-4ef9-9541-eacada97d7af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 4**: Make sure errors are handled appropriately.\n  - If an id is requested that doesn’t exist, appropriately handle the error\n\nHere, you'll want to first add a new Java class to the `service` package, called `DogNotFoundException`. We'll use `@ResponseStatus` along with an `HttpStatus` of `NOT_FOUND` to return a message (or `reason` in code) if an invalid ID was used.\n\n```java\npackage com.udacity.DogRestApi.service;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = \"Dog not found\")\npublic class DogNotFoundException extends RuntimeException {\n\n    public DogNotFoundException() {\n    }\n\n    public DogNotFoundException(String message) {\n        super(message);\n    }\n}\n```\n\nThat's part one  - we haven't actually handled the error yet. To do so, you'll want to go back to `DogServiceImpl`, and specifically to the `retrieveDogBreedById` method (or your similarly named method) for retrieving a Dog breed by Id.\n\nYou'll want to make sure to import `Optional`, as we'll use that to try to get the resulting `Dog` object. If the `Dog` does not exist, you'll throw the `DogNotFoundException`.\n\n```java\n// Make sure to add this import\nimport java.util.Optional;\n\n...\n\n    public String retrieveDogBreedById(Long id) {\n        Optional<String> optionalBreed = Optional.ofNullable(dogRepository.findBreedById(id));\n        String breed = optionalBreed.orElseThrow(DogNotFoundException::new);\n        return breed;\n    }\n\n...\n```",
              "instructor_notes": ""
            },
            {
              "id": 906715,
              "key": "cd3f2c7f-f559-4678-92d4-b5dd47850dc4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 5**: Create a `data.sql` file.\n- The file should create sample dog data in the database.\n\nThis last step is very open-ended, as you can add whatever dog details you want. Below, I've added five example dogs into my own `data.sql` file. This file should be within the `resources` directory (where your `application.properties` file was earlier).\n\n```sql\nINSERT INTO dog (id, name, breed, origin) VALUES (1, 'Fluffy', 'Pomeranian', 'Mountain View, CA');\nINSERT INTO dog (id, name, breed, origin) VALUES (2, 'Spot', 'Pit Bull', 'Austin, TX');\nINSERT INTO dog (id, name, breed, origin) VALUES (3, 'Ginger', 'Cocker Spaniel', 'Kansas City, KS');\nINSERT INTO dog (id, name, breed, origin) VALUES (4, 'Lady', 'Direwolf', 'The North');\nINSERT INTO dog (id, name, breed, origin) VALUES (5, 'Sasha', 'Husky', 'Buffalo, NY');\n```",
              "instructor_notes": ""
            },
            {
              "id": 906843,
              "key": "760a1b06-79f1-4d3e-92fe-5ecf5c3f322d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## **Step 6**: Check that you are able to access your API.\n\nIf everything is implemented correctly, once you run your code, you should be able to visit [localhost:8080/h2](localhost:8080/h2) to first reach the H2 console. Here, I added my my `spring.datasource.url` from `application.properties`:",
              "instructor_notes": ""
            },
            {
              "id": 906844,
              "key": "f0713738-ae10-4ac5-8ceb-8d1cf5e68c2c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d41d8bf_h2-console/h2-console.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0713738-ae10-4ac5-8ceb-8d1cf5e68c2c",
              "caption": "The H2 console",
              "alt": "The H2 console",
              "width": 454,
              "height": 354,
              "instructor_notes": null
            },
            {
              "id": 906845,
              "key": "d9af1c9d-a52b-43a4-980e-d68bdf3ce77b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "After clicking \"Connect\", you should go to the next H2 page, where you should be able to \"Run\" the query and see everything you added to `data.sql`.",
              "instructor_notes": ""
            },
            {
              "id": 906846,
              "key": "5dc94245-b1d4-46f8-9d7d-ee980dafa9ad",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d41d901_h2-query/h2-query.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5dc94245-b1d4-46f8-9d7d-ee980dafa9ad",
              "caption": "The H2 \"Run\" query showing the dogs added to `data.sql`",
              "alt": "The H2 \"Run\" query showing the dogs added to `data.sql`",
              "width": 540,
              "height": 393,
              "instructor_notes": null
            },
            {
              "id": 906847,
              "key": "b65f6b66-612d-44b9-879d-33be01c385bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "From there, I check that I can access the paths I added to my `DogController` at localhost:8080/{path}. Below is the example for my additional `/dogs` path I added.",
              "instructor_notes": ""
            },
            {
              "id": 906848,
              "key": "564037bb-52cb-4baa-b238-6ff390dfca2e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d41d970_dogs-path/dogs-path.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/564037bb-52cb-4baa-b238-6ff390dfca2e",
              "caption": "My result from localhost:8080/dogs",
              "alt": "My result from localhost:8080/dogs",
              "width": 610,
              "height": 135,
              "instructor_notes": null
            },
            {
              "id": 906849,
              "key": "5ada26f3-acd7-4f23-a653-649901e9265f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You should check the two methods returning just breed and name as well for all of the dogs, but most important is likely the response for the breed of a single dog, since it makes use of an ID and error handling.",
              "instructor_notes": ""
            },
            {
              "id": 906850,
              "key": "8a4410f9-5a35-4254-82e9-52743feee881",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d41e010_breed-success/breed-success.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8a4410f9-5a35-4254-82e9-52743feee881",
              "caption": "Use of a valid ID",
              "alt": "Use of a valid ID",
              "width": 305,
              "height": 67,
              "instructor_notes": null
            },
            {
              "id": 906851,
              "key": "836be6f7-9505-4f16-907c-247542c37620",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d41e029_breed-error/breed-error.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/836be6f7-9505-4f16-907c-247542c37620",
              "caption": "An invalid ID example - note it was `Not Found` with reason `Dog not found`",
              "alt": "An invalid ID example - note it was `Not Found` with reason `Dog not found`",
              "width": 580,
              "height": 199,
              "instructor_notes": null
            },
            {
              "id": 906854,
              "key": "d6325fa6-e5d4-4b74-871b-032ad38f5bf4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the above, you can see the potential results of a valid ID being used in the `GET` request, as well as the error when an invalid ID was used. Note that you can further customize this error page (I didn't add an explicit mapping for `/error` as noted in the image), but you can see that the error reason was appropriately returned at the bottom.\n\n## Full Solution\n\nIf you'd like the full solution code all in one place, you can download it through the link below.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 877479,
          "key": "ab80ff35-d0ca-4564-b392-04bf526ae4e9",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab80ff35-d0ca-4564-b392-04bf526ae4e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899433,
              "key": "e7c547db-bb6b-42dd-9151-947d85e94cbc",
              "title": "JAVA C2 L2 04 RestAPIs Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D0HbGi4bgmg",
                "china_cdn_id": "D0HbGi4bgmg.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}