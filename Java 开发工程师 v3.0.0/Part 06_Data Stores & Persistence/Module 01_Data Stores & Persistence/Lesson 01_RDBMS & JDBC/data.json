{
  "data": {
    "lesson": {
      "id": 864415,
      "key": "d3bca1dd-2153-4ba9-a0c2-af27d41c0807",
      "title": "RDBMS & JDBC",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn the basics of a relational database, MySQL and how to use it in your java applications using JDBC.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d3bca1dd-2153-4ba9-a0c2-af27d41c0807/864415/1564509047349/RDBMS+%26+JDBC+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d3bca1dd-2153-4ba9-a0c2-af27d41c0807/864415/1564509043961/RDBMS+%26+JDBC+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 864405,
          "key": "d0f49c3d-73d1-43f4-9e8c-12f15f55e4e5",
          "title": "Welcome",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d0f49c3d-73d1-43f4-9e8c-12f15f55e4e5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864361,
              "key": "92c5779d-f819-4e20-b60a-b1d51e9054b7",
              "title": "Javand305-C03-L01-A01-Welcome 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U6VFfZSOtZw",
                "china_cdn_id": "U6VFfZSOtZw.mp4"
              }
            },
            {
              "id": 864362,
              "key": "f2a2426e-85f0-4622-a19a-054a9bfd002e",
              "title": "Welcome Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Data persistence is a critical component of every application. Here are some additional resources about the topics taught in this lesson,\n1. [JDBC](https://www.oracle.com/technetwork/java/overview-141217.html).\n2. [Spring Boot](https://spring.io/projects/spring-boot) is the application framework.\n3. [Maven](https://maven.apache.org/download.cgi) is used to manage dependencies. [Installation Instructions](https://maven.apache.org/install.html).\n4. The java version in this course is [1.8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 864406,
          "key": "952476c4-c16e-48ff-b993-6aa0b6f6d60b",
          "title": "RDBMS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "952476c4-c16e-48ff-b993-6aa0b6f6d60b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864363,
              "key": "ff850b99-7d55-4a1e-87fc-17d54fb3ad3f",
              "title": "JavaND#305 C04 L01 A02 RDBMS Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cEc0E2r8TVc",
                "china_cdn_id": "cEc0E2r8TVc.mp4"
              }
            },
            {
              "id": 864364,
              "key": "a3db5412-cbb2-44ec-8446-490cda808a12",
              "title": "RDBMS Introduction Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Relational Database\nA relational database is a collection of data where each piece of data has pre-defined relationship with the other pieces of data. These pieces of data are organized as a set of tables with columns and rows. Each row in a table can have a unique identifier called a primary key.  In addition to primary keys, there are foreign keys, and foreign keys are used to relate rows among multiple tables. Foreign keys are also known as referential integrity keys.\n\n### SQL\nStructured Query Language is the de-facto standard for interacting with relational databases.\n\n### Transactions\nA transaction comprises of one or more SQL statements that are executed sequentially in an atomic fashion providing an all-or-nothing guarantee. If one of the statements in the transaction fails, the effects of the previous SQL statements are undone. This is called a transaction “rollback”. On the contrary, if all of the statements succeed, then a transaction is committed, meaning the effects of SQL statements are permanent. \n\n### Atomicity\nA relational database supports Atomicity (all-or-nothing) through transactions. \n\n### Consistency\nConsistency guarantees that all data updates will be made permanent, only if all the required constraints are satisfied. For example, the database will fail an insert statement that is setting a string value for a numerical column. \n\n### Isolation\nA database is multi-threaded. Multiple clients could connect to it and perform operations at the same time. Isolation guarantees that transactions running in multiple threads leave the database in a consistent state.A relational database typically supports different isolation levels and the level determines how much of another transaction’s effects are visible for the current transaction. \n\n### Durability\nRelational database guarantees durability, meaning the results of a transaction or a sql statement are permanent on successful completion. ",
              "instructor_notes": ""
            },
            {
              "id": 864377,
              "key": "3d8e293a-47b2-42df-ae8e-ded717e407d0",
              "title": "RDBMS Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3d8e293a-47b2-42df-ae8e-ded717e407d0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "In a relational database, how do you relate data among multiple tables?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Data in multiple tables can’t be related.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Add a foreign key constraint between the tables whose rows need to be related.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Use transactions when working with multiple tables at the same time.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864365,
              "key": "2ebf474a-d2a9-42da-954f-a79a4c43a471",
              "title": "RDBMS Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2ebf474a-d2a9-42da-954f-a79a4c43a471",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What guarantees that each transaction is independent and not affected by other transactions running in parallel?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Atomicity",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Isolation",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Durability",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864366,
              "key": "39f94680-c3af-43e0-a854-2c97394a4158",
              "title": "JavaND#305 C04 L01 A03 SQL Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PGySJq1-j0A",
                "china_cdn_id": "PGySJq1-j0A.mp4"
              }
            },
            {
              "id": 864372,
              "key": "9541fa10-15d2-44b0-9ab8-728867e185d9",
              "title": "SQL Introduction Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## SQL\n\nSQL is specifically designed for managing data held in a relational database management system. SQL is declarative since it only describes the desired results without explicitly listing commands or steps that must be performed.\n\nSQL statements can be broadly classified into\n* DDL\n* DML\n\n### DDL\n**D**ata **D**escription **L**anguage is used for defining database schemas. DDL statements create, modify, and remove database objects such as tables, indexes, and users. Common DDL statements are `CREATE`, `ALTER` and `DROP`.\n\n### DML\n**D**ata **M**anipulation **L**anguage is used for adding (inserting), deleting, and modifying (updating) data in a relational database. Common DML statements are `INSERT`, `UPDATE` and `DELETE`.",
              "instructor_notes": ""
            },
            {
              "id": 864367,
              "key": "301ac582-b1d5-40da-8390-7a354abf2f09",
              "title": "SQL Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "301ac582-b1d5-40da-8390-7a354abf2f09",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all that is TRUE",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "DDL is used for creating tables.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "DML is used for managing rows in a table.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "`INSERT` and `UPDATE` are common DDL statements.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "None of the above",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864386,
              "key": "cee12167-f118-4650-b248-5dc345bd841a",
              "title": "SQL Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cee12167-f118-4650-b248-5dc345bd841a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why is SQL a declarative domain specific language?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It clearly describes all the steps  needed to access data from a relational database.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It specifies what data is needed in what form but doesn’t provide details on how to access the data.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "SQL is not a declarative language.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 864413,
          "key": "081b8b92-b925-4bb1-b9d6-187d01354742",
          "title": "MySQL",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "081b8b92-b925-4bb1-b9d6-187d01354742",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864402,
              "key": "d1398899-9382-4d5e-b02f-88f07fd1630b",
              "title": "JavaND#305 C03 L01 A03 MySQL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "781l1aOKBro",
                "china_cdn_id": "781l1aOKBro.mp4"
              }
            },
            {
              "id": 864368,
              "key": "80e11676-1695-4647-8210-985e3e97f252",
              "title": "Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "MySQL is a free, widely-used relational database. It’s used in a variety of different contexts and in different businesses around the world.\nMySQL uses a client-server model which means MySQL will be running as a separate process from your application. The application would use a client (or, in Java parlance, a Driver) to interact with the database.\n\nThis course uses [MySQL v5.7](https://dev.mysql.com/doc/refman/5.7/en/).\n\nYou will be setting up MySQL on your machine in the steps below.",
              "instructor_notes": ""
            },
            {
              "id": 864369,
              "key": "96c1963d-caa4-47cb-b0e1-a99939a8d917",
              "title": "Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "96c1963d-caa4-47cb-b0e1-a99939a8d917",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "MySQL is installed and can be started.",
                "Connect to MySQL using the MySQL Command line client.",
                "Create a database named `JDND_C3` using MySQL Client."
              ],
              "positive_feedback": "Congratulations! Now you have a working MySQL installation in your workstation.",
              "video_feedback": null,
              "description": "#### Installation Instructions\n1. Download [MySQL](https://dev.mysql.com/downloads/mysql/5.7.html#downloads).\n2. Install MySQL\n - [Windows Installation](https://dev.mysql.com/doc/refman/5.7/en/windows-installation.html).\n - [MacOS Installation](https://dev.mysql.com/doc/refman/5.7/en/osx-installation.html).\n3. Create Database\n - `CREATE DATABASE JDND_C3`"
            }
          ]
        },
        {
          "id": 864410,
          "key": "821f1cef-1389-4a1b-995b-ef3b3c3f6611",
          "title": "MySQL Datatypes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "821f1cef-1389-4a1b-995b-ef3b3c3f6611",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864401,
              "key": "97584257-7dda-4e6a-a781-ceecf07a4857",
              "title": "Data types introduction",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Data types\nData types identify the type of data that a column holds. Since a relational database requires a schema to be pre-defined, the data types of a column are specified when a table is created.\n\nData types can be broadly classified as,\nNUMBER \nCHAR\nDATETIME\n\n### Numeric Types\nNumeric types are the different types of numbers that a column can have. Those could be regular numbers like [`INTEGER`, `SMALLINT`](https://dev.mysql.com/doc/refman/5.7/en/integer-types.html) etc and floating point types like [ `FLOAT` and `DOUBLE` ](https://dev.mysql.com/doc/refman/5.7/en/floating-point-types.html).\n\n### String types (CHAR)\nMySQL supports several character types like `VARCHAR`, `CHAR`, `TEXT`, `TINYTEXT` etc. These types differ in the amount of characters they can hold and how they behave when a string with more characters is set on the column. An extensive discussion of string types can be found in [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/char.html).\n\n### Datetime Types\nThese are types for representing temporal values, like DATE, TIME, DATETIME and TIMESTAMP. In MySQL, an invalid date time value can be specified using ‘0’.\n\n\nIn general, when learning any new database, it is best to consult the official documentation to understand which data types can be used in that language as well as other review other limitations of that language. \n",
              "instructor_notes": ""
            },
            {
              "id": 864387,
              "key": "9ee62125-9927-45f9-9f26-eb05292a5d0d",
              "title": "Question 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9ee62125-9927-45f9-9f26-eb05292a5d0d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How many bytes does an INT type require?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "2",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "6",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "4",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "8",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864388,
              "key": "6dbbcaff-d390-4bc7-a4d6-88effb0c5b9e",
              "title": "Question 2",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6dbbcaff-d390-4bc7-a4d6-88effb0c5b9e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all that is TRUE.",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "The length of a CHAR column is fixed.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "CHAR maximum length is 55.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "The length of a VARCHAR column is variable.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "VARCHAR strings are padded on the right to the length.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 864411,
          "key": "92c18cdf-32d9-4628-aa16-5ba75c7aa128",
          "title": "Working with Tables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "92c18cdf-32d9-4628-aa16-5ba75c7aa128",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864370,
              "key": "49d99747-d83f-4ccb-aa6f-06e41a8d5d07",
              "title": "What is a table?",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A table is a collection of rows and columns. In a relational database, the type of a column is fixed and so is the number of columns in a row. A row can’t have an arbitrary number of columns. ",
              "instructor_notes": ""
            },
            {
              "id": 864371,
              "key": "1fe01194-0d52-4137-917a-a0f95ca6b256",
              "title": "JavaND#305 C04 L01 A05 Create Tables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wj_gGeXKbxE",
                "china_cdn_id": "wj_gGeXKbxE.mp4"
              }
            },
            {
              "id": 864374,
              "key": "f0b13b0a-251c-4afe-995e-7fab020ecff8",
              "title": "Create Table",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The [AUTO_INCREMENT](https://dev.mysql.com/doc/refman/5.7/en/example-auto-increment.html) attribute allows the user to create a unique identity for any new rows.\n\n```sql\nCREATE TABLE animals (\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\n     name CHAR(30) NOT NULL,\n     PRIMARY KEY (id)\n);\n\nINSERT INTO animals (name) VALUES\n    ('dog'),('cat'),('penguin'),\n    ('lax'),('whale'),('ostrich');\n\nSELECT * FROM animals;\n```\n##### Results\n\n| **id** | **name**    |\n|---|---|\n|  1 | dog     |\n|  2 | cat     |\n|  3 | penguin |\n|  4 | lax     |\n|  5 | whale   |\n|  6 | ostrich |",
              "instructor_notes": ""
            },
            {
              "id": 864373,
              "key": "f707d5f1-1ad0-42d5-b35f-445322bc37cb",
              "title": "Create Table",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f707d5f1-1ad0-42d5-b35f-445322bc37cb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "The SQL executes without errors and the table is created.",
                "The blog post table has an auto-generated primary key.",
                "The blog post table has 3 columns besides the primary key: title, text and created date with appropriate data types."
              ],
              "positive_feedback": "Wonderful! You now know how to create a table.",
              "video_feedback": null,
              "description": "Create a table called _post_ for posts in a blog. A blog has title, text and created time. The maximum length of the title is 255 characters and the text can be up to 1000 characters. It should also have an auto-generated primary key. "
            },
            {
              "id": 864403,
              "key": "0f7e2940-60ad-4f05-8b08-f30760ab10c7",
              "title": "JavaND#305 C04 L01 A06 Alter Table",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WDuUsKHf5ak",
                "china_cdn_id": "WDuUsKHf5ak.mp4"
              }
            },
            {
              "id": 864375,
              "key": "0391fa59-0166-478d-967e-54a01aacebce",
              "title": "Alter Table Quiz",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0391fa59-0166-478d-967e-54a01aacebce",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Blog text column size is 10,000 characters.",
                "New integer column to count the number of likes."
              ],
              "positive_feedback": "Delightful! You have successfully modified a table.",
              "video_feedback": null,
              "description": "Modify the blog post table to increase the number of characters for blog text to 10,000. Add columns to capture the count of likes."
            }
          ]
        },
        {
          "id": 864414,
          "key": "0ce68444-710c-47cf-a8f6-0395132c1b42",
          "title": "Working with Foreign Keys",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0ce68444-710c-47cf-a8f6-0395132c1b42",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864380,
              "key": "6e66d70b-ac49-4bc2-b2db-cf9511250e33",
              "title": "JavaND#305 C03 L01 A05 Working With Constraints",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1HSy1I_58JQ",
                "china_cdn_id": "1HSy1I_58JQ.mp4"
              }
            },
            {
              "id": 864376,
              "key": "083d11e3-3390-42f0-b1d6-055469625aa1",
              "title": "Constraint Quiz",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "083d11e3-3390-42f0-b1d6-055469625aa1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "The SQL executes without errors and the table is created.",
                "The comment table has an auto-generated primary key.",
                "The comment table has 3 columns, the primary key, text, created time with appropriate data types.",
                "The comment table has a foreign key to post table."
              ],
              "positive_feedback": "Wonderful! You now how to create foreign keys.",
              "video_feedback": null,
              "description": "Create a table called _comment_. The comment table has an auto-generated primary key, text and created time and a foreign key to the Post table. The text can have up to 1000 characters."
            },
            {
              "id": 960260,
              "key": "f253feaf-0d7e-45f0-bd04-b91a76117d1b",
              "title": "Foreign Keys Introduction",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Foreign Keys\nSome tables are very limited in its scope. For example, having an orders table that can hold only one type of item would be very limited!\n\nIt is unreasonable to expect the customer to place a new order for each item that they want to buy.\n\nHow do we solve this? We learned that in relational databases rows of multiple tables can be made related using foreign keys. Let’s use that feature to support orders with multiple types of items.\n\nWe are going to create a table to hold items for the order.\n\n```sql\nCREATE TABLE order_item (\n   order_item_id INT AUTO_INCREMENT,\n   order_item_name VARCHAR(300) NOT NULL,\n   order_item_count INT NOT NULL,\n   order_id INT NOT NULL,\n   constraint order_item_pk primary key (order_item_id),\n   constraint order_item_orders_fk\n    foreign key (order_item_id) references orders (ORDER_ID)\n);\n```\n\nAn important thing to note here is that \n`order_item.order_id` is a foreign key of `orders.order_id`.\n\nCreating a foreign key makes sure that the value exists in the column that this foreign key refers to. In other words, we are ensuring that a value exists in `orders.order_id` by creating `order_item.order_id`.\n\nNow for every type of item in the order, a row can be inserted in the order_item table which refers to the order_id. This means that we can support orders with multiple types of items because items can keep track of which order they are a part of. \n\nNow, since we don’t store the items within the order anymore, let’s drop those columns.\n\n```sql\nALTER TABLE orders DROP COLUMN ITEM_NAME;\nALTER TABLE orders DROP COLUMN ITEM_COUNT;\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 864407,
          "key": "58797483-f3c7-4533-9f9d-488f20dcae47",
          "title": "Working with Rows",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "58797483-f3c7-4533-9f9d-488f20dcae47",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 960258,
              "key": "5f276464-b1a1-448c-a0c6-3fe5852d5a9c",
              "title": "INSERT, UPDATE, DELETE, SELECT",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### INSERT\nThe INSERT INTO statement adds a new record to a table.\n\nINSERT INTO can contain values for some or all of the table’s columns.\n```sql\nINSERT INTO tableName (columnNames)\nVALUES (values)\n```\n\n### UPDATE\nUPDATE can update one or more records in a table.\n```sql\nUPDATE tableName SET columnName1 = value1, columnName2 = value2, ………\n```\nIf you want to limit the number of records to UPDATE, you can append a WHERE clause:\n\n```sql\nUPDATE tableName SET columnName1 = value1, columnName2 = value2, …  WHERE conditionIsTrue\n```\n#### Delete\nDELETE can *permanently* delete one or more records from a table.\n```sql\nDELETE tableName\n```\nIf you want to delete specific records, you can append a WHERE clause:\n\n```sql\nDELETE tableName WHERE conditionIsTrue\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 864379,
              "key": "9405ec36-3d8e-488f-a3c3-e53b1ff1eb90",
              "title": "More info",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### SELECT\nSELECT is the primary way to read data from a table. It can read all rows but also sort, filter and group them. \n```sql\nSELECT columns FROM table\n```\n_*_ is a shortcut to read all columns. \n\n```sql\nSELECT * FROM table\n```\nThe above statement reads all columns from all rows.\n\n#### Filter \nWHERE clause accepts a condition and when used with SELECT only rows matching that condition are returned. A wide variety of conditions are supported by SQL.\n```sql\nSELECT columns FROM table WHERE condition\n```\n\n#### Sort\nORDER BY clause sorts the returned rows by one or more columns. It supports both ascending and descending sort. Ascending is the default. For descending use the DESC keyword.\n```sql\nSELECT columns FROM table ORDER BY columns\n```\n#### JOIN\nA SQL JOIN joins data from two tables. SQL supports multiple JOINs in the same query. \n##### Different types of JOINs\nINNER/CROSS JOIN: Intersection. Selects rows that have matching values in both tables. \nLEFT OUTER JOIN: Selects all rows  from the left table with matching rows from the right table.\nRIGHT OUTER JOIN: Select all rows  from the right table with matching rows from the left table.\nFULL OUTER JOIN: Union. Selects all rows from both tables. \n\n##### INNER JOIN\n```sql\nSELECT columns FROM table1 INNER JOIN table2 ON column1 = column2 \n```\n\n\n##### LEFT JOIN\n\n```sql\nSELECT columns FROM table1 LEFT JOIN table2 ON column1 = column2 \n```\n##### RIGHT JOIN\n\n```sql\nSELECT columns FROM table1 RIGHT JOIN table2 ON column1 = column2 \n```\n\n##### FULL JOIN\n\n```sql\nSELECT columns FROM table1 FULL JOIN table2 ON column1 = column2 \n```",
              "instructor_notes": ""
            },
            {
              "id": 864381,
              "key": "c6855c06-40da-4b87-8f45-2c8485ce5aac",
              "title": "Question 1",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c6855c06-40da-4b87-8f45-2c8485ce5aac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Insert contains values for all the columns except the primary key.",
                "Insert statement creates a record and generates a primary key."
              ],
              "positive_feedback": "Good job!",
              "video_feedback": null,
              "description": "Write an INSERT statement to insert a record in the _post_ table."
            },
            {
              "id": 864398,
              "key": "207a44f7-82e3-49ea-9ff4-dfe541aa417f",
              "title": "Question 2",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "207a44f7-82e3-49ea-9ff4-dfe541aa417f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "SELECT returns one row that matches the condition."
              ],
              "positive_feedback": "Well done.",
              "video_feedback": null,
              "description": "Write a SELECT statement to select a row from _post_ table by primary key."
            },
            {
              "id": 864382,
              "key": "cb55506c-c60b-4e06-aa49-5ab70177cfe4",
              "title": "Question 3",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cb55506c-c60b-4e06-aa49-5ab70177cfe4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "One row is deleted"
              ],
              "positive_feedback": "Well done.",
              "video_feedback": null,
              "description": "Write a DELETE statement to delete a row in _post_ table by primary key."
            }
          ]
        },
        {
          "id": 864412,
          "key": "e7ccb788-20a3-452a-ba2b-55f0511b3c3b",
          "title": "JDBC",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e7ccb788-20a3-452a-ba2b-55f0511b3c3b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864383,
              "key": "b9a08f53-5639-4e92-ae53-ce0134a2a33f",
              "title": "JavaND#305 C04 L01 A08 JDBC",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fa6_DKg-1-0",
                "china_cdn_id": "fa6_DKg-1-0.mp4"
              }
            },
            {
              "id": 864384,
              "key": "cb28f2e5-a480-4d01-85c0-0f44fa3775ef",
              "title": "JavaND#305 C04 L01 A010 Connecting To A Database & Send SQL Statements",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oDOYyBnrXrM",
                "china_cdn_id": "oDOYyBnrXrM.mp4"
              }
            },
            {
              "id": 864385,
              "key": "440c0325-6507-4190-b999-d2c52cd95727",
              "title": "Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "440c0325-6507-4190-b999-d2c52cd95727",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the DriverManager class used for?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It is used for sending SQL statements to the database",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It locates a driver based on the JDBC URI and creates a connection.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "DriverManager is an implementation detail of JDBC and it should not be used by the application code.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864391,
              "key": "177081c1-7335-4fa5-a5d4-517d2e46642c",
              "title": "Statement vs PreparedStatement",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "JDBC API provides 3 different interfaces to execute the different types of SQL queries. They are,\n[Statement](https://docs.oracle.com/javase/7/docs/api/java/sql/Statement.html) –  Used to execute normal SQL queries.\n[PreparedStatement](https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html) –  Used to execute parameterized SQL queries.\n[CallableStatement](https://docs.oracle.com/javase/8/docs/api/java/sql/CallableStatement.html) –  Used to execute stored procedures.\n\n\n#### Statement\nStatement is used to send non parameterized  SQL statements to the database. Statement interface is preferred for executing DDL statements, since they are typically executed only once. This does not mean one should not use Statement for other SQL queries. If the statement is executed only once or very sparingly during the lifetime of an application, Statement is a good choice.  \n\nHere’s an example\n\n```java\n//Statement is created from the JDBC Connection object \nStatement stmt = con.createStatement();\n\n//A sample DDL statement execution \nstmt.executeUpdate(\"CREATE TABLE EMPLOYEE (EMP_ID  NUMBER NOT NULL, EMP_NAME VARCHAR)\");\n```\n#### PreparedStatement\nPreparedStatement can be used to send parameterized SQL statements to the database, although parameters are not mandatory.  Since a PreparedStatement is a pre-compiled by the database, it saves the database from regenerating the query plan for each execution of the PreparedStatement. PreparedStatement is the most common and preferred way of executing SQL statements in JDBC. Statement is typically frowned upon. It is recommended to use PreparedStatement if you are executing a particular SQL query multiple times. \n\n```java\n// Use the prepareStatement method to create a PreparedStatement \nPreparedStatement pstmt = con.prepareStatement(\"update EMPLOYEE set EMP_NAME = ? where EMP_ID = ?\");\n  \npstmt.setString(1, \"JaneDoe\");   //Assigns \"JaneDoe\" to first place holder\npstmt.setInt(2, 111); \t//Assigns \"111\" to second place holder\n \n//Execute PreparedStatement\npstmt.executeUpdate();\n```\n\nInstead of indexed placeholders, named placeholders or more commonly **named parameters** can be used. Here’s an example,\n\n```java\n// Use the prepareStatement method to create a PreparedStatement\nPreparedStatement pstmt = con.prepareStatement(\"update EMPLOYEE set EMP_NAME = :name where EMP_ID = :id\");\n  \n//Setting values to place holders using setter methods of PreparedStatement object\npstmt.setString(“name”, \"JaneDoe\");   //Assigns \"JaneDoe\" to the name parameter\npstmt.setInt(“id”, 111); \t//Assigns \"111\" to the id parameter\n \n//Execute PreparedStatement\npstmt.executeUpdate();\n```\n\n#### CallableStatement\nCallableStatement is used to execute stored procedures. A collection of SQL statements are stored as a procedure or function in SQL databases. In SQL, stored procedures are invoked using the `CALL` statement, hence the name CallableStatement.\n",
              "instructor_notes": ""
            },
            {
              "id": 864390,
              "key": "937dfcbf-80b2-464b-995e-1d344735a340",
              "title": "Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "937dfcbf-80b2-464b-995e-1d344735a340",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all that is true for PreparedStatement.",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It can not execute parameterized SQL queries.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It is preferred for executing the same SQL query multiple times.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "PreparedStatement extends from Statement",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "PreparedStatement can not be used for executing for DDL statements",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864393,
              "key": "d2d07cdd-e641-40b7-adaf-4ffb9d9f229d",
              "title": "Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d2d07cdd-e641-40b7-adaf-4ffb9d9f229d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is true about CallableStatement?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It is used for executing DDL statements.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It is used to call stored procedures in the database.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "CallableStatement is not a sub-interface of Statement.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 960259,
              "key": "f405d03d-c65c-4b18-b465-f8978817f770",
              "title": "ResultSet",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### ResultSet\nA `ResultSet` is a cursor that iterates through the rows returned by the database. The `next()` method gives the next row and returns false if there are no more rows. \n\n**Example:**\n```java\ntry(ResultSet rs = stmt.executeQuery(spl:”SELECT ORDER_ID, CUSTOMER_NAME FROM orders”)){\n\n    while(rs.next()){\n        // Do something with rs\n    }\n}\n```\n\nThe ResultSet should always be wrapped in a try block.\n\nInside the while loop, we can use the corresponding `get()` method for the column type to read its value.\n\n```java\nwhile(rs.next()){\n    int orderId = rs.getINt(columnLabel:”ORDER_ID”);\n    String customerName = rs.getString(columnLabel:”CUSTOMER_NAME”);\n}\n```\n\nWe know that `ORDER_ID` is an integer, so we use `getInt()`. `customerName` is a VARCHAR, which is a String, so we use `getString()`.\n\nYou can also read column values by their index in the query.\n\n```java\nString customerName2 = rs.getString(2);\n```\n\nAnd, with that, we have completed the 3 basic steps of database interactions:\n\nConnection\n\nExecuting SQL queries\n\nProcessing the results\n",
              "instructor_notes": ""
            },
            {
              "id": 864395,
              "key": "a9e9a0ee-395e-46f2-9bb6-0a225af0015a",
              "title": "Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a9e9a0ee-395e-46f2-9bb6-0a225af0015a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these statements is true about ResultSet?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "ResultSet includes the results of a SQL query and results can be iterated as many times as needed.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "ResultSet maintains a cursor pointing to the results of the SQL query.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "ResultSet is used to send SQL statements to the database.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 864394,
              "key": "214811ed-ffee-4b8d-bb01-4678eb0eef8c",
              "title": "Using Transactions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "When and how a transaction is committed to a database can be controlled using a JDBC Transaction.\n\n```java\n//transaction block start\n\n//SQL insert statement\n//SQL update statement \n//SQL delete statement\n\n//transaction block end\n```\n\n\n#### Without Transaction\nIf a transaction is not initiated, data is committed when the executeUpdate call returns. \n```java\nString insert = \"INSERT INTO APPUSER\"\n\t\t\t+ \"(ID, USERNAME,, CREATED_TIME) VALUES\"\n\t\t\t+ \"(?,?,?)\";\n\nString update = \"UPDATE APPUSER SET USERNAME =? \"\n\t\t\t+ \"WHERE ID = ?\";\n\nps = getConnection().prepareStatement(insert);\nps.setInt(1, 100);\nps.setString(2, \"jdoe\");\nps.setString(3, \"app\");\nps.setTimestamp(4, getCurrentTimeStamp());\nps.executeUpdate(); // data is committed once this method returns.\n\npsu = getConnection().prepareStatement(update);\npsu.setString(1, \"A very very long string that will cause an error\"); \npsu.setInt(2, 999);\n\npsu.executeUpdate(); //Error, value too big\n```                                      \nOnce you run the code, the ID = 100 is inserted but the username is not updated.\n#### Transaction\nYou can use the following code to place the transaction.\n`connection.setAutoCommit(false)` to start a transaction block.\n`connection.commit()` to successfully commit or end a transaction block.\n`connection.rollback()` to rollback the transaction.\n\n```sql\ndbConnection.setAutoCommit(false); //transaction block start\n\nString insert = \"INSERT INTO APPUSER\"\n\t\t\t+ \"(ID, USERNAME,, CREATED_TIME) VALUES\"\n\t\t\t+ \"(?,?,?)\";\n\nString updateTableSQL = \"UPDATE APPUSER SET USERNAME =? \"\n\t\t\t+ \"WHERE ID = ?\";\n\nps = getConnection().prepareStatement(insert);\nps.setInt(1, 100);\nps.setString(2, \"jdoe\");\nps.setString(3, \"app\");\nps.setTimestamp(4, getCurrentTimeStamp());\nps.executeUpdate(); // this UPDATE is not committed\n\npsu = dbConnection.prepareStatement(update);\npsu.setString(1, \"A very very long string that will cause an error\"); \npsu.setInt(2, 999);\npsu.executeUpdate(); //Error an exception is thrown rollback, including the first insert statement.\n\ndbConnection.commit(); //transaction block end\n```\n\nWhen `executeUpdate()` errors both the INSERT and UPDATE are rolled back.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 864408,
          "key": "fe135df6-5a99-4e2a-b5e4-02f5baeb4b2d",
          "title": "Database Migration",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fe135df6-5a99-4e2a-b5e4-02f5baeb4b2d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864396,
              "key": "88eb55e2-da73-4493-87cd-b179fe23d377",
              "title": "JavaND#305 C04 L01 A09 Database Migration",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ibLQNsK6SuY",
                "china_cdn_id": "ibLQNsK6SuY.mp4"
              }
            },
            {
              "id": 906724,
              "key": "712ce9d0-431f-498d-94ee-f41b371206c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#####  Resources\n* [Why Database migrations?](https://flywaydb.org/getstarted/why)\n* [How Flyway works?](https://flywaydb.org/getstarted/how)\n* [Using migrations in Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-execute-flyway-database-migrations-on-startup)",
              "instructor_notes": ""
            },
            {
              "id": 922147,
              "key": "fb3d6fef-7a3f-4a8f-ad15-2e3d127671ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is the link to the <a href=\"https://github.com/udacity/nd035-v1-C3-Data-Stores-and-Persistence/tree/master/exercises/c3_l1_exercise1\" target=\"_blank\">starter code</a> for the exercise below.",
              "instructor_notes": ""
            },
            {
              "id": 864399,
              "key": "8bc94b7b-6f7b-4c1a-acbf-14ac15ce1e6e",
              "title": "Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8bc94b7b-6f7b-4c1a-acbf-14ac15ce1e6e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "DB migrations are successful and tables are created.",
                "Records are inserted into the table.",
                "Application console prints the log statements for all the rows read."
              ],
              "positive_feedback": "Congratulations! You now completed a Spring Boot JDBC application.",
              "video_feedback": null,
              "description": "##### Environment Setup\n+ MySQL server is started and contains the `JDND-C3 database`. Create it, if not exists.\n+ Java 1.8 is installed.\n+ Checkout the [starter code](https://github.com/udacity/nd035-v1-C3-Data-Stores-and-Persistence/tree/master/exercises/c3_l1_exercise1)\n+ Import the starter code into the IDE like IntelliJ IDEA CE (Optional).\n\n##### Exercise Instructions\n* Create a table called _member_ that represents the members of a health club. The table contains the following columns,\n\n| **Column**      | **Description** |\n| ----------- | ----------- |\n| id      | Auto Generated Primary key       |\n| first_name   | First name of the member        |\n| last_name   | Last name of the member        |\n| age   | How old is the member?        |\n| gender   | Gender of the member       |\n| balance   | Outstanding balance the member owes to the club       |\n\nChoose appropriate data types for each column.\n\n* Write the SQL to create the _member_ table in _src/main/resources/db/migration/V01__CreateTable.sql_.\n* Follow the steps in _Application_ class.\n\n##### How to run the code?\n###### In the IDE, \n+ Run the `Application` class.\n\n###### Using Maven\n+ MacOS - `./mvnw exec:java`\n+ Windows - `mvnw exec:java`"
            },
            {
              "id": 864397,
              "key": "1d49bef4-c168-410a-b716-9a0b5d8a64a4",
              "title": "Details",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Why Database migrations?](https://flywaydb.org/getstarted/why)\n[How Flyway works?](https://flywaydb.org/getstarted/how)\n[Using migrations in Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-execute-flyway-database-migrations-on-startup)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 864409,
          "key": "7d8d29da-a4b7-4d7e-a69c-702c51b9cf65",
          "title": "Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7d8d29da-a4b7-4d7e-a69c-702c51b9cf65",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 864400,
              "key": "d2a02c02-9a64-4dac-8928-81fac0a05a70",
              "title": "JavaND#305 C03 L01 A08 Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9Pz8BdS_bzE",
                "china_cdn_id": "9Pz8BdS_bzE.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}